#!/bin/bash

# x11docker V0.6 / 24.9.2015
# Run X applications and desktop environments in docker on a separate X11 server
# This software is in development and will have major changes in the next future

set -e           # stop script on occuring errors

usage() {
    cat << EOF

x11docker: Create a new X server and run GUI applications
         and / or desktop environments in docker.
         Useful to avoid security issues concerning X forwarding.

To start x11docker from console, switch to tty1 with <CTRL><ALT><F1>.
To start x11docker from within X11, first run 'dpkg-reconfigure x11-common'
and choose option 'anybody'.

Usage:
To run a docker image:
   x11docker [OPTIONS] run [DOCKER_RUN_OPTIONS] IMAGE [COMMAND [ARG1 ARG2 ...]]
To start a docker container:
   x11docker [OPTIONS] start [DOCKER_START_OPTIONS] CONTAINER [CONTAINER2 ...]
x11docker without any option will only create a new X server and run flwm.

Change between displays/X servers pressing <CTRL><ALT><F7>, <CTRL><ALT><F8>, ...
To shut down new X server, choose 'exit' in the window manager.

Options:
 -h, --help            display this message and exit
 -w, --wm COMMAND      window manager to use on new display (default: flwm)
 -d, --desktop         don't run flwm or another wm on new X server;
                       image contains its own desktop and/or window manager
 -s, --sudo            use 'sudo' to run 'su -c docker ...'
 run                   run image in docker. All arguments after 'run' are 
                       submitted to docker. See 'docker run --help' for options.
 start                 start container in docker. all arguments after 'start' 
                       are submitted to docker. See 'docker start --help' for 
                       options. (Hint: use '-ai' as DOCKER_START_OPTIONS).
                       Issue: you have to set option '-x, --xsocket' to the 
                       X socket the image was running the first time.
Advanced options:
 -c, --command         print created docker command on stdout and exit
 -l, --show-log        shows output of docker on stdout after exit of docker
                       (stored in a logfile in ~/.cache/x11docker/x11docker.log.Xn)
 -i, --init $COMMAND   set custom command for xinitrc of new X server
                       default: 'xsetroot -solid darkgrey' (to set bg color)
 -x, --x-socket NUMBER Use X socket NUMBER instead of searching for a free one
                       (checks if there is already a running X server; 
                        trys to create a new one if not)
 -m, --monitor NUMBER  screen number to use. default: 0 
 -a, --auth            Provide X authorisation to image (default: no. Only
                       needed to run docker GUI applications on host DISPLAY :0
                       (not recommended due to security problems)
 -r, --root            allow root to run x11docker. Default: No
                       (A new X server should not be run as root)

CAUTION:  It is possible (but not recommended) to run docker GUI 
          applications on your current display with your primary X Server.
          For example: 'x11docker -dax 0 run --rm x11docker/X11demo'
          For use only with trusted applications.
          DANGER: Applications inside of docker can make keylogging (and other
          bad things) on the host X Server they are connected to. 
          To avoid this problem, use a new X server instead of display :0.

Window manager: x11docker can be used with many desktop-independent window 
         managers, such as fluxbox, flwm, blackbox, amiwm, jwm, pekwm, 
         sapphire, wmaker ... . To terminate the new X-Server, choose exit 
         option of window manager. CAUTION: Some window managers will log off 
         your session instead of only exiting themselves. (f.e. openbox, icewm)
         Recommended: fluxbox, blackbox, flwm. Default: flwm

EOF
}


DOCKERMODE=""                                   # can be either "", "run" or "start", depends on options
DOCKERARGS=""                                   # arguments to submit to docker
x11dockerARGS=""                                # arguments for x11docker without arguments for docker

WINDOWMANAGER="flwm"                            # option '-w, --wm': window manager to use. set default here
CUSTOMXSOCKET=""                                # option '-x, --x-socket': use custom X socket instead of searching for a free one
CUSTOMSCREEN="0"                                # option '-m, --monitor': custom screen number to use. default: 0
CUSTOMXINITCOMMAND="xsetroot -solid darkgrey"   # option '-i, --init': custom command for Xinitrc
ONLYSHOWCOMMAND=""                              # option '-c, --command': if not empty, only show docker command and exit
SETAUTH=""                                      # option '-a, --auth': if 'yes', share host X authority with container
GETROOT=""                                      # option '-s, --sudo': command to get root privileges for 'su -c ...'
SHOWLOG=""                                      # option '-l, --log': if 'yes', output of docker will be shown after exit of X server 
ALLOWROOT=""                                    # option '-r,--root': allow root to run x11docker                            

CACHEFOLDER=$HOME/.cache/x11docker              # define cache to store temporary files
XAUTHFILE=$CACHEFOLDER/x11docker.xauth          # file to store cookie for X authorisation (will get an appendix later)
XINITRC=$CACHEFOLDER/x11docker.xinitrc          # file to store xinitrc                    (will get an appendix later)
x11dockerRC=$CACHEFOLDER/x11dockerrc            # file to store commands to run docker     (will get an appendix later)
x11dockerLOG=$CACHEFOLDER/x11docker.log         # file to log output of docker in xterm    (will get an appendix later)

NEWDISPLAY=""                                   # new display for new X server (if not changed with option '-x, --x-socket')
NEWXSOCKET=""                                   # new x socket for new X server (if not changed with option '-x, --x-socket')
NEWXLOCK=""                                     # .Xn-lock - exists for running X server with socket n


error() {
    # show error messages on stderr and exit
    echo "x11docker ERROR: $*" >&2
    echo "Type 'x11docker --help' for usage information" >&2
    exit 1
}


xdparser() {
    # parse args for x11docker (not those for docker)
    SHORT="hw:dcx:asli:m:r"
    LONG="help,wm:,desktop,x-socket:,xsocket:,command,auth,sudo,show-log,init:,monitor:,showlog,root"
    PARSED=`getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"`
    eval set -- "$PARSED"
    if [[ $? != 0 ]]; then error $? ; fi

    while true; do
        case $1 in
            -h|--help) usage && exit 0                # help
            ;;
            -w|--wm) WINDOWMANAGER=$2 && shift        # custom window manager
            ;;
            -d|--desktop) WINDOWMANAGER=""            # desktop environment or window manager in image; don't run own window manager
            ;;
            -c|--command) ONLYSHOWCOMMAND="yes"       # only show created docker command and exit
            ;;
            -x|--x-socket|--xsocket) CUSTOMXSOCKET=$2 && shift   # custom display number to use
            ;;
            -a|--auth) SETAUTH="yes"                  # get X authority
            ;;
            -s|--sudo) GETROOT="sudo"                 # use sudo to run 'su -c docker ...'
            ;;
            -l|--show-log|--showlog) SHOWLOG="yes"    # show output of docker after at exit
            ;;
            -i|--init) CUSTOMXINITCOMMAND=$2 && shift # custom command to execute in xinitrc
            ;;
            -m|--monitor) CUSTOMSCREEN=$2 && shift    # custom screen to use
            ;;
            -r|--root) ALLOWROOT="yes"                # allow x11docker to be run as root
            ;;
            --) break
            ;;
            *) error "error while parsing $1 : $@"
            ;;
        esac  
        shift
    done
}


# create cache folder
mkdir -p $CACHEFOLDER


# split arguments at 'run' or 'start' in those for x11docker and those for docker
for argument in $*
   do
      if [ -z "$DOCKERMODE" ] ; then
          if [ "$argument" = "run" ] ; then DOCKERMODE="run" ; fi
          if [ "$argument" = "start" ] ; then DOCKERMODE="start" ; fi
          if [ -z "$DOCKERMODE" ] ; then x11dockerARGS="$x11dockerARGS $argument" ; fi
      else
          DOCKERARGS="$DOCKERARGS $argument"
      fi
   done


# parse options
xdparser $x11dockerARGS


# check if script is run as root, if yes, show error & exit
if [ -z "$ALLOWROOT" ] ; then                                              # option '-r,--root': allow x11docker to be run as root
    if [ "0" = "$(id -u)" ] ; then
        error "x11docker should not be run as root. Every child process of 
  the new X server would get root privileges, too. To run docker, you will be
  prompted for your root password only for this one command.
  On systems without a root password, like Ubuntu, choose option '--sudo'
  If you want to allow root to run x11docker, use option '-r, --root'"
    fi
fi


# check if window manager is executable; if not, show error & exit
if [ -n "$WINDOWMANAGER" ] ;then
    command -v $WINDOWMANAGER >/dev/null 2>&1 || { error "could not find executable window manager '$WINDOWMANAGER'. 
  Either install package 'flwm' with 'apt-get install flwm'
  or choose another window manager with option '-w, --wm'
  Type 'x11docker --help' to get a list of recommended window managers."; }
fi


# Look for next free display and set X variables
XS=0  # counter for search of unused X socket - result can be manipulated with option '-x, -x-socket'
while [ -e "/tmp/.X11-unix/X$XS" ]; do   # search unused X socket
    XS=$(($XS + 1))
done
# Define new display on on X socket $XS using screen $CUSTOMSCREEN
if [ -z "$CUSTOMXSOCKET" ] ; then       # set new display ...
    NEWDISPLAY=":$XS.$CUSTOMSCREEN"
else                                    # ... or set custom display
    NEWDISPLAY=":$CUSTOMXSOCKET.$CUSTOMSCREEN"
    XS=$CUSTOMXSOCKET
    # here could be a check whether CUSTOMXSOCKET is valid
fi
NEWXSOCKET="/tmp/.X11-unix/X$XS"
NEWXLOCK="/tmp/.X$XS-lock"
XAUTHFILE="$XAUTHFILE.X$XS"
XINITRC="$XINITRC.X$XS"
x11dockerLOG="$x11dockerLOG.X$XS"
x11dockerRC="$x11dockerRC.X$XS"


# Get X authority cookie
if [ -n "$SETAUTH" ] ; then 
  echo "" > $XAUTHFILE
  xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f $XAUTHFILE nmerge -
fi


# Create command to run docker with X forwarding to new X server
if [ "$DOCKERMODE" = "run" ] ; then
    COMMAND="docker run -e DISPLAY=:0.0 -v $NEWXSOCKET:/tmp/.X11-unix/X0" # define display
    if [ -n "$SETAUTH" ] ; then                                           # option '-a, --auth': share X authentication cookie
        COMMAND="$COMMAND -v $XAUTHFILE:/tmp/x11docker.xauth -e XAUTHORITY=/tmp/x11docker.xauth"
    fi
elif [ "$DOCKERMODE" = "start" ] ; then
    COMMAND="docker start"
else
    COMMAND="#"
fi
COMMAND="$COMMAND $DOCKERARGS"                                            # add custom docker commands
COMMAND="$GETROOT su -c '$COMMAND'"                                       # add commands to get root privileges
COMMAND="$COMMAND  |& tee $x11dockerLOG"                                    # log xterm output of docker in $x11dockerLOG


# option '-c, --command': show created command and exit
if [ -n "$ONLYSHOWCOMMAND" ] ; then
    echo $COMMAND
    exit 0
fi


# create x11dockerrc
echo "#! /bin/bash"                                                         > $x11dockerRC
if [ -z "$WINDOWMANAGER" ] ; then
    echo "echo 'x11docker: Please move mouse cursor in terminal area to get keyboard focus'"  >> $x11dockerRC
fi
echo "echo x11docker: Output of docker and its childs in this terminal will be logged in $x11dockerLOG" >> $x11dockerRC
echo "echo x11docker: Running docker on display $NEWDISPLAY with command"   >> $x11dockerRC
echo "echo $COMMAND"                                                        >> $x11dockerRC
echo $COMMAND                                                               >> $x11dockerRC


# Create new xinitrc
echo "#! /bin/bash"                                                    > $XINITRC
echo "$CUSTOMXINITCOMMAND"                                             >> $XINITRC
if [ -n "$DOCKERMODE" ] ; then                                         # if docker should be started, then ...
    if [ -n  "$WINDOWMANAGER" ] ; then                                 #  ... either start it inside of xterm in window manager 
        echo 'xterm -title x11docker -hold -e '/bin/bash $x11dockerRC' &'  >> $XINITRC
        echo "exec $WINDOWMANAGER"                                     >> $XINITRC
    else                                                               #  ... or it has to run its own window manager/desktop environment
        echo 'exec xterm -title x11docker -e '/bin/bash $x11dockerRC' '    >> $XINITRC
   fi
else                                                                   # otherwise, only run window manager on new X server
    echo "exec $WINDOWMANAGER"                                         >> $XINITRC
fi


# Finally: run docker
echo "x11docker: starting docker on display $NEWDISPLAY with command:"
echo "$COMMAND"
#if [ -e "$NEWXSOCKET" ] ; then          # if X socket already exists, then don't create new X server (due to option '-x, --x-socket')
if [ -e "$NEWXLOCK" ] ; then            # if X socket is already locked, then don't create new X server (due to option '-x, --x-socket')
    /bin/bash $XINITRC
else                                    # create new X server on $NEWDISPLAY with xinit and run docker within $XINITRC
    xinit $XINITRC -- $NEWDISPLAY       # (xinit should not be run as root, because every child process would get root privileges, too.)
fi


# option -l, --show-log
if [ -n "$SHOWLOG" ] ; then 
    echo "x11docker: logged output of docker:"
    cat $x11dockerLOG
fi


exit 0
