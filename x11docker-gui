#! /bin/bash
####################################
## GUI for x11docker
## MIT licence 2016, Martin Viereck
## V 0.1
## Uses 'kaptain' to provide a GUI
####################################

if test ! `command -v kaptain` ; then
  echo "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again." >&2
  xmessage "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again."
  exit 1
fi

if test ! `command -v x11docker` ; then
  echo "Error: did not find executeable 'x11docker'. 
  Please make x11docker available (for example in /usr/local/bin) and try again." >&2
  xmessage "Error: did not find executeable 'x11docker'. 
  Please make x11docker available (for example in /usr/local/bin) and try again."
  exit 1
fi

kaptain_script='
start "x11docker GUI" -> frame1 x11docker buttons;

x11docker -> frame2 choose_wmordesktop;
  
  devel -> devel_info devel_options devxhost devvglrun devprivileged;
    devel_info -> @text("Developer options. Use with care.");
    devel_options -> devtcpxsocket;
      devtcpxsocket -> devnormal | devtcp | ! devxsocket; 
        devnormal  "Default usage of tcp or xsocket \n (--gpu on = xsocket, --gpu off = tcp)" -> "" ;
        devtcp "force usage of X over tcp \n(use with --privileged instead of --gpu)" -> "--devel force-tcp " ;
        devxsocket "force usage of shared X socket\n(use with --privileged instead of --gpu)" -> "--devel force-xsocket ";
      devgpu "--gpu: share devices in /dev/dri" -> "--gpu " | ! "" ;
      devxhost "--xhost: set xhost + on both X servers" -> "--xhost " | "" ;
      devvglrun "--virtualgl: run docker with vglrun" -> "--virtualgl " | ! "";
      devprivileged "--privileged: run docker --privileged" -> "--privileged " | "";

  frame1:framed :horizontal -> choose_image choose_options_advanced;

    choose_image "Main objective of x11docker"-> info imageorexe dockeroptions command;
      info -> @text("x11docker allows you to run GUI applications or full desktops environments \n from inside of docker images. See <Help> for dependencies and more infos.");
      imageorexe -> image | exe | xonly;
        image "Run docker image in another X server" -> " " ;
        exe "Start host application in another X server (instead of docker image)" -> "exe ";
        xonly "Only create new empty X server" -> " # "; 
      command  :beside -> @text("docker image [and command] to run:") @string="";
      dockeroptions :beside -> @text("Additional options for docker (use long form --opt=\"\"): ") @string " ";
  
    choose_options_advanced "Advanced options" -> verbose log LOG cache noxhost sudo;
      verbose "--verbose: Be verbose" -> "--verbose " | "";
      log "--log: Show logfiles in a window" -> "--log " | ! "";
      LOG "--LOG: like --log, but in new X server" -> "--LOG " | ! "";
      cache "--cache: Keep cache files" -> "--cache " | ! "";
      ps "--ps: Keep created container" -> "--ps " | ! "" ;
      noxhost "--no-xhost: Disable any access \n to host X server granted by xhost" -> "--no-xhost " | "" ;
      sudo "--sudo: Use sudo instead of su to run docker" -> "--sudo " | ! "";

      
  frame2:framed :horizontal -> X choose_options;
  
    X:framed "X server to use" -> autochoose | xpra | xephyr | X11;
      autochoose "-x: Choose xpra or Xephyr depending on option --wm or --desktop" -> "-x ";
      xpra "--xpra: Show container application windows on your main desktop" -> "--xpra ";
      xephyr "--xephyr: Show container desktop in a window on your main desktop" -> "--xephyr " xephyrspecials;
        xephyrspecials ->  xephyrfullscreen  xephyrresizeable xephyrsize xephyrglamor;
          xephyrfullscreen "--fullscreen: Run Xephyr in fullscreen mode" -> " --fullscreen " | ! "";
          xephyrresizeable "--resizeable: Make Xephyr window resizeable" -> "--resizeable " | ! "";
          xephyrsize :beside "--size: Preset Xephyr window size: " -> "--size \"" @string="800x600" "\" " | ! "";
          xephyrglamor "--glamor: Enable glamor 2D acceleration" -> "--glamor " | ! "";
      X11 "Use core X server. (Switch with <STRG><ALT><F7>...<F12>)" -> " " gpu;
      
    choose_options "Options" -> hostuser sudouser home clipboard pulseaudio;
      hostuser "--hostuser: Create container user similar to \n your host user (same name, user id and group id) \n (a docker image command must be given)"->  " --hostuser " | ! "";
      sudouser "--sudouser: Like --hostuser, but member of sudo" -> " --sudouser " | !  "";
      home "--home: Share a home folder in ~/x11docker with \n container. (Use only with --hostuser or --sudouser)" -> "--home " | ! "";  
      clipboard "--clipboard: Enable clipboard sharing (best with xpra)" -> "--clipboard " | "";
      pulseaudio "--pulseaudio: Sound with pulseaudio \n (needs pulseaudio on host and in image)" -> "--pulseaudio " | "";
      gpu :beside -> gpu_opt gpu_info;
        gpu_opt "--gpu: Use hardware OpenGL acceleration (beta)" -> "--gpu " | ! "" ;
        
        gpu_info:dialog "3D info" -> @text("Software accelerated OpenGL is available in all provided X servers. \n
 The image needs an OpenGL implementation to profit from it. \n
 The easiest way to achieve this is to install package \"mesa-utils\" in your image. \n
 \n
 Usage of host GPU / hardware acceleration is experimental/beta. You may encounter some \n
 bugs. For example, Xfce desktop will run fine using software rendering, but will \n
 have broken window decorations with hardware rendering. \n 
 Another issue is GPU acceleration does not work over tcp from within docker, \n
 so as a fallback sharing unix socket is used instead. \n
 \n
 To achieve hardware acceleration, x11docker provides host devices found in /dev/dri \n
 to the image. This reduces container isolation and may be seen as a security leak. \n
 \n
 As for now, only core X server provides hardware accelerated 3D / OpenGL rendering. \n
 \n
 To check if hardware acceleration is working, you can run \"glxinfo | grep renderer\". \n
 The OpenGL renderer string should contain your graphics card adapter name. \n
 If the renderer string contains \"llvmpipe\", only software rendering is enabled. \n
 \n
 As a performance check, you can run glxgears in a maximized window.
 ") @close="close"; 
      
  choose_wmordesktop:framed  -> wmordesktop;
    wmordesktop "Choose window manager" -> wm | desktop;
      wm :beside "--wm: Host window manager to use (if using xpra, chosen wm will be ignored)" ->  "--wm \"" @string="xfwm4" "\" ";
      desktop "--desktop: Do not use host window manager. Image contains its own window manager / desktop environment" -> "--desktop ";

      
help:dialog "Help" -> @text("x11docker \n
\n
Create a new X server & run GUI applications and desktop environments from inside of docker images, \n
and show them on your display.\n
Useful to avoid security issues concerning X forwarding. \n
Does not have any dependencies inside of docker images. \n
\n
x11docker and x11docker-gui are published under MIT licence. \n
Look for it on github: https://github.com/mviereck/x11docker\n
Some example images can be found on https://hub.docker.com/u/x11docker/ \n
\n
Dependencies: \n
Depending on choosed options, x11docker needs some packages to be installed. \n
It will check for them on startup and show terminal messages if some are missing. \n
List of possible needed packages: \n
\n
xpra xephyr xvfb xclip kaptain wmctrl pulseaudio docker.io xorg\n 
\n
If using xpra or Xephyr, the dockered applications will appear on your already running X display. \n
(Then you need no tty switching, and x11-common does not need to be changed.)\n
\n
If using core X server, first run <dpkg-reconfigure x11-common> and choose option <anybody>. \n
Otherwise it is not allowed to start a new core X server from within an already running X.\n
You can switch between displays using <STRG><ALT><F7>...<F12>.\n
\n
On systems without a root password, like Ubuntu or Sparky, use option --sudo.\n
\n
For troubleshooting, acivate option --verbose and run x11docker-gui from within a terminal.\n
\n
To see all options and more informations, type in your terminal <x11docker --help>, and have a look at github.
") @close="close";


x11docker_command -> "x11docker " x11docker choose_options_advanced "--" choose_image;
buttons :horizontal ->  run preview desktop_starter orphanedcheck license help @close="Cancel";
  run -> @dump(x11docker_command)=" Run";
  runxterm -> @dump("xterm -xrm '"'"'XTerm*selectToClipboard: true'"'"' -hold -e ",x11docker_command)="Run in xterm";
  preview -> @preview(x11docker_command,"monospace",900)="Preview command" ;
  desktop_starter -> @dump("xterm -e '\''","x11docker --starter ",x11docker,choose_options_advanced," -- ",choose_image,"'\''")="Create desktop starter";
  orphanedcheck -> @dump("xterm -hold -e '"'"'x11docker --orphaned'"'"'")="check orphaned";
  license -> @dump("xterm -hold -e '"'"'x11docker --license'"'"'")="MIT license";
  
'

x11docker_command=$(echo $kaptain_script | kaptain /dev/stdin 2> /dev/null)
echo $x11docker_command
eval $x11docker_command

