#! /bin/bash
####################################
## GUI for x11docker
## MIT licence 2016, Martin Viereck
## V 0.1
## Uses 'kaptain' to provide a GUI
####################################

if test ! `command -v kaptain` ; then
  echo "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again." >&2
  xmessage "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again."
  exit 1
fi

if test ! `command -v x11docker` ; then
  echo "Error: did not find executeable 'x11docker'. 
  Please make x11docker available (for example in /usr/local/bin) and try again." >&2
  xmessage "Error: did not find executeable 'x11docker'. 
  Please make x11docker available (for example in /usr/local/bin) and try again."
  exit 1
fi

kaptain_script='
start "x11docker GUI" -> frame1  x11docker buttons;

x11docker -> frame2 choose_wmordesktop;

  frame1:framed :horizontal -> choose_image choose_options_advanced;

    choose_image "Main objective of x11docker"-> info imageorexe dockeroptions command;
      info -> @text("x11docker allows you to run GUI applications or full desktops from inside of docker \n images. They are segregated from your host X server to avoid security issues.\n See button <Help> for dependencies and more information.");
      imageorexe -> image | exe | xonly;
        image "Run docker image in another X server" -> " " ;
        exe "Start host application in another X server (instead of docker image)" -> "exe ";
        xonly "Only create new empty X server" -> ""; 
      command  :beside -> @text("docker image [and command] to run:") @string="";
      dockeroptions :beside -> @text("Additional options for docker (use long form --opt=\"\"): ") @string " ";
  
    choose_options_advanced "Advanced options" -> verbose VERBOSE log LOG cache ps noxhost;
      verbose "--verbose: Be verbose" -> "--verbose " | "";
      VERBOSE "--VERBOSE: Be very verbose" -> "--VERBOSE " | ! "";
      log "--log: Show xinit logfile in a window" -> "--log " | ! "";
      LOG "--LOG: like --log, but in new X server" -> "--LOG " | ! "";
      cache "--cache: Keep cache files" -> "--cache " | ! "";
      ps "--ps: Keep created container" -> "--ps " | ! "" ;
      noxhost "--no-xhost: Disable any access \n to host X server granted by xhost" -> "--no-xhost " | "" ;
      
  frame2:framed :horizontal -> X choose_options;
  
    X:framed "X server to use" -> autochoose | xpra | xephyr | X11;
      autochoose "-x: Choose xpra or Xephyr depending on option --wm or --desktop" -> "-x ";
      xpra "--xpra: Show container application windows on your main desktop" -> "--xpra ";
      xephyr "--xephyr: Show container desktop in a window on your main desktop" -> "--xephyr " xephyrspecials;
        xephyrspecials ->  xephyrfullscreen  xephyrresizeable xephyrsize;
          xephyrfullscreen "--fullscreen: Run Xephyr in fullscreen mode\n (<ALT><TAB> should still work. brightside is usefull, too)" -> " --fullscreen " | ! "";
          xephyrresizeable "--resizeable: Make Xephyr window resizeable" -> " --resizeable " | ! "";
          xephyrsize :beside "--size: Preset Xephyr window size: " -> "--size \"" @string="800x600" "\" " | ! "";
      X11 "Use core X server. (Switch with <STRG><ALT><F7>...<F12>)" -> " ";
      
    choose_options "Options" -> sudo hostuser sudouser home clipboard pulseaudio;
      sudo "--sudo: Use sudo instead of su to run docker" -> "--sudo " | ! "";
      hostuser "--hostuser: Create container user similar to \n your host user (same name, user id and group id) \n (a docker image command must be given)"->  " --hostuser " | ! "";
      sudouser "--sudouser: Like --hostuser, but with \n sudo permissions without a password" -> " --sudouser " |  ! "";
      home "--home: Share a home folder in ~/x11docker with \n container. (Use only with --hostuser or --sudouser)" -> "--home " | ! "";  
      clipboard "--clipboard: Enable clipboard sharing \n (works best with xpra)" -> "--clipboard " | "";
      pulseaudio "--pulseaudio: Sound with pulseaudio \n (needs pulseaudio on host and in image)" -> "--pulseaudio " | "";

      
  choose_wmordesktop:framed  -> wmordesktop;
    wmordesktop "Choose window manager" -> wm | desktop;
      wm :beside "--wm: Host window manager to use (if using xpra, chosen wm will be ignored)" ->  "--wm \"" @string="openbox" "\" ";
      desktop "--desktop: Do not use host window manager. Image contains its own window manager / desktop environment" -> "--desktop ";

      
help:dialog "Help" -> @text("x11docker \n
\n
Create a new X server & run GUI applications and desktop environments from inside of docker images, \n
and show them on your display.\n
Useful to avoid security issues concerning X forwarding. \n
Does not have any dependencies inside of docker images. \n
\n
x11docker and x11docker-gui are published under MIT licence. \n
Look for it on github: https://github.com/mviereck/x11docker\n
\n
Dependencies: \n
Depending on choosed options, x11docker needs some packages to be installed. \n
It will check for them on startup and show terminal messages if some are missing. \n
List of possible needed packages: \n
\n
xpra xephyr xvfb xclip kaptain wmctrl pulseaudio docker.io xorg\n 
\n
If using xpra or Xephyr, the dockered applications will appear on your already running X display. \n
(Then you need no tty switching, and x11-common does not need to be changed.)\n
\n
If using core X server, first run <dpkg-reconfigure x11-common> and choose option <anybody>. \n
Otherwise it is not allowed to start a new core X server from within an already running X.\n
You can switch between displays using <STRG><ALT><F7>...<F12>.\n
\n
The new X server will be terminated when docker respective the application is closed.\n
\n
On systems without a root password, like Ubuntu or Sparky, use option --sudo.\n
\n
For troubleshooting, acivate options --VERBOSE and --log and run with <Run in xterm>.\n
\n
To see all options and more informations, type in your terminal <x11docker --help>, and have a look at github.
") @close="close";


x11docker_command -> "x11docker " x11docker choose_options_advanced "--" choose_image;
desktop_starter -> @dump("xterm -e '\''","x11docker --starter ",x11docker,choose_options_advanced," -- ",choose_image,"'\''")="Create desktop starter";
license -> @dump("xterm -hold -e '"'"'x11docker --license'"'"'")="MIT license";
zombiecheck -> @dump("xterm -hold -e '"'"'x11docker --zombiecheck'"'"'")="zombiecheck";
buttons :horizontal -> @dump(x11docker_command)=" Run" @dump("xterm -hold -e ",x11docker_command)="Run in xterm" @preview(x11docker_command,"monospace",900)="Preview command" desktop_starter zombiecheck license help @close="Cancel";
'

x11docker_command=$(echo $kaptain_script | kaptain /dev/stdin)
echo $x11docker_command
eval $x11docker_command

