#! /bin/bash
#########################################
## GUI for x11docker
## MIT licence 2016, Martin Viereck
## Uses 'kaptain' to provide a GUI
# https://github.com/mviereck/x11docker
#########################################

error() {
  echo $1 >&2
  xmessage $1
  exit 1
}

[ -n "$(command -v kaptain)" ] || error "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again."

# Try to find x11docker
[ -n "$(echo $PATH | grep $(dirname $0) )" ] && X11DOCKER="x11docker"                          # if x11docker-gui is running in $PATH, x11docker will be there,too (I assume) 
[ -z "$X11DOCKER" ]                          && X11DOCKER="$PWD/x11docker"                     # otherwise, look in current directory
[ -e "$X11DOCKER" ] || error "Error: did not find x11docker, neither in \$PATH nor in current directory"
[ -z "$(command -v $X11DOCKER)" ]            && X11DOCKER="bash $PWD/x11docker"                # if not marked as executeable, run with bash

VERSION="$($X11DOCKER --version)"
x11docker_logo="/tmp/x11docker.png"

#####################
# Preset some options you may want to be set as default
#
DOCKERIMAGE=""              # docker image [+ command]
DOCKEROPTIONS=""            # additional docker options
MYWM=""                     # host window manager
SCREENSIZE="800x600"

# Checkboxes: "!" disables option, "" enables it
HOSTUSER="!"
SUDOUSER="!"
HOMEFOLDER="!"
CLIPBOARD="!"
PULSEAUDIO="!"
GPU="!"
VERBOSE="!"
NOXHOST="!"
NOPWD="!"
SUDO="!"


# these window managers are known to work well with x11docker (alphabetical order)(excluding $Wm_not_recommended and $Wm_ugly):
Wm_good="amiwm blackbox cinnamon compiz ctwm enlightenment fluxbox flwm fvwm"
Wm_good="$Wm_good jwm kwin lxsession mate-session mate-wm marco metacity muffin mutter notion olwm olvwm openbox ororobus pekwm"
Wm_good="$Wm_good sawfish twm wmaker w9wm xfwm4"
# these wm's are recommended, lightweight AND desktop independent. best first:
Wm_recommended_desktop_light="flwm blackbox fluxbox jwm mwm wmaker afterstep amiwm fvwm ctwm pekwm olwm olvwm openbox lxsession" 
# these wm's are recommended, heavy AND desktop independent. best first:
Wm_recommended_desktop_heavy="mate-session p"
# these wm's are recommended and lightweight, but cannot show desktop options. best first:
Wm_recommended_nodesktop_light="sawfish xfwm4 metacity marco mate-wm "
# these wm's are recommended and heavy, but cannot show desktop options (especially exiting themselves). best first:
Wm_recommended_nodesktop_heavy="muffin mutter kwin kwin_x11 cinnamon gnome-shell compiz"
# these wm's are not really useful (please don't hit me) (best first):
Wm_not_recommended="awesome enlightenment evilwm herbstluftwm i3 lwm matchbox miwm plasmashell spectrwm subtle windowlab wmii wm2"
# these wm's cannot be autodetected by wmctrl if they are already running
Wm_nodetect="aewm aewm++ afterstep awesome ctwm mwm miwm olwm olvwm sapphire windowlab wm2 w9wm"
# these wm's can cause problems (they can be beautiful, though):
Wm_ugly="icewm sapphire aewm aewm++"
# these wm's doesn't work:
Wm_bad="clfswm tinywm tritium lxqt-session xfce4-session"
# List of all working window managers, recommended first: (excluding $Wm_bad)
Wm_all="$Wm_recommended_desktop_light $Wm_recommended_nodesktop_light $Wm_recommended_desktop_heavy $Wm_recommended_nodesktop_heavy $Wm_good $Wm_ugly $Wm_not_recommended $Wm_nodetect"
for wm in $Wm_all ; do
  command -v $wm >/dev/null 2>&1 && [ -z "$(echo $HOSTWM | grep $wm)" ] && HOSTWM="$HOSTWM\"$wm\","
done
HOSTWM="$HOSTWM\"\","
HOSTWM="$HOSTWM\"none\",\"auto\""
[ $MYWM ] && HOSTWM="\"$MYWM\",$HOSTWM"

kaptain_script='
start "x11docker '$VERSION'" -> options buttons;
  options:beside -> frameleft frameright;
    frameleft:framed -> choose_image_framed choose_xserver sizefullscreen security;
    frameright:framed -> options_all;
    
  choose_image_framed -> choose_image;
  choose_image "Run GUI applications in docker images on X and Wayland" -> logo_imageorexe dockerimage dockeroptions ;
    logo_imageorexe:beside  -> @icon("'$x11docker_logo'") imageorexe ;
      imageorexe -> image | exe | xonly;
        image:beside     "Run docker image in segregated X server" -> "-- " security_dialog;
        exe              "--exe: Start host application in another X server" -> "--exe -- ";
        xonly            "--xonly: Only create new empty X server" -> "--xonly -- "; 
    dockerimage:beside   "docker image [and command] to run:" -> @string="'$DOCKERIMAGE'";
    dockeroptions:beside "[Additional custom options for \"docker run\":]" ->  @string="'$DOCKEROPTIONS'" ;
  
  choose_xserver -> xserverbla xservercombo wm gpu;
    xserverbla:beside "Choose X server to use" -> @fill xinfobutton xdependenciesbutton ;
    xservercombo -> s/(:.*$)/ / @combo(
        ": Automatically choose X server (regards option --wm)",
        "--xpra: Show container application windows on your main desktop",
        "--xephyr: Show container desktop in a window on your main desktop",
        "--xpra-xwayland: Like --xpra, using Xwayland",
        "--weston-xwayland: Like --xephyr, Weston window using Xwayland",
        "--hostdisplay: Share host X display (quite bad container isolation!)",
        "--xorg: Core Xorg server. (Switch with <CTRL><ALT><F1>...<F12>)",
        "--xwayland: Core Xwayland",
        "--hostwayland: Share host wayland display without X",
        "--weston: Wayland in Weston without X"
      );
    gpu "--gpu: Hardware acceleration for OpenGL (degrades container isolation)"             ->  "--gpu " | '$GPU' "";
    wm :beside "--wm: Host window manager to use"   ->  "--wm=\"" @combow('$HOSTWM') "\" " | ! "" ;
        
    sizefullscreen "Choose screen size for Xephyr, Weston, KWin or Xdummy" -> sizefullscreenline ;
      sizefullscreenline:beside -> size fullscreen resizeable;
      size:beside "--size: "                   -> "--size \"" @string="'$SCREENSIZE'" "\" "| !"" ;
      fullscreen  "--fullscreen "              -> "--fullscreen " | ! "" ;
      resizeable  "--resizeable (Xephyr only)" -> "--resizeable " | ! "" ;
      
  options_all "Options" -> choose_options choose_options_advanced develdialog;
    
    choose_options -> hostuser sudouser home clipboard pulseaudio;
      hostuser         "--hostuser: Create container user \'$USER'\ similar to \n 
                        your host user (same name, user id and group id) \n 
                        (a docker image command must be given)\n
                        Recommended for all use cases to improve security. "->  " --hostuser " | '$HOSTUSER' "";
      sudouser         "--sudouser: Like --hostuser, but member of group sudo \n (Allows all commands using sudo without a password)" -> " --sudouser " | '$SUDOUSER' "";
      home             "--home: Share a host folder in /home/'$USER'/x11docker \n as /home/'$USER' in container." -> "--home " | '$HOMEFOLDER' "";  
      clipboard        "--clipboard: Enable clipboard sharing (best with xpra)" -> "--clipboard " | '$CLIPBOARD' "";
      pulseaudio       "--pulseaudio: Sound with pulseaudio \n (needs pulseaudio on host and in image to be installed)" -> "--pulseaudio " | '$PULSEAUDIO' "";
      
    choose_options_advanced -> text_advanced verbose dbus waylandenv nopwd sudo;
      text_advanced:beside    "Advanced options " -> "" develdialog;
      verbose "--verbose: Be verbose (terminal output of logfiles)"       -> "--verbose " | '$VERBOSE' "";
      dbus    "--dbus: Use dbus-launch to run image command"              -> "--dbus " | ! "";
      nopwd   "--no-password: Do not ask for root password"               -> "--no-password " | '$NOPWD' "";
      waylandenv      "--waylandenv: Set wayland environment variables \n for toolkits GTK3 \ QT5 \ Clutter \ SDL \ Elementary \ Evas " -> "--waylandenv " | ! "" ; 
      sudo    "--sudo: Use sudo instead of su to run docker \n 
           (for systems without a root password like Ubuntu)"             -> "--sudo " | '$SUDO' "";
           
   security "Improving X authentication security" -> untrusted noxhost;
      noxhost   "--no-xhost: Disable any access to host X server permitted by xhost" -> "--no-xhost " | ! "" ;
      untrusted "--untrusted: Create untrusted cookies restricting X access. Can avoid \n rendering issues with --hostdisplay and --kwin-native (MIT-SHM errors)." -> "--untrusted " | ! "" ;
    
 develdialog:dialog "Developer options" -> developeroptions @close=" close";
  developeroptions:beside -> develleft develright;
   develleft:framed -> devxserver devenvironment @fill ;
   develright:framed ->  devsharehost devvtdisplay devauth devfiles devroot;
    devxserver " Special X servers and Wayland compositors" -> devxserverlist;
      devxserverlist -> devxauto | devxkwin | devxkwinxwayland | devxkwinnative | devxxdummy | devxnothing;
        devxauto "Auto choose X server from main dialog" -> "" ;
        devxxdummy "--xdummy: Invisible Xdummy server for custom access." -> "--xdummy ";
        devxkwin "--kwin: Like --weston, pure Wayland environment using \n kwin_wayland"    -> "--kwin ";
        devxkwinxwayland "--kwin-xwayland: Like --weston-xwayland using kwin_wayland"    -> "--kwin-xwayland " ;
        devxkwinnative "--kwin-native: Like --kwin-xwayland, but using built-in \n
                        seamless xwayland. Drawback: needs option --untrusted or \n
                        insecure option --ipc to avoid MIT-SHM errors." -> "--kwin-native " ;
        devxnothing "--nothing: Do not provide any X server or Wayland compositor"       -> "--nothing " ;
    devauth "X authentication" -> devxhost devnoauth ; 
      devxhost           "--xhost+ : Set \"xhost +\" on new X server. Every client can access new \n X server without restrictions. Testing purposes only." -> "--xhost+ " | ! "" ;
      devnoauth          "--no-auth: Disable cookie authentication on new X server. \n Testing purposes only." -> "--no-auth " | ! "" ;
    devenvironment "Environment" -> devshowenv setenvdialog devsharewayland;
      devshowenv         "--showenv: Show DISPLAY and XAUTHORITY on stdout, \n further WAYLAND_DISPLAY and other environment variables \n depending on options. For custom access to new X server." -> "--showenv " | ! "" ;
      devsharewayland    "--sharewayland: Share wayland socket and \$WAYLAND_DISPLAY\n (automatically done for --weston, --kwin and --hostwayland)" -> "--sharewayland " | ! "" ;
    devalpha "in development, unstable, or deprecated" -> devalsa;
      devalsa            "--alsa: enable ALSA sound (not working yet)" -> "--alsa " | ! "" ;
    devfiles "File operations" -> devcache devps;
      devps              "--ps: Keep created container" -> "--ps " | ! "" ;
      devcache           "--cache: Keep cache files in ~/.cache/x11docker" -> "--cache " | ! "";
    devvtdisplay "X display number and vt/tty" -> devvt devdisplay;
      devvt :beside      "--vt: virtual terminal/tty to use: " -> "--vt " @string="8" " " | ! "";
      devdisplay :beside "--display: display number to use: " -> "--display " @string="1000" " " | ! "";
    devsharehost "Share host resources" -> devipc devnet;
      devipc             "--ipc: Share host interprocess communication and shared memory. \n
                          Breaks container isolation! Allows MIT-SHM extension, thus avoiding \n 
                          rendering glitches and bad RAM access with --hostdisplay and --kwin-native." -> "--ipc " | ! "" ;
      devnet             "--net: Share host network stack including dbus. Breaks container isolation!" -> "--net " | ! "" ;
    devroot "root"       -> root;
      root               "--root: Allow root to run x11docker (discouraged)"          -> "--root " | ! "";
      
    setenvdialog:beside "--env: Set custom environment " -> envdialog | ! "" ;
      envdialog:dialog "Environment variables" -> envdialogwaylandinfo envXDG envGTK envQT envQTegl envClutter envSDL envElementary1 envElementary2 envEvas envdialogothers envKWin envCustom1 envCustom2 envCustom3 envCustom4 @close="close";
        envdialogwaylandinfo      "This environment variables summon toolkits to use Wayland instead of X11" -> "";
        envXDG:beside                       -> "--env=\""  @string="XDG_SESSION_TYPE=wayland"         "\" " | ! "" ;
        envGTK:beside         "GTK"         -> "--env=\""  @string="GDK_BACKEND=wayland"              "\" " | ! "" ;
        envQT:beside          "QT5"         -> "--env=\""  @string="QT_QPA_PLATFORM=wayland"          "\" " | ! "" ;
        envQTegl:beside       "QT5"         -> "--env=\""  @string="QT_QPA_PLATFORM=wayland-egl"      "\" " | ! "" ;
        envClutter:beside     "Clutter"     -> "--env=\""  @string="CLUTTER_BACKEND=wayland"          "\" " | ! "" ;
        envSDL:beside         "SDL"         -> "--env=\""  @string="SDL_VIDEODRIVER=wayland"          "\" " | ! "" ;
        envElementary1:beside "Elementary"  -> "--env=\""  @string="ELM_DISPLAY=wl"                   "\" " | ! "" ;
        envElementary2:beside "Elementary"  -> "--env=\""  @string="ELM_ACCEL=opengl"                 "\" " | ! "" ;
        envEvas:beside        "Ecore_Evas"  -> "--env=\""  @string="ECORE_EVAS_ENGINE=wayland_egl"    "\" " | ! "" ;
        envdialogothers:beside    "Other environment variable settings"  -> "";
        envKWin:beside        "KWin"        -> "--env=\""  @string="KWIN_COMPOSE=Q"                   "\" " | ! "" ;
        envCustom1:beside     "QT"          -> "--env=\""  @string="QT_X11_NO_MITSHM=1"               "\" " | ! "" ;
        envCustom2:beside     "Custom"      -> "--env=\""  @string=""                                 "\" " | ! "" ;
        envCustom3:beside     "Custom"      -> "--env=\""  @string=""                                 "\" " | ! "" ;
        envCustom4:beside     "Custom"      -> "--env=\""  @string=""                                 "\" " | ! "" ;
    
  xinfobutton:dialog "X server info" -> xinfo @close=" close";
    xinfo:beside -> xinfo_option xinfotext xinfo_gpu;
      xinfo_option -> xinfo_option_title        xinfo_option_auto 
                      xinfo_option_xpra         xinfo_option_xephyr 
                      xinfo_option_xpraxwayland xinfo_option_westonxwayland 
                      xinfo_option_hostdisplay  xinfo_option_xorg 
                      xinfo_option_xwayland     xinfo_option_xdummy
                      xinfo_option_wayland      xinfo_option_kwin 
                      xinfo_option_weston ;
        xinfo_option_title ->           @text(" X server");
        xinfo_option_auto ->            @text(" --auto\n
                                          \n");
        xinfo_option_xpra ->            @text(" --xpra\n");
        xinfo_option_xephyr ->          @text(" --xephyr\n
                                          \n
                                          \n");
        xinfo_option_xorg ->            @text(" --xorg\n
                                          \n");
        xinfo_option_hostdisplay ->     @text(" --hostdisplay\n
                                          \n
                                          \n
                                          \n");
        xinfo_option_xpraxwayland ->    @text(" --xpra-xwayland\n");
        xinfo_option_westonxwayland ->  @text(" --weston-xwayland\n
                                          \n");
        xinfo_option_xwayland ->        @text(" --xwayland\n");
        xinfo_option_xdummy ->          @text(" --xdummy\n");
        xinfo_option_weston ->          @text(" --weston\n");
        xinfo_option_kwin ->            @text(" --kwin\n");
        xinfo_option_wayland ->         @text(" --hostwayland\n");
      xinfotext -> xinfo_title        xinfo_auto 
                   xinfo_xpra         xinfo_xephyr 
                   xinfo_xpraxwayland xinfo_westonxwayland 
                   xinfo_hostdisplay  xinfo_xorg 
                   xinfo_xwayland     xinfo_xdummy
                   xinfo_wayland      xinfo_kwin
                   xinfo_weston ;
        xinfo_title ->          @text(" ");
        xinfo_auto ->           @text(" Chooses between --xpra, --xephyr, --weston-xwayland. --xorg and --hostdisplay, depending on installed \n
                                        dependencies and whether --desktop is given or not. Searches itself for a window manager if needed.\n");
        xinfo_xpra ->           @text(" Recommended to run single applications. Application windows appear on host display.\n");
        xinfo_xephyr ->         @text(" Recommended to run desktop environments. Desktop appears in a window on host display. \n
                                        Along with option --wm usefull for single applications, too. Low overhead.\n
                                        GPU acceleration with --gpu is possible, but not very effective.");
        xinfo_xorg ->           @text(" Core X server. Switch between displays with keys [CTRL][ALT][F1]...[F12].\n
                                        Runs ootb from console. To run from within X see button [Dependencies] for setup.\n");
        xinfo_hostdisplay ->    @text(" Share host display :0 instead of running second X server. Attention: Low security, quite bad container isolation!\n
                                        Please look at button [Security info]. Use with trusted images and option --hostuser only. Least overhead. \n
                                        Rendering issues are possible due to missing MIT-SHM and can be fixed with option --untrusted. \n 
                                        Otherwise, and for use of option --gpu, you can avoid rendering issues with isolation breaking option --ipc. \n");
        xinfo_xpraxwayland ->   @text(" Like --xpra, uses Xwayland in background.");
        xinfo_westonxwayland -> @text(" Like --xephyr, Weston with Xwayland. \n
                                        Can run on X or Wayland in a window, can also run on its own from tty / console.");
        xinfo_xwayland ->       @text(" Xwayland needs a Wayland environment to run in. Appearing fullscreen display can be moved around.\n");
        xinfo_xdummy ->         @text(" Invisible X server for custom access. Output of environment variables on stdout. \n");
        xinfo_weston ->         @text(" Weston without X to run pure Wayland applications. Runs in X, in Wayland or from console");
        xinfo_kwin ->           @text(" KWin_wayland without X to run pure Wayland applications. Runs in X, in Wayland or from console");
        xinfo_wayland ->        @text(" Shares host wayland socket without X to run pure Wayland applications. Needs a running Wayland compositor.");
      xinfo_gpu ->    xinfo_gpu_title        xinfo_gpu_auto 
                      xinfo_gpu_xpra         xinfo_gpu_xephyr 
                      xinfo_gpu_xpraxwayland xinfo_gpu_westonxwayland 
                      xinfo_gpu_hostdisplay  xinfo_gpu_xorg 
                      xinfo_gpu_xwayland     xinfo_gpu_xdummy
                      xinfo_gpu_wayland      xinfo_gpu_kwin
                      xinfo_gpu_weston ;
        xinfo_gpu_title ->           @text(" --gpu ");
        xinfo_gpu_auto ->            @text("\n
                                          \n");
        xinfo_gpu_xpra ->            @text(" no\n");
        xinfo_gpu_xephyr ->          @text(" (yes)\n
                                          \n
                                          \n");
        xinfo_gpu_xorg ->            @text(" yes\n
                                          \n");
        xinfo_gpu_hostdisplay ->     @text(" (yes)\n
                                          \n
                                          \n
                                          \n");
        xinfo_gpu_xpraxwayland ->    @text(" yes\n");
        xinfo_gpu_westonxwayland ->  @text(" yes\n
                                          \n");
        xinfo_gpu_xwayland ->        @text(" yes\n");
        xinfo_gpu_xdummy ->          @text(" no\n");
        xinfo_gpu_weston ->          @text(" yes\n");
        xinfo_gpu_kwin ->            @text(" yes\n");
        xinfo_gpu_wayland ->         @text(" yes\n");
         
  xdependenciesbutton:dialog "Dependencies" -> xdependencies xdependencies2 @close=" close";
    xdependencies:beside -> xdep_option xdep_host xdep_xrunning ;
      xdep_option -> xdep_option_title  
                     xdep_option_xpra         xdep_option_xephyr 
                     xdep_option_xpraxwayland xdep_option_westonxwayland
                     xdep_option_hostdisplay  xdep_option_xorg
                     xdep_option_xwayland     xdep_option_xdummy
                     xdep_option_wayland      xdep_option_kwin
                     xdep_option_weston ;
        xdep_option_title ->          @text(" X server");
        xdep_option_xpra ->           @text(" --xpra");
        xdep_option_xephyr ->         @text(" --xephyr");
        xdep_option_xorg ->           @text(" --xorg");
        xdep_option_hostdisplay ->    @text(" --hostdisplay");
        xdep_option_xpraxwayland ->   @text(" --xpra-xwayland");
        xdep_option_westonxwayland -> @text(" --weston-xwayland");
        xdep_option_xwayland ->       @text(" --xwayland");
        xdep_option_xdummy ->         @text(" --xdummy");
        xdep_option_weston ->         @text(" --weston");
        xdep_option_kwin ->           @text(" --kwin");
        xdep_option_wayland ->        @text(" --hostwayland");
      xdep_host -> xdep_host_title  
                   xdep_host_xpra         xdep_host_xephyr
                   xdep_host_xpraxwayland xdep_host_westonxwayland
                   xdep_host_hostdisplay  xdep_host_xorg
                   xdep_host_xwayland     xdep_host_xdummy
                   xdep_host_wayland      xdep_host_kwin
                   xdep_host_weston ;
        xdep_host_title ->          @text(" Dependencies on host");
        xdep_host_xpra ->           @text(" xpra");
        xdep_host_xephyr ->         @text(" xserver-xephyr");
        xdep_host_xorg:beside ->    @text(" - \ [ xerver-xorg-legacy ]") xdep_xorg_setupdialog;
        xdep_host_hostdisplay ->    @text(" -");
        xdep_host_xpraxwayland ->   @text(" xwayland \ xpra \ [on X also: \ weston \ xdotool ]");
        xdep_host_westonxwayland -> @text(" xwayland \ weston");
        xdep_host_xwayland ->       @text(" xwayland");
        xdep_host_xdummy ->         @text(" xserver-xorg-core \ xserver-xorg-video-dummy");
        xdep_host_weston ->         @text(" weston");
        xdep_host_kwin ->           @text(" kwin");
        xdep_host_wayland ->        @text(" -");
      xdep_xrunning -> xdep_xrun_title  
                       xdep_xrun_xpra         xdep_xrun_xephyr
                       xdep_xrun_xpraxwayland xdep_xrun_westonxwayland
                       xdep_xrun_hostdisplay  xdep_xrun_xorg
                       xdep_xrun_xwayland     xdep_xrun_xdummy
                       xdep_xrun_wayland      xdep_xrun_kwin
                       xdep_xrun_weston ;
        xdep_xrun_title ->          @text(" Needs running X or Wayland on host");
        xdep_xrun_xpra ->           @text(" X \ (or Xwayland on Wayland)");
        xdep_xrun_xephyr ->         @text(" X \ (or Xwayland on Wayland)");
        xdep_xrun_xorg ->           @text(" -");
        xdep_xrun_hostdisplay ->    @text(" X \ (or Xwayland on Wayland)");
        xdep_xrun_xpraxwayland ->   @text(" X \ (or Xwayland on Wayland)");
        xdep_xrun_westonxwayland -> @text(" -");
        xdep_xrun_xwayland ->       @text(" Wayland");
        xdep_xrun_xdummy ->         @text(" -");
        xdep_xrun_weston ->         @text(" -");
        xdep_xrun_kwin ->           @text(" -");
        xdep_xrun_wayland ->        @text(" Wayland");
    xdependencies2 -> xdep_other xdep_gpu xdep_xclip xdep_pulseaudio xdep_dbus ;
      xdep_other             -> @text(" Other dependencies");
      xdep_xclip:beside      -> @text("--clipboard")  @text("Needs package xclip on host (except for options --xpra and --xpra-xwayland).") ; 
      xdep_pulseaudio:beside -> @text("--pulseaudio") @text("Needs package pulseaudio on host AND in image.") ;
      xdep_dbus:beside       -> @text("--dbus")       @text("Needs package dbus-x11 in image.") ;
      xdep_gpu:beside        -> @text("--gpu")        @text("Needs OpenGL dependencies to be installed in image. These are some or all of\n
                                                             libgl1-mesa-glx  libglew2.0 libglu1-mesa libgl1-mesa-dri libxv1 libdrm2 libgles2-mesa libegl1-mesa\n
                                                             Media players like VLC may also need libxv1.");
    xdep_xorg_setupdialog:dialog "Setup" -> @text(" Option --xorg can be used out of the box on console tty1...tty6. \n
                                                   \n
                                                   To run a second Xorg server from within an already running X session, \n
                                                   you have to edit file /etc/X11/Xwrapper.conf and replace line:\n
                                                   \n
                                                   \ \ allowed_users=console \n
                                                   \n
                                                   with lines:\n
                                                   \n
                                                   \ \ allowed_users=anybody \n
                                                   \ \ needs_root_rights=yes \n
                                                   \n
                                                   On debian 9 and Ubuntu 16.04 you need to install package xserver-xorg-legacy.
                                                   ") @close=" close";

  help:dialog "Help" -> @text(
  " x11docker allows you to run GUI applications and desktop environments from inside of docker images. \n
    Its main purpose is to preserve container isolation while avoiding some X security leaks. \n
    Core concept is to run a segregated second X server with its own authentication cookies. \n
    \n
    Depending on chosen options, you can have high or low container isolation. \n
    Look at button [Security info] to see the differences. \n
    \n
    With most recommended options --xpra, --xephyr, --xpra-xwayland and weston-xwayland, \n
    the dockered applications will appear on your already running X display. \n
    You can also choose discouraged option --hostdisplay for this to have least overhead, \n
    but then you have least container isolation, too. \n
    \n
    On systems without a root password like Ubuntu or Sparky, use option --sudo.\n
    \n
    For troubleshooting, activate option --verbose and use \"Run in xterm\" (or run x11docker-gui in a terminal).\n
    Options --hostdisplay and --kwin-native can have rendering issues and RAM access errors. This can be avoided \n
    with either option --untrusted or option --ipc. Regard security infos about this options.\n
    \n
    Wayland: \n
    To test Wayland applications without an X environment, you can use options --weston and --hostwayland.\n
    QT5 applications often (always?) need options --dbus and --waylandenv.\n 
    \n
    x11docker and x11docker-gui are published under MIT licence. \n
    Have a look at github: https://github.com/mviereck/x11docker\n
    Some example docker images can be found at https://hub.docker.com/u/x11docker
    ") @close=" close";
    
    security_dialog:dialog " Security info " -> sec_info sec_degrading sec_hostdisplay sec_gpu sec_pulseaudio sec_ipc sec_net sec_improving sec_hostuser sec_untrusted sec_noxhost @close=" close";
      sec_info -> @text(" Main goal of x11docker is to allow running GUI applications in docker on X11 or Wayland while preserving container isolation. \n
                               Most important part is to avoid common X security leaks. \n
                               This is given for alle provided X servers (and Wayland compositors) except option --hostdisplay (see below).\n
                               Core concept is to run a segregated second X server with its own authentication cookies.
                               ") ;
      sec_degrading -> @text("\n Options degrading container isolation:");
      sec_gpu:beside -> sec_gpu_opt sec_gpu_text;
        sec_gpu_opt  -> @text(" --gpu ");
        sec_gpu_text -> @text(" Option --gpu allows hardware acceleration for docker OpenGL applications. Access to GPU hardware can allow rootkits. \n
                                     Example rootkit: https://github.com/x0r1/jellyfish\n
                                     Although there is little known of real attacks, you should be aware of this. This risk affects X servers and Wayland compositors as well.");
      sec_hostdisplay:beside  -> sec_hostdisplay_opt sec_hostdisplay_text;
        sec_hostdisplay_opt   -> @text(" --hostdisplay ");
        sec_hostdisplay_text  -> @text(" Quite bad container isolation, but least overhead of all X server options.\n
                                              Instead of creating a new segregated X server to avoid X security leaks, option --hostdisplay shares your host X server with container. \n
                                              Keylogging and other attacks are an easy task, it is enough to run xenv or xinput and send its output to internet.\n
                                              Also, container applications can get control over host applications. \n
                                              Use along with option --hostuser to reduce risks. Consider to use option --untrusted, too. Use with trusted images only.\n
                                              If you do not care about container isolation at all, get a quite fast setup with \"x11docker --hostdisplay --ipc --gpu IMAGENAME\"");
        sec_pulseaudio:beside -> sec_pulseaudio_opt sec_pulseaudio_text;
          sec_pulseaudio_opt  -> @text(" --pulseaudio ");
          sec_pulseaudio_text -> @text(" With pulseaudio enabled, container applications can get your audio output and also can hear everything you say if your computer\n
                                              has microphones.");
        sec_ipc:beside -> sec_ipc_opt sec_ipc_text;
          sec_ipc_opt         -> @text(" --ipc ");
          sec_ipc_text        -> @text("Isolation breakdown, use with care! Shares host interprocess communication and shared memory. Allows MIT-SHM extension.");
        sec_net:beside -> sec_net_opt sec_net_text @fill @fill;
          sec_net_opt         -> @text(" --net ");
          sec_net_text        -> @text("Isolation breakdown, use with care! Shares host network stack. Allows dbus communication.");
      sec_improving -> @text("\n Options improving container isolation:");
        sec_hostuser:beside -> sec_hostuser_opt sec_hostuser_text;
          sec_hostuser_opt  -> @text(" --hostuser ");
          sec_hostuser_text -> @text("Always recommended! Working as unprivileged user in container avoids root permissions if an application breaks out of container.");
        sec_noxhost:beside -> sec_noxhost_opt sec_noxhost_text;
          sec_noxhost_opt  -> @text(" --no-xhost ");
          sec_noxhost_text -> @text("Disables all network access to host X display possibly permitted by xhost. Host applications are forced to use ~./Xauthority instead");
        sec_untrusted:beside -> sec_untrusted_opt sec_untrusted_text;
          sec_untrusted_opt  -> @text(" --untrusted ");
          sec_untrusted_text -> @text("Creates untrusted cookies to restrict access to X resources. Recommended for option --hostdisplay. Some applications may misbehave.\n");
                       
  MIT:dialog "MIT license" -> @text(
               " MIT License\n
                 \n
                 Copyright (c) 2015,2016 Martin Viereck\n
                 \n
                 Permission is hereby granted, free of charge, to any person obtaining a copy\n
                 of this software and associated documentation files (the \"Software\"), to deal\n
                 in the Software without restriction, including without limitation the rights\n
                 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n
                 copies of the Software, and to permit persons to whom the Software is\n
                 furnished to do so, subject to the following conditions:\n
                 \n
                 The above copyright notice and this permission notice shall be included in all\n
                 copies or substantial portions of the Software.\n
                 \n
                 THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n
                 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n
                 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n
                 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n
                 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n
                 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n
                 SOFTWARE.") @close="close";

x11docker_options -> choose_xserver security sizefullscreen choose_options choose_options_advanced imageorexe "\"" dockeroptions " \" "  "\""dockerimage "\"" ;
x11docker -> "'$X11DOCKER' " x11docker_options;

buttons :horizontal ->  run runxterm preview desktop_starter orphanedcheck MIT help @close="Cancel";
  run -> @fork(x11docker)=" Run";
  preview -> @preview(x11docker,"monospace",900)="Preview command" ;
  desktop_starter -> @dump("xterm -e '\''","'$X11DOCKER' --starter ",x11docker_options,"'\''")="Create desktop starter";
  orphanedcheck -> @dump("xterm -hold -e '"'"''$X11DOCKER' ",sudo,nopwd,root," --orphaned '"'"'")="Check orphaned";
  runxterm -> @dump("xterm -hold -e '"'"'",x11docker,"'"'"'")="Run in xterm";
'


# base64 coded image
echo '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' | base64 -d >  $x11docker_logo
[ "$1" = "--icon" ] && echo $x11docker_logo && exit   # option --icon: only create icon file and exit. used by installer


x11docker_command="$(echo $kaptain_script | kaptain /dev/stdin 2>/dev/null)"
rm $x11docker_logo
echo $x11docker_command
eval $x11docker_command

