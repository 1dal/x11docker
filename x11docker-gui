#! /bin/bash
#########################################
## GUI for x11docker
## MIT licence 2016, Martin Viereck
## Uses 'kaptain' to provide a GUI
# https://github.com/mviereck/x11docker
#########################################
#
# option -d shows some developer options


if test ! `command -v kaptain` ; then
  echo "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again." >&2
  xmessage "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again."
  exit 1
fi

X11DOCKER="./x11docker"
if test ! `command -v $X11DOCKER` ; then X11DOCKER="x11docker" ; fi
if test ! `command -v $X11DOCKER` ; then
  echo "Error: did not find executeable 'x11docker', neither in \$PATH. nor as
 executeable ./x11docker.
 Please make x11docker available (for example in /usr/local/bin) and try again." >&2
  xmessage "Error: did not find executeable 'x11docker', neither in \$PATH. nor as
  executeable ./x11docker.
  Please make x11docker available (for example in /usr/local/bin) and try again."
  exit 1
fi


if [ "$1" = "-d" ] ; then DEVELOPEROPTIONS="developeroptions" ; fi  # option -d shows developer options

#####################
# Preset some options you may want to be set as default
#
DOCKERIMAGE=""              # docker image [+ command]
DOCKEROPTIONS=""            # additional docker options
WM="openbox"                # host window manager
XEPHYRSCREENSIZE="800x600"

# Checkboxes: "!" disables option, "" enables it
HOSTUSER="!"
SUDOUSER="!"
HOMEFOLDER="!"
CLIPBOARD="!"
PULSEAUDIO="!"
VIRTUALGL="!"
GPU="!"
VERBOSE="!"
NOXHOST="!"
IPC="!"
SUDO="!"
XEPHYRFULLSCREEN="!"

# other way around: "!" enables option, "" disables it
X11=""
XEPHYR=""
HOSTDISPLAY=""
DESKTOP=""


# base64 coded image
x11docker_logo="/tmp/x11docker_logo.jpg"
echo '/9j/4AAQSkZJRgABAQAAAQABAAD//gA7Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2NjIpLCBxdWFsaXR5ID0gOTAK/9sAQwADAgIDAgIDAwMDBAMDBAUIBQUEBAUKBwcGCAwK
DAwLCgsLDQ4SEA0OEQ4LCxAWEBETFBUVFQwPFxgWFBgSFBUU/9sAQwEDBAQFBAUJBQUJFA0LDRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU/8AAEQgAUABQ
AwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkq
NDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/E
AB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVG
R0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A
/VH8aX8aT8K+KP24/wBnPxx4q8aaB458HfEbxX4W0TP2bxFpek65PbIUVCYpoF8wRo7ELE2cDLox6MTrSpyrVI047t2JlJQi5PofbH40nPrX4nReNI/F174mnj+K3xU8FjwkynWdLPi+bURLC0qQiaK4
V8AK7rvGG4+7mvrv/gnD+2fZfEi71f4Q6/4km8Q65oskraDr2oM3nazYqT98ty00Y5OeWTn+FjXbisBUwsVObTTdtH28t/Iyp1o1HZJn3v8AjR+NJ+FH4V5puHPrS/jSfhXzX+3V+19pv7J3wplvLdob
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' | base64 -d >  $x11docker_logo

kaptain_script='
start "x11docker GUI" -> options buttons;
  options:beside -> frameleft frameright '$DEVELOPEROPTIONS';
    frameleft:framed -> choose_image choose_X choose_wmordesktop;
    frameright:framed -> choose_options choose_options_advanced;

  developeroptions:framed -> devel useless_options;
  devel " Developer options. Use with care." -> devxortcp devsharegpu devxhost devprivileged devpid devnet devuts devalsa;
    devalsa "--alsa: enable ALSA sound (alpha)" -> "--alsa " | ! "" ;
    devxortcp -> devxsocket | devtcp | devtcpxsocket ;
      devxsocket "--xsocket: Use shared X socket" -> "--xsocket " ;
      devtcp "--tcp: Connect to X over tcp" -> "--tcp ";
      devtcpxsocket "--tcpxsocket: share new X socket, \n but use tcp (dont use with --gpu)" -> "--tcpxsocket ";
    devxhost "--xhost: set xhost + on both X servers" -> "--xhost " | ! "" ;
    devsharegpu "--sharegpu: share devices in /dev/dri" -> "--sharegpu " | ! "";
    devprivileged "--privileged: docker run --privileged" -> "--privileged " | ! "";
    devpid "--pid: docker run --pid=host" -> "--pid " | ! "";
    devnet "--net: docker run --net=host" -> "--net " | ! "";
    devuts "--uts: docker run --uts=host" -> "--uts " | ! "";
  useless_options "Less usefull options" -> log LOG ps cache cidfile command;

  choose_image "Run GUI applications in docker images" -> logo_imageorexe dockeroptions dockerimage ;
    logo_imageorexe:beside  -> @icon("'$x11docker_logo'") imageorexe ;
      imageorexe -> image | exe | xonly;
        image:beside "Run docker image in another X server" -> " " security_dialog;
        exe "Start host application in another X server" -> "exe ";
        xonly "Only create new empty X server" -> " # "; 
    dockerimage  :beside -> @text("docker image [and command] to run:") @string="'$DOCKERIMAGE'";
    dockeroptions :beside -> @text("Additional options for docker (use long form --opt=\"\"): ") @string="'$DOCKEROPTIONS'" " ";
      
    choose_X:framed "X server to use" -> autochoose | xpra | '$XEPHYR' xephyr | '$X11' X11 | '$HOSTDISPLAY' hostdisplay;
      autochoose"-x: Auto choose X server to use (regards option --wm or --desktop)" -> "-x " ;
      xpra "--xpra: Show container application windows on your main desktop" -> "--xpra ";
      xephyr "--xephyr: Show container desktop in a window on your main desktop" -> "--xephyr " xephyrspecials;
        xephyrspecials ->  xephyrfullscreen  xephyrresizeable xephyrsize xephyrglamor;
          xephyrfullscreen "--fullscreen: Run Xephyr in fullscreen mode" -> " --fullscreen " | '$XEPHYRFULLSCREEN' "";
          xephyrresizeable "--resizeable: Make Xephyr window resizeable" -> "--resizeable " | ! "";
          xephyrsize :beside "--size: Preset Xephyr window size: " -> "--size \"" @string="'$XEPHYRSCREENSIZE'" "\" " | ! "";
          xephyrglamor "--glamor: Enable glamor 2D acceleration" -> "--glamor " | ! "";
      X11 "--X11: Use core X server. (Switch with <CTRL><ALT><F7>...<F12>)" -> "--X11 ";
      hostdisplay "--hostdisplay: Use host display without container isolation" -> "--hostdisplay ";

   choose_wmordesktop "Choose window manager (options --xpra and --hostdisplay will ignore this)" -> wm | '$DESKTOP' desktop;
      wm :beside "--wm: Host window manager to use" ->  "--wm \"" @string="'$WM'" "\" ";
      desktop "--desktop: Image contains its own window manager" -> "--desktop ";  
      
    choose_options "Options" -> hostuser sudouser home clipboard pulseaudio virtualgl gpu;
      hostuser "--hostuser: Create container user \"'$USER'\" similar to \n your host user (same name, user id and group id) \n (a docker image command must be given)"->  " --hostuser " | '$HOSTUSER' "";
      sudouser "--sudouser: Like --hostuser, but member of group sudo \n (Allows all commands using sudo without a password)" -> " --sudouser " | '$SUDOUSER' "";
      home "--home: Share a host folder in '$HOME'/x11docker \n as /home/'$USER' in container." -> "--home " | '$HOMEFOLDER' "";  
      clipboard "--clipboard: Enable clipboard sharing (best with xpra)" -> "--clipboard " | '$CLIPBOARD' "";
      pulseaudio "--pulseaudio: Sound with pulseaudio \n (needs pulseaudio on host and in image to be installed)" -> "--pulseaudio " | '$PULSEAUDIO' "";
      virtualgl:beside "--virtualgl: Mediate GPU acceleration" -> "--virtualgl " | '$VIRTUALGL' "";
      gpu:beside "--gpu: Immediate GPU acceleration" -> "--gpu " | '$GPU' "" gpu_info;
      
    choose_options_advanced "Advanced options" -> verbose noxhost ipc root sudo;
      verbose "--verbose: Be verbose (terminal output of logfiles)" -> "--verbose " | '$VERBOSE' "";
      log "--log: Show logfiles in a window" -> "--log " | ! "";
      LOG "--LOG: like --log, but in new X server" -> "--LOG " | ! "";
      cache "--cache: Keep cache files in \n  ~/.cache/x11docker" -> "--cache " | ! "";
      ipc "--ipc: Share host interprocess communication and shared \n 
           memory. Use with option --hostuser only to minmize risks. \n
           Caution: breaks down container isolation. \n 
           Can speed up option --gpu and avoids rendering glitches \n 
           with option --hostdisplay. (Allows X extension MIT-SHM)" -> "--ipc " | '$IPC' "";
      ps "--ps: Keep created container" -> "--ps " | ! "" ;
      command "--command: Show created docker\n command and exit." -> "--command " | ! "";
      cidfile "--cid: Show file name \n containg container ID" -> "--cid " | ! "";
      noxhost "--no-xhost: Disable any access to host X server \n possibly permitted by xhost" -> "--no-xhost " | ! "" ;
      root "--root: Allow root to run x11docker (discouraged)" -> "--root " | ! "";
      sudo "--sudo: Use sudo instead of su to run docker \n (for systems without a root password like Ubuntu)" -> "--sudo " | '$SUDO' "";
      
  help:dialog "Help" -> @text(
  " x11docker allows you to run GUI applications and desktop environments from inside of docker images. \n
    Its main purpose is to preserve container isolation. This is tricky due to some X security leaks. \n
    x11docker can run a second X server to segregate docker applications from host applications. \n
    Depending on chosen options, you can have high or low container isolation. \n
    Look at \"Security table\" to see the differences. \n
    Hardware acceleration and pulseaudio sound are supported, too. \n
    \n
    Dependencies: \n
    Depending on chosen options, x11docker needs some additional packages to be installed on host. \n
    It will check for them on startup and show terminal messages if some are missing. \n
    List of possibly needed packages on host:  xpra  xserver-xephyr  xclip  pulseaudio  virtualgl\n 
    For option --pulseaudio, package pulseaudio needs to be installed in image, too. \n
    Hardware acceleration can have dependencies in image, too. Look at \"GPU acceleration info\".\n
    \n
    If using xpra or Xephyr, the dockered applications will appear on your already running X display. \n
    Docker applications will be segregated from your host display, and it is comfortable and secure to use. \n
    You can also choose option --hostdisplay for this to have least dependencies and least overhead, \n
    but then you have least container isolation, too. \n
    \n
    If using core X server, first run <dpkg-reconfigure x11-common> and choose option <anybody>. \n
    Otherwise you are not allowed to start a new core X server from within an already running X.\n
    You can switch between displays using <CTRL><ALT><F7>...<F12>.\n
    \n
    If neither xpra nor Xephyr are installed, and x11-common is not reconfigured, \n
    only less secure option --hostdisplay will work out of the box.\n
    \n
    On systems without a root password like Ubuntu or Sparky, use option --sudo.\n
    \n
    For troubleshooting, acivate option --verbose and run x11docker-gui in a terminal.\n
    To see all options and more informations, run <x11docker --help>.\n
    \n
    x11docker and x11docker-gui are published under MIT licence. \n
    Have a look at github: https://github.com/mviereck/x11docker\n
    Some example docker images can be found at https://hub.docker.com/u/x11docker
    ") @close=" close";
    
  gpu_info:dialog "GPU acceleration info" -> @text(
        " Software accelerated OpenGL is available in all provided X servers. \n
          The image needs an OpenGL implementation to be able to use it. \n
          The easiest way to achieve this is to install package mesa-utils in docker image. \n
          Some applications need packages x11-utils and libxv1 to be installed in image, too. \n
          \n
          Hardware acceleration with option --gpu is fast and quite secure if used with option --X11. \n
          It can get a speed-up with insecure option --ipc to make MIT-SHM / shared memory possible. \n 
          \n
          Option --gpu works with option --hostdisplay, too, but this option leaks container isolation. \n
          To avoid rendering glitches and to get a speed-up, insecure option --ipc can be used.\n
          \n
          Hardware accelerated OpenGL with option --virtualgl is slower than with option --gpu, \n
          but works with options --xpra and --xephyr, too. Leaks isolation from X server on display :0. \n
          Needs VirtualGL to be installed on host: http://www.virtualgl.org \n
          \n
          SECURITY: Using hardware acceleration with options --gpu or --virtualgl can degrade \n
          container isolation. Option --ipc breaks down container isolation. \n
          Look at button \"Security table\" to see the differences. \n
          \n
          To check if hardware acceleration is at work, you can run \"glxinfo | grep renderer\". \n
          The OpenGL renderer string should contain the name of your graphic card. \n
          If the OpenGL renderer string contains \"llvmpipe\", only software rendering is at work.\n
          \n
          Known to work with Intel and AMD onboard chips using open source drivers.\n
          Test reports with different setups are appreciated.
          ") @close=" close"; 
    
  security_dialog:dialog "Security table" -> security_table security_info security_gpuinfo security_ipcnet @close=" close";
    security_table:beside -> sec_server sec_soft sec_virtualgl sec_gpu;
      sec_server -> @text(" Table to show grade of container isolation \n
                       depending on chosen options\n
                       \n
                       --xpra         = xpra (uses Xdummy)\n
                       --xephyr       = Xephyr (nested X server)\n
                       --X11          = second core X server\n
                       --hostdisplay  = share host display :0 (\*\*) \n");
      sec_soft -> @text(" software \n
                       rendering \n
                       \n
                       +++++\n
                       +++++\n
                       +++++\n
                       +:0\n");
      sec_virtualgl -> @text(" --virtualgl \n
                       \n
                       \n
                       +:0\n
                       +:0\n
                       ++++\n
                       +:0\n");
      sec_gpu -> @text(" --gpu (\*)\n
                       \n
                       \n
                       -\n
                       -\n
                       ++++\n
                       +:0\n");
    security_info:beside -> sec_infograde sec_infotext;
      sec_infograde -> @text(" +++++\n
                       ++++\n
                       +:0\n
                       \n
                       \n
                       -");
      sec_infotext -> @text(" > High container isolation, secure to use. \n
                       > High container isolation, slightly degraded by container access to GPU. \n
                       > Low container isolation due to X security leaks, considered insecure. \n
                        Container gains access to X server on display :0 with host applications. \n 
                        For example, keylogging is possible. For use with trusted images only. \n
                       > Does not work + slightly insecure.");
    security_gpuinfo -> @text(" (\*) --gpu: To get additional speed-up, you can use isolation breaking option --ipc \n
                       to make shared memory with X server possible (MIT-SHM extension) \n
                       (\*\*) --hostdisplay works with shared host X socket and can have rendering glitches \n 
                       due to missing shared memory. These glitches can be avoided with option --ipc.");
    security_ipcnet:beside -> sec_ipcnetoptions sec_ipcnetinfo;
      sec_ipcnetoptions -> @text (" --ipc \n") ;
      sec_ipcnetinfo -> @text(" > Isolation breakdown. Use with option --hostuser only to minimize risks. \n
                       Container access to host interprocess communication and shared memory. \n");
                       
  MIT:dialog "MIT license" -> @text(
               " MIT License\n
                 \n
                 Copyright (c) 2015,2016 Martin Viereck\n
                 \n
                 Permission is hereby granted, free of charge, to any person obtaining a copy\n
                 of this software and associated documentation files (the \"Software\"), to deal\n
                 in the Software without restriction, including without limitation the rights\n
                 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n
                 copies of the Software, and to permit persons to whom the Software is\n
                 furnished to do so, subject to the following conditions:\n
                 \n
                 The above copyright notice and this permission notice shall be included in all\n
                 copies or substantial portions of the Software.\n
                 \n
                 THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n
                 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n
                 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n
                 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n
                 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n
                 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n
                 SOFTWARE.") @close="close";

x11docker_options -> choose_X choose_wmordesktop choose_options choose_options_advanced devel useless_options"--" choose_image;
x11docker -> "'$X11DOCKER' " x11docker_options;

buttons :horizontal ->  run preview desktop_starter orphanedcheck MIT help @close="Cancel";
  run -> @dump(x11docker)=" Run";
  preview -> @preview(x11docker,"monospace",900)="Preview command" ;
  desktop_starter -> @dump("xterm -e '\''","'$X11DOCKER' --starter ",x11docker_options,"'\''")="Create desktop starter";
  orphanedcheck -> @dump("xterm -hold -e '"'"''$X11DOCKER' ",sudo," --orphaned '"'"'")="Check orphaned";
'

x11docker_command=$(echo $kaptain_script | kaptain /dev/stdin 2>/dev/null)
rm $x11docker_logo
echo $x11docker_command
eval $x11docker_command

