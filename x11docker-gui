#! /bin/bash
#########################################
## GUI for x11docker
## MIT licence 2016, Martin Viereck
## Uses 'kaptain' to provide a GUI
# https://github.com/mviereck/x11docker
#########################################

error() {
  echo $1 >&2
  xmessage $1
  exit 1
}

[ -n "$(command -v kaptain)" ] || error "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again."

# Try to find x11docker
[ -n "$(echo $PATH | grep $(dirname $0) )" ] && X11DOCKER="x11docker"                          # if x11docker-gui is running in $PATH, x11docker will be there,too(I assume) 
[ -z "$X11DOCKER" ]                          && X11DOCKER="$PWD/x11docker"                     # otherwise, look in current directory
[ -e "$X11DOCKER" ] || error "Error: did not find x11docker, neither in \$PATH nor in current directory"
[ -z "$(command -v $X11DOCKER)" ]            && X11DOCKER="bash $PWD/x11docker"                # if not marked as executeable, run with bash

VERSION="$($X11DOCKER --version)"

#####################
# Preset some options you may want to be set as default
#
DOCKERIMAGE=""              # docker image [+ command]
DOCKEROPTIONS=""            # additional docker options
MYWM=""                     # host window manager
XEPHYRSCREENSIZE="800x600"

# Checkboxes: "!" disables option, "" enables it
HOSTUSER="!"
SUDOUSER="!"
HOMEFOLDER="!"
CLIPBOARD="!"
PULSEAUDIO="!"
VIRTUALGL="!"
GPU="!"
VERBOSE="!"
NOXHOST="!"
NOPWD="!"
IPC="!"
SUDO="!"
XEPHYRFULLSCREEN="!"

# other way around: "!" enables option, "" disables it
XORG=""
XEPHYR=""
HOSTDISPLAY=""
DESKTOP=""


# base64 coded image
x11docker_logo="/tmp/x11docker.png"
echo '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' | base64 -d >  $x11docker_logo

if [ "$1" = "--icon" ] ; then exit ; fi   # option --icon: only create icon file and exit. used by installer

# these window managers are known to work well with x11docker (alphabetical order)(excluding $Wm_not_recommended and $Wm_ugly):
Wm_good="amiwm blackbox cinnamon compiz ctwm enlightenment fluxbox flwm fvwm"
Wm_good="$Wm_good jwm kwin lxsession mate-session mate-wm marco metacity muffin mutter notion olwm olvwm openbox ororobus pekwm"
Wm_good="$Wm_good sawfish twm wmaker w9wm xfwm4"
# these wm's are recommended, lightweight AND desktop independent. best first:
Wm_recommended_desktop_light="flwm blackbox fluxbox jwm mwm wmaker afterstep amiwm fvwm ctwm pekwm olwm olvwm openbox" 
# these wm's are recommended, heavy AND desktop independent. best first:
Wm_recommended_desktop_heavy="mate-session lxsession enlightenment"
# these wm's are recommended and lightweight, but cannot show desktop options. best first:
Wm_recommended_nodesktop_light="sawfish xfwm4 metacity mutter"
# these wm's are recommended and heavy, but cannot show desktop options (especially exiting themselves). best first:
Wm_recommended_nodesktop_heavy="kwin compiz cinnamon gnome-shell"
# these wm's are not really useful (please don't hit me) (best first):
Wm_not_recommended="awesome evilwm herbstluftwm i3 lwm matchbox miwm spectrwm subtle windowlab wmii wm2"
# these wm's cannot be autodetected by wmctrl if they are already running
Wm_nodetect="aewm aewm++ afterstep awesome ctwm mwm miwm olwm olvwm sapphire windowlab wm2 w9wm"
# these wm's can cause problems (they can be beautiful, though):
Wm_ugly="icewm sapphire aewm aewm++"
# these wm's doesn't work:
Wm_bad="clfswm tinywm tritium"
# List of all working window managers, recommended first: (excluding $Wm_bad)
Wm_all="$Wm_recommended_desktop_light $Wm_recommended_nodesktop_light $Wm_recommended_desktop_heavy $Wm_recommended_nodesktop_heavy $Wm_good $Wm_ugly $Wm_not_recommended $Wm_nodetect"
for wm in $Wm_all ; do
  command -v $wm >/dev/null 2>&1 && [ -z "$(echo $HOSTWM | grep $wm)" ] && HOSTWM="$HOSTWM\"$wm\","
done
HOSTWM="$HOSTWM\"\""
[ $MYWM ] && HOSTWM="\"$MYWM\",$HOSTWM"


kaptain_script='
start "x11docker '$VERSION'" -> options buttons;
  options:beside -> frameleft frameright;
    frameleft:framed -> choose_image xserver choose_wmordesktop security;
    frameright:framed -> choose_options choose_options_advanced develdialog;

  choose_image "Run X11 GUI applications in docker images" -> logo_imageorexe dockeroptions  dockerimage  ;
    logo_imageorexe:beside  -> @icon("'$x11docker_logo'") imageorexe ;
      imageorexe -> image | exe | xonly;
        image:beside "Run docker image in another X server" -> "-- " security_dialog;
        exe "--exe: Start host application in another X server" -> "--exe -- ";
        xonly "--xonly: Only create new empty X server" -> "--xonly -- "; 
    dockerimage  :beside -> @text("docker image [and command] to run:") "\"" @string="'$DOCKERIMAGE'" "\"";
    dockeroptions :beside -> @text("Additional custom options for \"docker run\":") "\"" @string="'$DOCKEROPTIONS'" " \" ";
  
  xserver "X server to use" -> choose_X;
    choose_X -> autochoose | xpra | '$XEPHYR' xephyr | '$ORG' xorg | '$HOSTDISPLAY' hostdisplay ;
      autochoose:beside "--auto: Auto choose X server (regards --wm or --desktop)" -> "--auto " xserverbutton;
      xpra "--xpra: Show container application windows on your main desktop" -> "--xpra ";
      xephyr "--xephyr: Show container desktop in a window on your main desktop" -> "--xephyr " xephyrspecials;
        xephyrspecials ->  xephyrfullscreenandresizeable;
          xephyrfullscreenandresizeable :beside -> xephyrfullscreen xephyrresizeable xephyrsize;
            xephyrfullscreen "--fullscreen" -> " --fullscreen " | '$XEPHYRFULLSCREEN' "";
            xephyrresizeable "--resizeable" -> "--resizeable " | ! "";
          xephyrsize :beside "--size" -> "--size \"" @string="'$XEPHYRSCREENSIZE'" "\" " | ! "";
          xephyrglamor "--glamor: Enable glamor 2D acceleration" -> "--glamor " | ! "";
      xorg "--xorg: Use core Xorg server. (Switch with <CTRL><ALT><F7>...<F12>)" -> "--xorg ";
      hostdisplay "--hostdisplay: Use host display with degraded container isolation" -> "--hostdisplay ";
      xdummy "--xdummy: Invisible Xorg/Xdummy server on host" -> "--xdummy " ; 
      xpraimage "--xpra-image: xpra server in image, xpra client on host" -> "--xpra-image " ; 
      xorgimage "--xorg-image: Xorg/Xdummy server in image, xpra server+client on host" -> "--xorg-image " ; 
      xdummyimage "--xdummy-image: Invisible Xorg/Xdummy server in image" -> "--xdummy-image " ; 

   choose_wmordesktop "Choose window manager (--xpra and --hostdisplay will ignore this)" -> wm | '$DESKTOP' desktop;
      wm :beside "--wm: Host window manager to use" ->  "--wm=\"" @combow('$HOSTWM') "\" " ;
      desktop "--desktop: Image contains its own window manager" -> "--desktop ";  
      
   security "Improving authentication security" -> noxhost untrusted;
      noxhost "--no-xhost: Disable any access to host X server permitted by xhost" -> "--no-xhost " | ! "" ;
      untrusted "--untrusted: Create untrusted cookies restricting X access. Recommended \n for option --hostdisplay. Some applications will not work with this." -> "--untrusted " | ! "" ;
      
    choose_options "Options" -> hostuser sudouser home clipboard pulseaudio virtualgl gpu;
      hostuser "--hostuser: Create container user \'$USER'\ similar to \n your host user (same name, user id and group id) \n (a docker image command must be given)"->  " --hostuser " | '$HOSTUSER' "";
      sudouser "--sudouser: Like --hostuser, but member of group sudo \n (Allows all commands using sudo without a password)" -> " --sudouser " | '$SUDOUSER' "";
      home "--home: Share a host folder in /home/'$USER'/x11docker \n as /home/'$USER' in container." -> "--home " | '$HOMEFOLDER' "";  
      clipboard "--clipboard: Enable clipboard sharing (best with xpra)" -> "--clipboard " | '$CLIPBOARD' "";
      pulseaudio "--pulseaudio: Sound with pulseaudio \n (needs pulseaudio on host and in image to be installed)" -> "--pulseaudio " | '$PULSEAUDIO' "";
      virtualgl:beside "--virtualgl: Mediate GPU acceleration" -> "--virtualgl " | '$VIRTUALGL' "";
      gpu:beside "--gpu: Immediate GPU acceleration" -> "--gpu " | '$GPU' "" gpu_info;
      
    choose_options_advanced "Advanced options" -> verbose ipc root nopwd sudo;
      verbose "--verbose: Be verbose (terminal output of logfiles)" -> "--verbose " | '$VERBOSE' "";
      ipc "--ipc: Share host interprocess communication and shared \n 
           memory. Use with option --hostuser only to minmize risks. \n
           Caution: breaks down container isolation." -> "--ipc " | '$IPC' "";
      nopwd "--nopwd: Do not ask for root password" -> "--nopwd " | '$NOPWD' "";
      root "--root: Allow root to run x11docker (discouraged)" -> "--root " | ! "";
      sudo "--sudo: Use sudo instead of su to run docker \n (for systems without a root password like Ubuntu)" -> "--sudo " | '$SUDO' "";

 develdialog:dialog "Developer options" -> developeroptions @close=" close";
  developeroptions:beside -> develleft develright;
    develleft:framed -> devxserver devenvironment devvtdisplay;
    develright:framed -> devconnect devauth devfiles @fill;
    devxserver "X server to use" -> nochoose | xdummy | xpraimage | xorgimage | xdummyimage;
      nochoose " (keep choice of main dialog)" -> "" ;
    devauth "X authentication" -> devxhost devnoauth ; 
      devxhost "--xhost: Set \"xhost +\" on both X servers. \n Every client can access both X servers without restrictions. \n Security loss, testing purposes only!" -> "--xhost " | ! "" ;
      devnoauth "--no-auth: Disable cookie authentication on new X server. \n Security risk, testing purposes only." -> "--no-auth " | ! "" ;
    devconnect "Connection to new X server" -> devtcp ;
      devxsocket "--xsocket: Connect with shared X socket (default)" -> "--xsocket " | ! "";
      devtcp "--tcp: Connect to X over TCP (instead of sharing new X socket)" -> "--tcp " | ! "";
      devtcpxsocket "--tcpxsocket: Share new X socket, but connect over TCP" -> "--tcpxsocket " | ! "";
    devenvironment "X environment" -> devenv devdockerenv;
      devenv "--env: Show \$DISPLAY and \$XAUTHORITY on stdout, \n further \$XSOCKET pointing to new X socket \n and, if needed, \$XPRA_XSHM to disable MIT-SHM in xpra. \n For custom access to new X server." -> "--env " | ! "" ;
      devdockerenv "--dockerenv: Show docker run options to access new X server. \n Can be used to attach further containers to new X server." -> "--dockerenv " | ! "" ;
    devalpha "in development, unstable, or deprecated" -> devalsa;
      devalsa "--alsa: enable ALSA sound (not working yet)" -> "--alsa " | ! "" ;
    devfiles "file operations" -> devcache devps devsharegpu;
      devps "--ps: Keep created container" -> "--ps " | ! "" ;
      devcache "--cache: Keep cache files in ~/.cache/x11docker" -> "--cache " | ! "";
      devsharegpu "--sharegpu: share device files in /dev/dri" -> "--sharegpu " | ! "";
    devvtdisplay "Display number and vt/tty" -> devvt devdisplay;
      devvt :beside "--vt: virtual terminal/tty to use: " -> "--vt " @string="8" " " | ! "";
      devdisplay :beside "--display: display number to use: " -> "--display " @string="1000" " " | ! "";
    
  xserverbutton:dialog "X server info" -> xdependencies xexplanation @close=" close";
    xdependencies:beside -> xdepoption xcomment xdephost xdepimage;
      xdepoption -> xdepoptiontitle xdepoptionauto xdepoptionxpra xdepoptionxephyr xdepoptionxorg xdepoptionhostdisplay xdepoptionxdummy xdepoptionxpraimage xdepoptionxorgimage xdepoptionxdummyimage;
        xdepoptiontitle -> @text(" X server");
        xdepoptionauto -> @text("--auto\n
                          \n
                          \n");
        xdepoptionxpra -> @text("--xpra (*)\n
                          \n");
        xdepoptionxephyr -> @text("--xephyr\n
                          \n
                          \n");
        xdepoptionxorg -> @text("--xorg (**)\n
                          \n");
        xdepoptionhostdisplay -> @text("--hostdisplay\n
                          \n
                          \n
                          \n");
        xdepoptionxdummy -> @text("--xdummy (***)\n
                          \n");
        xdepoptionxpraimage -> @text(" --xpra-image (*)\n
                          \n");
        xdepoptionxorgimage -> @text(" --xorg-image (*)\n
                          \n");
        xdepoptionxdummyimage -> @text(" --xdummy-image (***)\n
                          \n");
      xdephost -> xdephosttitle xdephostauto xdephostxpra xdephostxephyr xdephostxorg xdephosthostdisplay xdephostxdummy xdephostxpraimage xdephostxorgimage xdephostxdummyimage;
        xdephosttitle -> @text(" Dependencies on host");
        xdephostauto -> @text(" (it depends ...)\n
                          \n
                          \n");
        xdephostxpra -> @text(" xpra\n
                          xorg\n");
        xdephostxephyr -> @text(" xserver-xephyr\n
                          xorg\n
                          \n");
        xdephostxorg -> @text("xorg\n
                          \n");
        xdephosthostdisplay -> @text(" xorg\n
                          \n
                          \n
                          \n");
        xdephostxdummy -> @text(" xserver-xorg-core\n
                          xserver-xorg-video-dummy\n");
        xdephostxpraimage -> @text(" xpra\n
                          xorg\n");
        xdephostxorgimage -> @text(" xpra\n
                          xorg\n");
        xdephostxdummyimage -> @text("-\n
                          ");
      xdepimage -> xdepimagetitle xdepimageauto xdepimagexpra xdepimagexephyr xdepimagexorg xdepimagehostdisplay xdepimagexdummy xdepimagexpraimage xdepimagexorgimage xdepimagexdummyimage;
        xdepimagetitle -> @text(" Dependencies in image");
        xdepimageauto -> @text("-\n
                          \n
                          \n");
        xdepimagexpra -> @text("-\n
                          \n");
        xdepimagexephyr -> @text("-\n
                          \n
                          \n");
        xdepimagexorg -> @text("-\n
                          \n");
        xdepimagehostdisplay -> @text("-\n
                          \n
                          \n
                          \n");
        xdepimagexdummy -> @text("-\n
                          \n");
        xdepimagexpraimage -> @text(" xpra\ \ \ \ xserver-xorg-core\n
                          xserver-xorg-video-dummy\n");
        xdepimagexorgimage -> @text(" xserver-xorg-core\n
                          xserver-xorg-video-dummy\n");
        xdepimagexdummyimage -> @text(" xserver-xorg-core\n
                          xserver-xorg-video-dummy
                          ");
      xcomment -> xcommenttitle xcommentauto xcommentxpra xcommentxephyr xcommentxorg xcommenthostdisplay xcommentxdummy xcommentxpraimage xcommentxorgimage xcommentxdummyimage;
        xcommenttitle -> @text(" ");
        xcommentauto -> @text(" Chooses between --xpra, --xephyr, --xorg and --hostdisplay,\n
                          depending on installed dependencies and whether --desktop \n
                          is given or not. Searches itself for a window manager if needed.\n");
        xcommentxpra -> @text(" Recommended to run single applications. \n
                          Application windows appear on host display.\n");
        xcommentxephyr -> @text(" Recommended to run desktop environments. \n
                          Desktop appears in a window on host display. Low overhead.\n
                          Along with option --wm usefull for single applications, too\n");
        xcommentxorg -> @text(" Core X server. Switch between displays with keys \n
                          [CTRL][ALT][F1]...[F12]. (Mostly [F7] for host and [F8].)\n");
        xcommenthostdisplay -> @text(" Share host display :0 instead of running second X server. \n
                          Least overhead, but least security, too.\n
                          Use with trusted images and option --hostuser only.\n
                          Security can be improved with option --untrusted.");
        xcommentxdummy -> @text(" Invisible, for custom setups of xpra and/or network access. \n
                          \n");
        xcommentxpraimage -> @text(" xpra server in image, accessed and displayed by \n
                          xpra client on host.\n");
        xcommentxorgimage -> @text("Xorg server in image, accessed and displayed by \n
                          xpra server and client on host. \n");
        xcommentxdummyimage -> @text(" Xorg server in image, invisible on host. \n
                          For custom setups of xpra and/or network access.
                          ");
    xexplanation:beside -> xexplstar1 xexplstar2 ;
      xexplstar1 -> @text("
         (*) It is recommended to install latest xpra: https://www.xpra.org \n
         \n
         (**) --xorg can be used out of the box on console tty1...tty6. \n
         To run a second X server from within already running X session, \n
         you need to edit /etc/X11/Xwrapper.conf and replace line:\n
         \ \ allowed_users=console \n
         with lines:\n
         \ \ allowed_users=anybody \n
         \ \ needs_root_rights=yes \n
         On debian 9 and Ubuntu 16.04 you need to install package \n
         xserver-xorg-legacy to have file /etc/X11/Xwrapper.conf.
         ");
     xexplstar2 -> @text("
         (***) --xdummy and --xdummy-image provide X servers invisible on host. \n
         They do not need a running X session on host.\n
         This can be used for custom setups, for example for network access with xpra. \n
         Output of needed environment variables on stdout (see option --env). \n
         Example: \n
         \ \ ~$ read xenv < <(x11docker --xdummy --env x11docker/lxde pcmanfm) \n 
         \ \ ~$ eval \$xenv xpra start \$(echo \$xenv | cut -d \" \" -f1 | cut -d= -f2) --use-display \n
         \ \ ~$ xpra attach \$(echo \$xenv | cut -d \" \" -f1 | cut -d= -f2) \n
         Avoid to run \"xpra start\" before X server is ready (check \$XSOCKET), and \n
         avoid to run \"xpra attach\" before xpra server is ready (check xpra server logfile).
         ");
    
  help:dialog "Help" -> @text(
  " x11docker allows you to run GUI applications and desktop environments from inside of docker images. \n
    Its main purpose is to preserve container isolation. This is tricky due to some X security leaks. \n
    x11docker runs a second X server to segregate docker applications from host applications. \n
    Hardware acceleration and pulseaudio sound are supported, too. \n
    \n
    Depending on chosen options, you can have high or low container isolation. \n
    Look at \"Security table\" to see the differences. \n
    \n
    Dependencies on host: \n
    Depending on chosen options, x11docker needs some additional packages to be installed on host. \n
    It will check for them on startup and show terminal messages if some are missing. \n
    List of possibly needed packages:  xpra  xserver-xephyr  xclip  pulseaudio  virtualgl wmctrl xserver-xorg-legacy \n 
    \n
    Dependencies in image: \n
    Most use cases does not have dependencies in image. \n
    Have a look at button \"X server info\" for options --xpra-image, --xorg-image and --xdummy-image. \n 
    For option --pulseaudio, package pulseaudio needs to be installed in image, too. \n
    Hardware acceleration can have dependencies in image, too. Look at button \"GPU  info\".\n
    \n
    With most recommended options --xpra or --xephyr, the dockered applications will appear on your already running X display. \n
    Docker applications will be segregated from your host display, and it is comfortable and secure to use. \n
    You can also choose option --hostdisplay for this to have least overhead, but then you have least container isolation, too. \n
    \n
    If neither xpra nor Xephyr are installed, and Xwrapper.conf is not edited, \n
    only less secure option --hostdisplay will work out of the box from within X.\n
    \n
    On systems without a root password like Ubuntu or Sparky, use option --sudo.\n
    \n
    For troubleshooting, activate option --verbose and use \"Run in xterm\" (or run x11docker-gui in a terminal).\n
    To see all options and more informations, run <x11docker --help>.\n
    \n
    x11docker and x11docker-gui are published under MIT licence. \n
    Have a look at github: https://github.com/mviereck/x11docker\n
    Some example docker images can be found at https://hub.docker.com/u/x11docker
    ") @close=" close";
    
  gpu_info:dialog "GPU info" -> @text(
        " Software accelerated OpenGL is available in all provided X servers. \n
          The image needs an OpenGL implementation to be able to use it. \n
          The easiest way to achieve this is to install package mesa-utils in docker image. \n
          Some applications need packages x11-utils and libxv1 to be installed in image, too. \n
          \n
          Hardware acceleration with option --gpu is fast and quite secure if used with option --xorg. \n
          It can get a speed-up with insecure option --ipc to make MIT-SHM / shared memory possible. \n 
          \n
          Option --gpu works with option --hostdisplay, too, but this option leaks container isolation. \n
          To avoid rendering glitches and to get a speed-up, insecure option --ipc can be used.\n
          \n
          Hardware accelerated OpenGL with option --virtualgl is slower than with option --gpu, \n
          but works with options --xpra and --xephyr, too. Leaks isolation from X server on display :0. \n
          Needs VirtualGL to be installed on host: http://www.virtualgl.org \n
          \n
          SECURITY: Using hardware acceleration with options --gpu or --virtualgl can degrade \n
          container isolation. Option --ipc breaks down container isolation. \n
          Look at button \"Security table\" to see the differences. \n
          \n
          To check if hardware acceleration is at work, you can run \"glxinfo | grep renderer\". \n
          The OpenGL renderer string should contain the name of your graphic card. \n
          If the OpenGL renderer string contains \"llvmpipe\", only software rendering is at work.\n
          \n
          Known to work with Intel and AMD onboard chips using open source drivers.\n
          Test reports with different setups are appreciated. Magic is done sharing all files in /dev/dri \n
          with docker container. Different setups may need additional other files to be shared \n
          and maybe some graphics drivers to be installed in image, too. 
          ") @close=" close"; 
    
  security_dialog:dialog "Security table" -> security_table security_info security_gpuinfo security_options @close=" close";
    security_table:beside -> sec_server sec_soft sec_virtualgl sec_gpu;
      sec_server -> @text(" Table to show grade of container isolation \n
                       depending on chosen options\n
                       \n
                       --xpra         = xpra (uses Xdummy)\n
                       --xephyr       = Xephyr (nested X server)\n
                       --xorg         = second core X server\n
                       --hostdisplay  = share host display :0 (\*\*) \n
                       --xdummy       = invisible dummy X server \n
                       --xpra-image   = connect to xpra server in image \n
                       --xorg-image   = connect to X server in image, show with xpra \n
                       --xpra-image   = connect to invisible X server in image ");
      sec_soft -> @text(" software \n
                       rendering \n
                       \n
                       ++++\n
                       ++++\n
                       ++++\n
                       +:0\n
                       ++++\n
                       +++++\n
                       +++++\n
                       +++++ ");
      sec_virtualgl -> @text(" --virtualgl \n
                       \n
                       \n
                       +:0\n
                       +:0\n
                       +++\n
                       +:0\n
                       +:0\n
                       +:0\n
                       +:0\n
                       +:0");
      sec_gpu -> @text(" --gpu (\*)\n
                       \n
                       \n
                       -\n
                       -\n
                       +++\n
                       +:0\n
                       -\n
                       -\n
                       -\n
                       -");
    security_info:beside -> sec_infograde sec_infotext;
      sec_infograde -> @text(" +++++\n 
                       ++++\n
                       +++\n
                       +:0\n
                       \n
                       \n
                       \n
                       -");
      sec_infotext -> @text(" > Highest container isolation, does not use any X server on host \n
                       > High container isolation, secure to use. \n
                       > High container isolation, slightly degraded by container access to GPU. \n
                       > Low container isolation due to X security leaks, considered insecure. \n
                        Container gains access to X server on display :0 with host applications. \n 
                        For example, keylogging is possible. For use with trusted images only. \n
                        Option --untrusted avoids keylogging, but does not work with --virtualgl. \n
                       > Does not work + slightly insecure.");
    security_gpuinfo -> @text(" (\*) --gpu: To get additional speed-up, you can use isolation breaking option --ipc \n
                       \ \ to make shared memory with X server possible (MIT-SHM extension) \n
                       (\*\*) --hostdisplay works with shared host X socket and can have rendering glitches \n 
                       \ \ due to missing shared memory. These glitches can be avoided with option --ipc.");
    security_options:beside -> sec_opt sec_optinfo;
      sec_opt -> @text (" --no-xhost \n
                        --untrusted \n
                        \n
                        \n
                        \n
                        --ipc \n
                        ") ;
      sec_optinfo -> @text(" > Disable possible access to host display :0 granted by xhost (recommended) \n
                       > Use \"untrusted\" cookies to restrict application access to X server. \n
                       \ \ Avoids keylogging and some other risks. Recommended for option --hostdisplay.\n
                       \ \ Some applications will not work with this. More infos: \n
                       \ \ https://www.x.org/releases/X11R7.6/doc/xextproto/security.html\n
                       > Isolation breakdown. Use with option --hostuser only to minimize risks. \n
                       \ \ Container access to host interprocess communication and shared memory.
                       ");
                       
  MIT:dialog "MIT license" -> @text(
               " MIT License\n
                 \n
                 Copyright (c) 2015,2016 Martin Viereck\n
                 \n
                 Permission is hereby granted, free of charge, to any person obtaining a copy\n
                 of this software and associated documentation files (the \"Software\"), to deal\n
                 in the Software without restriction, including without limitation the rights\n
                 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n
                 copies of the Software, and to permit persons to whom the Software is\n
                 furnished to do so, subject to the following conditions:\n
                 \n
                 The above copyright notice and this permission notice shall be included in all\n
                 copies or substantial portions of the Software.\n
                 \n
                 THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n
                 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n
                 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n
                 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n
                 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n
                 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n
                 SOFTWARE.") @close="close";

x11docker_options -> choose_X security choose_wmordesktop choose_options choose_options_advanced develdialog imageorexe dockeroptions  dockerimage;
x11docker -> "'$X11DOCKER' " x11docker_options;

buttons :horizontal ->  run runxterm preview desktop_starter orphanedcheck MIT help @close="Cancel";
  run -> @dump(x11docker)=" Run";
  preview -> @preview(x11docker,"monospace",900)="Preview command" ;
  desktop_starter -> @dump("xterm -e '\''","'$X11DOCKER' --starter ",x11docker_options,"'\''")="Create desktop starter";
  orphanedcheck -> @dump("xterm -hold -e '"'"''$X11DOCKER' ",sudo,nopwd,root," --orphaned '"'"'")="Check orphaned";
  runxterm -> @dump("xterm -hold -e '"'"'",x11docker,"'"'"'")="Run in xterm";
'

x11docker_command="$(echo $kaptain_script | kaptain /dev/stdin 2>/dev/null)"
rm $x11docker_logo
[ "$(echo $x11docker_command | grep -E '(--xdummy|--xpra-image|--xorg-image|--xdummy-image)' )" ] && {
  x11docker_command="$(echo "$x11docker_command" | sed -E "s/(--auto|--xpra|--xephyr|--xorg|--hostdisplay)//")"
}
echo $x11docker_command
eval $x11docker_command

