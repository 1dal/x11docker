#! /bin/bash
#########################################
## GUI for x11docker
## MIT licence 2016, Martin Viereck
## Uses 'kaptain' to provide a GUI
#########################################
#
# option -d shows some developer options


if test ! `command -v kaptain` ; then
  echo "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again." >&2
  xmessage "Error: did not find executeable 'kaptain'. Please install package 'kaptain' and try again."
  exit 1
fi

if test ! `command -v x11docker` ; then
  echo "Error: did not find executeable 'x11docker'. 
  Please make x11docker available (for example in /usr/local/bin) and try again." >&2
  xmessage "Error: did not find executeable 'x11docker'. 
  Please make x11docker available (for example in /usr/local/bin) and try again."
  exit 1
fi


if [ "$1" = "-d" ] ; then DEVEL="devel" ; fi  # option -d or d shows developer options

#####################
# Preset some options you may want to be set as default
#
DOCKERIMAGE=""          # docker image [+ command]
DOCKEROPTIONS=""        # additional docker options
WM="openbox"            # host window manager

# Checkboxes: "!" disables option, "" enables it
SUDOHOME="!"            #  --sudouser & --home
CLIPBOARD="!"
PULSEAUDIO="!"
VIRTUALGL="!"
XEPHYRFULLSCREEN="!"
GPU="!"
SUDO="!"
NOXHOST="!"
VERBOSE="!"

IPC="!"

# other way around: "!" enables option, "" disables it
DESKTOP=""
X11=""
XEPHYR=""
HOSTDISPLAY=""

XEPHYRSCREENSIZE="800x600"






kaptain_script='
start "x11docker GUI" -> options buttons;
  options:beside -> frameleft frameright '$DEVEL';
    frameleft:framed -> choose_image choose_X choose_wmordesktop;
    frameright:framed -> choose_options choose_options_advanced;

  devel " Developer options. \n Use with care." -> devxsocket devtcp devsharenewxsocket devsharegpu devxhost devprivileged devpid devnet devuts;
    devxsocket "--xsocket: Use shared \n X socket (default)" -> "--xsocket " | ! "" ;
    devtcp "--tcp: Use X over tcp \n instead of shared X socket" -> "--tcp " | ! "" ;
    devsharenewxsocket "--sharenewxsocket: share \n new X socket, but use tcp\n(dont use with --gpu)" -> "--sharenewxsocket " | ! "" ;
    devxhost "--xhost: set xhost + \n on both X servers" -> "--xhost " | ! "" ;
    devsharegpu "--sharegpu: share devices \n in /dev/dri (GPU)" -> "--sharegpu " | ! "";
    devprivileged "--privileged: \n docker run --privileged" -> "--privileged " | ! "";
    devpid "--pid: docker run --pid=host" -> "--pid " | ! "";
    devnet "--net: docker run --net=host" -> "--net " | ! "";
    devuts "--uts: docker run --uts=host" -> "--uts " | ! "";

    choose_image "Run GUI applications from inside of docker images" -> imageorexe dockeroptions command;
      info -> @text("x11docker allows you to run GUI applications or full desktops environments \n from inside of docker images. See <Help> for dependencies and more infos.");
      imageorexe -> image | exe | xonly;
        image:beside "Run docker image in another X server" -> " " security_dialog;
        exe "Start host application in another X server (instead of docker image)" -> "exe ";
        xonly "Only create new empty X server" -> " # "; 
      command  :beside -> @text("docker image [and command] to run:") @string="'$DOCKERIMAGE'";
      dockeroptions :beside -> @text("Additional options for docker (use long form --opt=\"\"): ") @string="'$DOCKEROPTIONS'" " ";
      
    choose_X:framed "X server to use" -> autochoose | xpra | '$XEPHYR' xephyr | '$X11' X11 | '$HOSTDISPLAY' hostdisplay;
      autochoose:beside "-x: Auto choose X server to use" -> "-x " gpu_info;
      xpra "--xpra: Show container application windows on your main desktop" -> "--xpra ";
      xephyr "--xephyr: Show container desktop in a window on your main desktop" -> "--xephyr " xephyrspecials;
        xephyrspecials ->  xephyrfullscreen  xephyrresizeable xephyrsize xephyrglamor;
          xephyrfullscreen "--fullscreen: Run Xephyr in fullscreen mode" -> " --fullscreen " | '$XEPHYRFULLSCREEN' "";
          xephyrresizeable "--resizeable: Make Xephyr window resizeable" -> "--resizeable " | ! "";
          xephyrsize :beside "--size: Preset Xephyr window size: " -> "--size \"" @string="'$XEPHYRSCREENSIZE'" "\" " | ! "";
          xephyrglamor "--glamor: Enable glamor 2D acceleration" -> "--glamor " | ! "";
      X11 "--X11: Use core X server. (Switch with <CTRL><ALT><F7>...<F12>)" -> "--X11 ";
      hostdisplay "--hostdisplay: Use host display without container isolation" -> "--hostdisplay ";

   choose_wmordesktop "Choose window manager (options --xpra and --hostdisplay will ignore this)" -> wm | '$DESKTOP' desktop;
      wm :beside "--wm: Host window manager to use" ->  "--wm \"" @string="'$WM'" "\" ";
      desktop "--desktop: Image contains its own window manager" -> "--desktop ";  
      
    choose_options "Options" -> hostuser sudouser home clipboard pulseaudio virtualgl gpu;
      hostuser "--hostuser: Create container user similar to \n your host user (same name, user id and group id) \n (a docker image command must be given)"->  " --hostuser " | ! "";
      sudouser "--sudouser: Like --hostuser, but member of group sudo" -> " --sudouser " | '$SUDOHOME' "";
      home "--home: Share a host folder in ~/x11docker \n as /home in container." -> "--home " | '$SUDOHOME' "";  
      clipboard "--clipboard: Enable clipboard sharing (best with xpra)" -> "--clipboard " | '$CLIPBOARD' "";
      pulseaudio "--pulseaudio: Sound with pulseaudio \n (needs pulseaudio on host and in image)" -> "--pulseaudio " | '$PULSEAUDIO' "";
      virtualgl:beside "--virtualgl: Mediate OpenGL acceleration" -> "--virtualgl " | '$VIRTUALGL' "";
      gpu "--gpu: Immediate GPU acceleration" -> "--gpu " | '$GPU' "" ;
      
    choose_options_advanced "Advanced options" -> verbose noxhost cache ipc root sudo;
      verbose "--verbose: Be verbose" -> "--verbose " | '$VERBOSE' "";
      log "--log: Show logfiles in a window" -> "--log " | ! "";
      LOG "--LOG: like --log, but in new X server" -> "--LOG " | ! "";
      cache "--cache: Keep cache files in ~/.cache/x11docker" -> "--cache " | ! "";
      ipc "--ipc: Share host interprocess communication \n 
           and shared memory. Use with --hostuser only. \n
           Caution: breaks down container isolation. \n 
           Can speed up option --gpu and avoids \n 
           rendering glitches with option --hostdisplay. " -> "--ipc " | '$IPC' "";
      ps "--ps: Keep created container" -> "--ps " | ! "" ;
      noxhost "--no-xhost: Disable any access \n to host X server granted by xhost" -> "--no-xhost " | '$NOXHOST' "" ;
      root "--root: Allow root to run x11docker" -> "--root " | ! "";
      sudo "--sudo: Use sudo instead of su to run docker" -> "--sudo " | '$SUDO' "";
      
  help:dialog "Help" -> @text("x11docker \n
    \n
    x11docker allows you to run GUI applications and desktop environments from inside of docker images. \n
    Its man goal is to preserve container isolation. This is tricky due to some X security leaks. \n
    x11docker can run a second X server to segregate docker applications from host applications. \n
    Depending on choosed options, you can have high or low container isolation. \n
    See button \"Security table\" to see the differences. \n
    Hardware acceleration and pulseaudio sound are supported, too. \n
    \n
    Dependencies: \n
    Depending on choosed options, x11docker needs some additional packages to be installed. \n
    It will check for them on startup and show terminal messages if some are missing. \n
    List of possibly needed packages:  xpra xephyr xclip pulseaudio virtualgl\n 
    \n
    If using xpra or Xephyr, the dockered applications will appear on your already running X display. \n
    Docker applications will be segregated from your host display, and it is comfortable and secure to use. \n
    You can also choose option --hostdisplay for this to have least dependencies and least overhead, \n
    but then you have least container isolation, too. \n
    \n
    If using core X server, first run <dpkg-reconfigure x11-common> and choose option <anybody>. \n
    Otherwise you are not allowed to start a new core X server from within an already running X.\n
    You can switch between displays using <CTRL><ALT><F7>...<F12>.\n
    \n
    On systems without a root password, like Ubuntu or Sparky, use option --sudo.\n
    \n
    For troubleshooting, acivate option --verbose and run x11docker-gui from within a terminal.\n
    To see all options and more informations, type in your terminal <x11docker --help>.\n
    \n
    x11docker and x11docker-gui are published under MIT licence. \n
    Have a look at github: https://github.com/mviereck/x11docker\n
    Some example docker images can be found on https://hub.docker.com/u/x11docker
    ") @close=" close";
    
  gpu_info:dialog "GPU acceleration info" -> @text(" Software accelerated OpenGL/GLX is available in all provided X servers. \n
          The image needs an OpenGL implementation to profit from it. \n
          The easiest way to achieve this is to install package \"mesa-utils\" in your image. \n
          \n
          Hardware acceleration with option --gpu is fast and quite secure if used with option --X11 only. \n
          It can get a speed-up with option --ipc to make MIT-SHM / shared memory possible. \n 
          Option --gpu works with options --X11 and --hostdisplay only. \n 
          \n
          Hardware accelerated OpenGL/GLX with option --virtualgl is slower than with option --gpu, \n
          but works with --xpra and --xephyr, too. \n
          Needs VirtualGL to be installed on host: http://www.virtualgl.org \n
          \n
          SECURITY: Using hardware acceleration with options --gpu or --virtualgl can degrade \n
          container isolation. Option --ipc breaks down container isolation. \n
          Look at button \"Security table\" to see the differences. \n
          \n
          To check if hardware acceleration is working, you can run \"glxinfo | grep renderer\". \n
          The OpenGL renderer string should contain your graphics card adapter name. \n
          If the renderer string contains \"llvmpipe\", only software rendering is enabled. \n
          \n
          As a performance check, you can run glxgears in a maximized window.
          ") @close=" close"; 
    
  security_dialog:dialog "Security table" -> security_table security_info security_gpuinfo security_ipcnet security_no_xhost @close=" close";
    security_table:beside -> sec_server sec_soft sec_virtualgl sec_gpu;
      sec_server -> @text(" Table to show grade of container isolation \n
                       depending on choosed options\n
                       \n
                       --X11          = second core X server\n
                       --xpra         = xpra\n
                       --xephyr       = Xephyr\n
                       --hostdisplay  = share host display :0 (\*\*) \n");
      sec_soft -> @text(" software \n
                       rendering \n
                       \n
                       +++++\n
                       +++++\n
                       +++++\n
                       +:0\n");
      sec_virtualgl -> @text(" --virtualgl \n
                       \n
                       \n
                       ++++\n
                       +:0\n
                       +:0\n
                       +:0\n");
      sec_gpu -> @text(" --gpu (\*)\n
                       \n
                       \n
                       ++++\n
                       -\n
                       -\n
                       +:0\n");
    security_info:beside -> sec_infograde sec_infotext;
      sec_infograde -> @text(" +++++\n
                       ++++\n
                       +:0\n
                       \n
                       \n
                       -");
      sec_infotext -> @text(" > High container isolation, secure to use. \n
                       > High container isolation, slightly degraded by container access to GPU. \n
                       > Low container isolation due to X security leaks, considered insecure. \n
                        Container gains access to X server on display :0 with host applications. \n 
                        For example, keylogging is possible. For use with trusted images only. \n
                       > Does not work + slightly insecure.");
    security_gpuinfo -> @text(" (\*) --gpu: To get a speed-up, you can use isolation breaking option --ipc to make \n
                       shared memory with X server possible (MIT-SHM extension) \n
                       (\*\*) --hostdisplay works with shared host X socket and can have rendering glitches \n 
                       due to missing shared memory. These glitches can be avoided with option --ipc.");
    security_ipcnet:beside -> sec_ipcnetoptions sec_ipcnetinfo;
      sec_ipcnetoptions -> @text (" --ipc \n") ;
      sec_ipcnetinfo -> @text(" > Isolation breakdown. Use with option --hostuser only to minimize risks. \n
                       Container access to host interprocess communication and shared memory. \n");
    security_no_xhost -> @text(" To make sure your host X server on display :0 is not accessable from others or \n
                       from docker containers, it is recommended to use option --no-xhost.\n
                       You may also check your ~/.Xauthority cookies with command \"xauth list\"");
                       
  MIT:dialog "MIT license" -> @text(" MIT License\n
                 \n
                 Copyright (c) 2015,2016 Martin Viereck\n
                 \n
                 Permission is hereby granted, free of charge, to any person obtaining a copy\n
                 of this software and associated documentation files (the \"Software\"), to deal\n
                 in the Software without restriction, including without limitation the rights\n
                 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n
                 copies of the Software, and to permit persons to whom the Software is\n
                 furnished to do so, subject to the following conditions:\n
                 \n
                 The above copyright notice and this permission notice shall be included in all\n
                 copies or substantial portions of the Software.\n
                 \n
                 THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n
                 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n
                 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n
                 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n
                 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n
                 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n
                 SOFTWARE.") @close="close";

x11docker_options -> choose_X choose_wmordesktop choose_options choose_options_advanced "--" choose_image;
x11docker -> "x11docker " x11docker_options;

buttons :horizontal ->  run preview desktop_starter orphanedcheck MIT help @close="Cancel";
  run -> @dump(x11docker)=" Run";
  runxterm -> @dump("xterm -xrm '"'"'XTerm*selectToClipboard: true'"'"' -hold -e ",x11docker)="Run in xterm";
  preview -> @preview(x11docker,"monospace",900)="Preview command" ;
  desktop_starter -> @dump("xterm -e '\''","x11docker --starter ",x11docker_options,"'\''")="Create desktop starter";
  orphanedcheck -> @dump("xterm -hold -e '"'"'x11docker --orphaned '"'"'")="Check orphaned";
  license -> @dump("xterm -hold -e '"'"'x11docker --license'"'"'")="MIT license";
'

x11docker_command=$(echo $kaptain_script | kaptain /dev/stdin 2> /dev/null)
echo $x11docker_command
eval $x11docker_command

