#! /bin/bash

# x11docker
# Run GUI applications and desktop environments in docker on a separate X server or Wayland compositor.
# Provides GPU acceleration and pulseaudio sound. Circumvents common X security leaks.
# Restrictes docker container privileges with 'docker run --cap-drop=ALL --security-opt=no-new-privileges' 
# Type 'x11docker --help' or scroll down to read usage information.
# https://github.com/mviereck/x11docker

Version="3.5.11.4"

changelog() {
### ToDo:
# do not terminate x11docker-gui on --orphaned or run-in-terminal
# --xorg: check custom systemd start of X #7
# check X in container #7
# some tests with Xephyrglamor=no
# find solution for passwordless x11docker. Some sudo setup with option restrictions?
### BUG collection: x11docker bugs:
# BUG check whether VT is not in use with --xorg/--xpra/--xdummy, bug if accidently using vt that is already in use
# BUG KDE-Wayland fails with different --user, seems to be ownership issues with wayland socket
### BUG collection: non x11docker bugs
# kdeneon/all:user-lts plasmashell: no kwin?
# bugreport docker: container user does NOT have same groups as host user - just wrong doku?
# BUG Xwayland does not always sit at 0:0 on multiple outputs
# BUG Xwayland ignores xhost -SI:localuser:$USER
# BUG nxagent with x11docker/lxde: segmentation fault of lxpanel with --userns-remap. bug in nxagent, lxpanel or x11docker?
# BUG --kwin*: wrong fullscreen and crashes in gnome-wayland, strange in weston, WAYLAND_DISPLAY="" does not help, probably bug in kwin
# BUG --output-count: sometimes multiple windows don't close although x11docker is finished. high cpu load, probably Weston and Kwin bug
# BUG scale>1 Xwayland in Weston is too large (Xwayland bug), rendering issues on tty (witching scaled/unscaled Xwayland on keyboard/mouse events)
# BUG x11docker-gui in weston freezes weston in combo boxes. Weston bug ? QT3/4 bug?
# BUG debian bug report lightdm/sddm contra gdm, dm can crash on tty switch if multiple graphical sessions are running

# x11docker changelog
# 22.07.2017 V3.5.11.4  bugfix --wm=auto, list of window managers was not checked
# 12.07.2017 V3.5.11 pull image if not available before calling 'docker run'
# 12.07.2017 V3.5.10 regard ENTRYPOINT in dockerrc
# 09.07.2017 V3.5.9  --user: bugfix parsing custom gid, gid was set to username
#                    --home with --user=(unknown): only show warning (instead of error) not creating persistent home
#                    do not set write permissions on --home or --homedir folder for different users than $USER or --user. (Not x11docker's job) 
#                    do not set --read-only if --user=0
#                    minor bugfix: chown x11docker_CMD to host user to avoid permission issues in $Sharefolder
# 07.06.2017 V3.5.8  --nxagent: bugfix due to update? must set nxagent -ac (=xhost +) temporary to allow xinit
# 06.07.2017         --kwin-native: always share Wayland (--sharewayland --waylandenv --dbus)
#                    minor bugfix: allow --wm for --kwin-xwayland
#                    docker run "--read-only --volume=/tmp" to restrict container filesystem as read-only (except for --sudouser)
#                    --xorg supports --rotate. (Xephyr could, but crashes -> Xephyr bug. Nxagent, Xdummy, Xvfb and Xwayland refuse this.)
# 04.06.2017         --xhost STR: new option to specify "xhost STR". Deprecated: --xhost+
# 03.06.2017         --xvfb: new option to explicitly use Xvfb and to clearly use Xdummy on --xdummy
#                    Xdummy script in $Cachefolder forked from https://xpra.org/trac/browser/xpra/trunk/src/scripts/xpra_Xdummy
#                    calculate VideoRam in xorg.xdummy.conf (instead of fat hardcoded 256000 kb)
# 28.06.2017 V3.5.7  usage info for HTML5 web application setup
#                    redirect verbose output to &3 to show it in subshells, too, and to avoid possible collision with read < <()
# 25.06.2017         --env: set custom environment variables in dockerrc instead of in docker run
#                    removed unix in $Newxenv for DISPLAY to make xpra ssh setup easier
#                    Xdummy-Xwayland: new X server to provide --gpu for --xdummy based on weston, xwayland and xdotool
# 24.06.2017         always enable extension Xtest on --xdummy to allow xpra access
# 22.06.2017         share X socket to /tmp, create .X11-unix in dockerrc and softlink socket. This avoids writeable X11-unix in $Cachedir.
#                    --setwaylandenv: env now set in dockerrc instead of docker command
# 21.06.2017 V3.5.6  --sudouser: reincarnated option to give sudo without password to container user.
#                    docker command one-liner extended to dockerrc. dockerrc creates x11docker_CMD. Can always extract image command without additional password prompt and create some environment.
#                    bugfix parsing option --wm
# 20.06.2017         minor bugfix: export $Hostxenv in error() was empty if called in xtermrc
#                    create /tmp/XDG_RUNTIME_DIR and softlink to wayland socket in container due to some KDE issues (XDG_RUNTIME_DIR must be owned by user). Fails with different --user
#                    create /tmp/.X11-unix with 1777 in container to allow new X sockets (especially for startplasmacompositor). Drawback: container writeable folder in cache
# 17.06.2017         minor bugfix: avoid pointless warning about XTEST if not using xpra
#                    shorter sleep in finish()
#                    don't search for deprecated /tmp/x11docker in checkorphaned()
#                    bugfix typo preventing start of --kwin and --kwin-native (-width instead of --width) 
#                    warning with hint to use --xpra-xwayland if --scale is used with --weston-xwayland.
# 10.06.2017 V3.5.5.2 update usage info for --xpra and --xpra-xwayland
# 10.06.2017 V3.5.5.1 minor bugfix in --auto always choosing --xorg
# 09.06.2017 V3.5.5  autochoose xpra-desktop if xephyr is missing
# 06.06.2017         improved part: check virtual screen size
# 05.06.2017         changed dpi calculation depending on xpra mode
# 03.06.2017         desktop mode for xpra if --wm is given
# 02.06.2017         always set XDG_RUNTIME_DIR=/tmp as some apps may expect it
# 02.06.2017 V3.5.4  set rw access for /dev/dri (#12)
# 31.05.2017         disable extension XTEST if using wm from host (to avoid abuse of context menu of openbox and the like)
# 29.05.2017 V3.5.3  --pulseaudio: get and use IP of container instead of docker0 IP range (#11), disabling TCP module on exit
# 27.05.2017         changed --volume to --sharedir to avoid confusion
# 24.05.2017         update usage()
#                    mount $Sharefolder and its content read-only
#                    remove X11-unix from $Sharefolder
#                    set read-only for /dev/dri on --gpu
#                    --security-opt=no-new-privileges added to docker run
# 22.05.2017 V3.5.2  --volume: new option to share host folders
# 19.05.2017 V3.5.1  user creation with '--addgroup video' to support pre-systemd and kdeneon gpu support
#                    create /tmp/.X11-unix with 1777
# 17.05.2017 V3.5.0  avoid Terminal window with --no-password
# 15.05.2017         --env: regard whitespaces, use \n to divide entrys
#                    set mode=preferred for Weston on tty, ignore $Screensize
# 14.05.2017         extension XINERAMA disabled as multiple Xephyr outputs cannot handle it well
#                    create container home folder /tmp/fakehome in x11docker_CMD (avoids ownership problems with wine, and is less messy in /tmp) 
#                    more failure checks in installer()
# 13.05.2017         check for --userns-remap, disabling it with --userns=host if --home or --homedir are set
#                    minor exploit check for DISPLAY XAUTHORITY XDG_RUNTIME_DIR WAYLAND_DISPLAY HOME
#                    --output-count: new option to set amount if virtual screens/desktop windows for Weston, Kwin, Xephyr
#                    --westonini: new option to specify a custom weston.ini for --weston and --weston-xwayland
#                    bugfix: -s KILL for weston on finish avoids zombies
# 12.05.2017         --cachedir: new option: specify custom cache folder
#                    --homedir: new option: specify host folder to share as home
# 11.05.2017         automatically choose trusted or untrusted cookies
#                    --trusted: new option: enforce trusted cookies for --hostdisplay and --kwin-native
#                    --cache deprecated
# 10.05.2017         --cap-default: Allow docker default capabilities
# 08.05.2017         --orphaned cleans /tmp/x11docker
#                    show docker log in xtermrc if pulling image
# 07.05.2017         'docker run --cap-drop=ALL' as default
#                    --user: new option to set user to use (name or uid, non-existing uids possible. default: host user)
#                    reduce /etc/passwd and /etc/group to container user and groups user and videp only (except root, keeps whole files).
#                    creating container user similar to host user with docker run option --user and custom /etc/passwd instead of script createuser.
#                    dismissed --hostuser --sudouser, effect of --hostuser is default now, --sudouser not possible due to --cap-drop=ALL
# 06.05.2017         --gpu: only share --device=/dev/dri instead of listing all files in it
# 05.05.2017 V3.2.1  minor bugfix: --scale with --xpra-xwayland under X without Wayland failed
# 04.05.2017 V3.2.0  --scale: new option for xpra and weston
#                    --rotate: new option for weston
#                    --dpi: new option for screen density
#                    minor bugfix: checking screensize in Gnome-Wayland failed looking for primary display, window was not roughly maximized
#                    bugfix: missing error() in xinitrc
#                    allow MIT-SHM for --exe
# 03.05.2017 V3.1.16 bugfix --xpra-wayland in check for WAYLAND_DISPLAY
# 02.05.2017 V3.1.15 minor bugfix in choosing terminal, replace $Waylandterminal with $Terminal in re-check
#                    minor bugfix xtermrc and xinitrc: check if $Dockerpidfile is not empty
#                    faster startup for --xpra-xwayland, --weston-xwayland, --kwin and --kwin-xwayland
#                    code cleanup
# 01.05.2017 V3.1.14 checkorphaned() uses container names instead of numbers
#                    bugfix --exe: reliable kill $Hostexe, even with --weston* and --kwin*
#                    bugfix: remove : and / from image name in $Containername
# 30.04.2017 V3.1.13 Improved multimonitor support (still missing: multihead)
#                    bugfix: redirection of stderr wihout cat, avoids broken pipe on ctrl-c in ubuntu and opensuse
#                    bugfix: removed custom socket in xpra (failed in opensuse)
#                    removed $Cidfile at all, cleanup hint in finish() with $Containername
#                    avoid root ownership for $Dockerlogfile and $Dockerpidfile
# 29.04.2017 V3.1.12 clean up confusion with x11docker.log
#                    minor bugfix: include warning() in xinitrc
#                    bugfix in xinitrc for --no-xhost
#                    don't share $Xclientcookie as $Sharefolder is already shared
#                    don't use $Cacherootfolder for parsererror
#                    hint to use --sudo on some systems
#                    use id -g instead of $Benutzer for group name
#                    add lsb-release -ds to verbose output
# 29.04.2017 V3.1.11 disabled $Cidfile as not important and due to #10
# 28.04.2017 V3.1.10 minor bugfix: check for xenial instead of 16.04/xvfb
#                    regression fix: set XPRA_XSHM=0 on Shareipc=no
# 27.04.2017         disable --desktop-scaling in xpra, not supported before xpra v1.x
# 27.04.2017 V3.1.9  don't create Cacherootfolder in variable definitions
# 26.04.2017         check for Xvfb on Ubuntu 16.04
# 25.04.2017 V3.1.8  Add advice for --xorg how to setup xserver-xorg-legacy
# 25.04.2017 V3.1.7  --xpra and --xdummy now use Xvfb if installed. Compare #9, Xdummy cannot be used on Ubuntu 16.04 due to xorg.conf location
#                    set $Windowmanager in auto choosing X server if switching to desktop windows
# 21.04.2017 V3.1.6  bugfix 2 --nxagent: don't close nxagent on every call of nxclient
# 20.04.2017 V3.1.5  bugfix --nxagent: don't close nxagent on every call of nxclient
# 19.04.2017 V3.1.4  --nxagent supports untrusted cookies
#                    bugfix: don't set dpi if xdpyinfo fails
# 18.04.2017 V3.1.3  --nxagent cookie workaround as it ignores XAUTHORITY on option -auth
#                    --nxagent workaround to terminate on pressing window close button -> fake nxclient
#                    bugfix typo in finish() looking for docker pid
# 18.04.2017 V3.1.2  --nxagent sets right keyboard layout, thanks to Ulrich!
# 18.04.2017 V3.1.1   --nxagent now supports --size, --fullscreen and --clipboard, thanks to Ulrich Sibiller from Arctica!
# 17.04.2017          check dpi from host and set this to new X server
#                     xpra xmessage to be patient
#                     disabled keyboard adjusting for --nxagent
# 16.04.2017 V3.1.0   --nxagent: new X server option
# 15.04.2017 V3.0.0   Wayland support 
  : 
}
usage() {               # --help: show usage information
    echo "
x11docker: Create a new X server & run GUI applications and desktop 
           environments in docker and show them on your display.
           Useful to avoid security issues concerning X forwarding.
           Container user is same as host user to avoid root in container.
           Default docker container capabilities are dropped.
           Wayland support included. Published under MIT license.

Usage:
To run a docker image with new X server (auto-choosing X server option):
  x11docker [OPTIONS] IMAGE [COMMAND]
  x11docker [OPTIONS] -- "'"[DOCKER_RUN_OPTIONS]"'" IMAGE [COMMAND [ARG1 ARG2 ...]]
To run a host application on a new X server:
  x11docker [OPTIONS] --exe COMMAND
  x11docker [OPTIONS] --exe -- COMMAND [ARG1 ARG2 ...]
To run only a new empty X server:
  x11docker [OPTIONS]
To run a HTML5 web application (needs package websockify):
  Example:
    read Xenv < <(x11docker --xdummy  x11docker/lxde pcmanfm)
    echo \$Xenv && export \$Xenv
    xpra start \$DISPLAY --use-display --html=on --bind-tcp=localhost:14500
  (In your browser go to adress:  http://localhost:14500
   Further infos at https://xpra.org/trac/wiki/Clients/HTML5 ).

 * The new X server will be terminated once dockered application is closed.
 * On systems without a root password like Ubuntu, use option '--sudo'.
 * x11docker is designed to run images only. New containers will be discarded.
 * Doesn't have dependencies inside of docker images 
   (except for special options --gpu, --pulseaudio and --dbus).

Dependencies: 
  Depending on chosen options, x11docker needs some packages to be installed. 
  It will check for them on startup and show messages if some are missing. 
  List of possibly needed packages:
  more important: 
      xpra xserver-xephyr weston xwayland xdotool xvfb
  less important: 
      xclip pulseaudio kwin nxagent xdpyinfo
  least important:
      xserver-xorg-legacy xserver-xorg-video-dummy

Options:
     --help            display this message and exit
 -e, --exe             execute host application on new X server (no docker)
     --xonly           only create empty X server (default for no image name)
 
X server options: 
     --auto            auto choose X server for docker applications (default)
                       (regards options --wm and --gpu. If --wm=none, a desktop
                       environment in container is assumed.)
 -a, --xpra            use xpra to show application windows on host display
                       (needs package 'xpra' to be installed. On Ubuntu 16.04 
                       also package 'xvfb'). If option --wm is given, xpra runs 
                       in desktop mode like --xephyr.
 -y, --xephyr          use Xephyr to show desktops in a window on host display
                       (needs package 'xserver-xephyr' to be installed)
 -A, --xpra-xwayland   use xpra to show single applications using Xwayland.
                       Supports options --gpu and --scale. (Needs 'xpra' and 
                       'xwayland', on X also 'weston' and 'xdotool') If option
                       --wm is given, xpra runs in desktop mode like --xephyr.
 -Y, --weston-xwayland similar to --xephyr, but support of option --gpu.
                       Uses Weston with Xwayland. Runs as nested server
                       in X or on its own from console. (Needs packages 'weston'
                       and 'xwayland' to be installed.)
 -h, --hostdisplay     share host display :0, QUITE BAD CONTAINER ISOLATION.
                       Discouraged, use with full trusted images only.
                       Least overhead of all X server usage variations.
 -x, --xorg            use new core Xorg server. Runs from console.
                       On Ubuntu 16.04 you need package xserver-xorg-legacy.
                       Edit file '/etc/X11/Xwrapper.conf' and 
                       replace line:        allowed_users=console
                       with lines           allowed_users=anybody
                                            needs_root_rights=yes
                       (This allows to start from within X, too.)
 
special X servers:
 -n, --nxagent         seamless like --xpra if --wm is empty or not given,
                       windowed like --xephyr if --wm is given or 'none'.
                       (Needs nxagent to be installed.) (experimental)
 -X, --xwayland        use Xwayland, needs a running Wayland compositor.
                       (Needs 'xwayland' to be installed.)
     --kwin-xwayland   like --weston-xwayland, but using kwin_wayland
 -N, --kwin-native     Seamless X and Wayland together. Experimental.
     --xdummy          invisible X server. (needs 'xserver-xorg-video-dummy')
     --xvfb            invisible X server. (needs 'xvfb')
                       --xdummy and --xvfb can be used for custom access,
                       for example with xpra and/or ssh. They include
                       option --showenv.
                       Along with option --gpu, an invisible setup with Weston,
                       Xwayland and xdotool is used (instead of Xdummy or Xvfb) 
                       
No X server at all:
 -W, --weston          Weston without X for pure Wayland applications.
                       Runs in X or from console. (Needs package weston.)
 -H, --hostwayland     Share host Wayland without X for pure Wayland apps.
                       (Needs already running Wayland compositor.)
 -K, --kwin            KWin without X for pure Wayland applications.
                       Runs from X or from console. (Needs kwin_wayland.)
     --nothing         Do not provide any X or wayland server
     
Desktop environment and window manager:
 -w, --wm COMMAND      host window manager to use.
                       If COMMAND=auto or 'm', autodetect a host wm.
                       Usefull f.e to run single applications in Xephyr.
                       If COMMAND=none or 'n', don't use a host wm, but assume
                       a desktop environment in image (influences --auto).
     --desktop         image contains a desktop environment (same as --wm=none)

Screensize and related options:
 -f, --fullscreen      run Xephyr, nxagent or Weston in fullscreen mode.
     --size XxY        set Xephyr, Weston or KWin screen size (f.e. 800x600).
 -r, --resizeable      make Xephyr window resizeable (Note: some window
                       managers/desktops won't like this and may misbehave).
 -l, --scale N         scale factor N for xpra or Weston. 
                       Allowed for --xpra and --xpra-xwayland: 0.25 ... 8.0.
                       Allowed for --weston and --weston-xwayland: 1...9.
                       (Mismatching font sizes can be adjusted with --dpi).
     --rotate N        Rotate display (--xorg, --weston and --weston-xwayland)
                       Allowed values: 0, 90, 180, 270, flipped, flipped-90,
                       flipped-180, flipped-270  (flipped = mirrored).
     --dpi N           dpi value (dots per inch) to submit to clients.
                       Influences font size of some applications.
     --output-count N  Count of outputs for Weston, KWin or Xephyr. Default: 1
                       Simulates multiple monitors. (experimental)

User, shared folders, GPU, clipboard and sound options:
     --user N          Create container user N (N=name or N=uid). Default: 
                       same as host user. N can also be an unknown user id.
                       You can specify a group id with N being 'user:gid'.
 -m, --home            use a host folder ~/x11docker/imagename as home folder
                       in container. (Note: docker user namespaces will
                       be disabled if configured, currently not supported.)
     --homedir DIR     specify custom host folder DIR for option --home.
     --sharedir DIR    share host folder DIR with r/w access at same location.
                       (can be specified multiple times for multiple folders).
 -c, --clipboard       share clipboard between X servers (works best with xpra.
                       Most other X servers need xclip to be installed).
 -p, --pulseaudio      enable sound with pulseaudio over tcp. Needs
                       pulseaudio to be installed on host and in image.
 -g, --gpu             Hardware accelerated OpenGL rendering. Shares files in
                       /dev/dri. Works with all X and Wayland options except
                       --xpra --xephyr, --nxagent and --xdummy.
                       Needs MESA/OpenGL to be installed in image.
                       Degrades container isolation. Container access to GPU.
                       
Advanced options:
 -s, --sudo            use 'sudo' to run 'su -c docker ...' (Ubuntu special)
 -P, --no-password     don't ask for root password
 -o, --no-xhost        disable any access to host X server granted by xhost
 -E, --waylandenv      set some environment variables summoning some toolkits
                       to use Wayland. (GTK3 QT5 Clutter SDL Elementary Evas)
 -d, --dbus            start image command with dbus-launch (often needed
                       for QT5 applications running on Wayland)
                       (needs dbus-x11 to be installed in image)
     --env VAR=value   set custom environment variable VAR=value
 -v, --verbose         be verbose

Special options:
     --sudouser        sudo without password for container user (testing only,
                       severe reduction of default x11docker security).
     --showenv         echo \$DISPLAY, \$XAUTHORITY and \$WAYLAND_DISPLAY.
 -S, --sharewayland    share Wayland socket and WAYLAND_DISPLAY.
     --westonini FILE  custom weston.ini for --weston and --weston-xwayland.
     --cachedir DIR    custom cache folder. (Default: \$HOME/.cache/x11docker)
     --xhost STR       set \"xhost STR\" on new X server (see 'man xhost').
                       (Use with care. '--xhost +' allows access for everyone).
     --no-auth         disable cookie authentication (testing purposes only)
     --trusted         Use trusted cookies for --hostdisplay and --kwin-native
 -   --untrusted       create untrusted cookies. Restricts X access. 
                       Default for --hostdisplay and --kwin-native to avoid
                       MIT-SHM errors. Avoids keylogging with --hostdisplay.
                       If --gpu is set, --trusted is used.
     --vt N            use vt / tty N (affects --xorg, --xdummy, --xpra)
     --display N       use display number N
     --ps              preserve container on exit.
     --ipc             set docker run option --ipc=host, BREAKS ISOLATION.
                       share host interprocess communication and shared memory.
                       Allows MIT-SHM extension.
     --net             set docker run option --net=host, BREAKS ISOLATION.
                       share host network stack including dbus communication.
     --cap-default     allow default docker container capabilities (instead of
                        '--cap-drop=ALL --security-opt=no-new-privileges').
     --root            allow root to run x11docker (discouraged).

Options not starting docker or X server:
     --license         show license of script (MIT) and exit
     --starter         create starter on desktop and exit
     --orphaned        cleanup check for orphaned containers and cache files

Installation options   (needs root permissions):
     --install         install x11docker and x11docker-gui on your system
                       (uses /usr/local/bin, creates icon and desktop entry,
                       creates /usr/share/doc/x11docker for readme and license)
     --update          update x11docker with latest version from github
     --remove          remove x11docker from your system

x11docker version: $Version
Please report issues at https://github.com/mviereck/x11docker
"
}
license() {             # --license: show license (MIT)
echo 'MIT License

Copyright (c) 2015, 2016 Martin Viereck

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.'
}
error() {               # show error messages on stderr and exit
  Message="$* 
  Type 'x11docker --help' for usage information
  For debugging, run x11docker in terminal and/or enable option '--verbose'
  and look at logfile $Cacherootfolder/x11docker.log
  If you think this is a bug in x11docker, 
  please report at https://github.com/mviereck/x11docker"
  echo "
$(tput setaf 1)x11docker ERROR$(tput sgr0) $Message
" >&3
  export $Hostxenv
  [ -t 1 ] || echo "x11docker ERROR: $Message" | xmessage -file - -default okay
  [ -e $Logfile ] && echo "x11docker ERROR: $Message" >> $Logfile
  Exitcode=1
  exit 1
}
warning() {             # show warning message
  echo "$(tput setaf 3)x11docker WARNING:$(tput sgr0) $*" >&3
  #xmessage "$*" -timeout 10 &
  echo "" >&3
  [ -e $Logfile ] && echo "x11docker WARNING: $*" >> $Logfile
  return 0
}
verbose() {             # show verbose messages
   [ -e $Logfile ] && echo "x11docker: $*
  " >> $Logfile
  return 0
}
installer() {           # options --install, --update, --remove: Installer for x11docker
  # --install:
  #   - copies x11docker and x11docker-gui to /usr/local/bin
  #   - installs icon in /usr/share/icons
  #   - creates x11docker.desktop file in /usr/share/applications
  # --update:
  #   - download and install latest version from github
  # --remove
  #   - remove installed files
  
  [ -e "/usr/local/bin" ] || error "/usr/local/bin not found on your system! Installation abort."
  export PATH="$PATH:/usr/local/bin"  # avoid bug on opensuse where root does not have this in $PATH
  
  # Prepairing
  case ${1:-} in
    --install)
      command -v x11docker > /dev/null && { error "x11docker seems to be installed already.
  Try 'x11docker --update' instead." ; }
      [ -f "./x11docker" ]             || { error "File x11docker not found in current folder.
  Try 'x11docker --update' instead." ; }
      command -v kaptain > /dev/null   || { warning "x11docker-gui needs package kaptain
  to provide a GUI, but could not find kaptain on your system. 
  Please install package kaptain if you want to use x11docker-gui.
  x11docker itself does not need it." ; }
    ;;
    --update)
      mkdir /tmp/x11docker-install && cd /tmp/x11docker-install || error "Could not create or cd to /tmp/x11docker-install"

      echo "Downloading latest x11docker version from github"
      wget https://github.com/mviereck/x11docker/archive/master.zip || error "Could not download x11docker-master from github"

      echo "Unpacking archive"
      unzip master.zip || error "Could not unzip archive"
  
      echo ""
      cd /tmp/x11docker-install/x11docker-master || error "could not cd to /tmp/x11docker-install/x11docker-master"
    ;;
  esac

  # Doing
  case ${1:-} in
    --install|--update)
      echo "Installing x11docker and x11docker-gui in /usr/local/bin"
      cp x11docker /usr/local/bin/           || error "Could not copy x11docker to /usr/local/bin"
      chmod +x /usr/local/bin/x11docker      || error "Could not set executeable bit on x11docker"
      cp x11docker-gui /usr/local/bin/  && chmod +x /usr/local/bin/x11docker-gui || warning "x11docker-gui not found"
      

      echo "Creating icon and application entry for x11docker"
      x11docker-gui --icon && {
        xdg-icon-resource install --context apps --novendor --size 72 /tmp/x11docker.png x11docker
        rm /tmp/x11docker.png
      } || warning "Could not create icon for x11docker"
      [ -e "/usr/local/bin/x11docker-gui" ] && {
        echo "[Desktop Entry]
  Version=1.0
  Type=Application
  Name=x11docker
  Comment=Run GUI applications in docker images
  Exec=x11docker-gui
  Icon=x11docker
  Categories=System
" > /usr/share/applications/x11docker.desktop
      } || warning "Did not create desktop entry for x11docker-gui"

      echo "Storing README.md and LICENSE.txt in /usr/share/doc/x11docker"
      mkdir -p /usr/share/doc/x11docker && {
        cp README.md /usr/share/doc/x11docker/
        cp LICENSE.txt /usr/share/doc/x11docker/
      } || warning "Error while creating /usr/share/doc/x11docker"
      
      echo "Installation ready: x11docker version $(x11docker --version)"
    ;;
    --remove)
      echo "removing x11docker from your system"
      [ -x /usr/local/bin/x11docker ] && {
        /usr/local/bin/x11docker --orphaned
        rm -v /usr/local/bin/x11docker
        rm -v /usr/local/bin/x11docker-gui ||:
        rm -v /usr/share/applications/x11docker.desktop ||:
        rm -R -v /usr/share/doc/x11docker ||:
        xdg-icon-resource uninstall --size 72 x11docker ||:
      } || error "/usr/local/bin/x11docker not found"
    ;;
  esac

  # Cleanup
  case ${1:-} in
    --update)
      echo "Removing downloaded files"
      cd ~
      rm -R /tmp/x11docker-install
    ;;
  esac
}
checkorphaned() {       # option --orphaned : check for non-removed containers and left cache files possibly owned by root and created by docker
  echo "x11docker will check for orphaned containers from earlier sessions.
  This can happen if docker was not closed successfully. If this is the case,
  and option --home was chosen, docker creates missing shared files as
  folders owned by root in your home cache folder. This is annoying. x11docker
  will try to find such containers and delete all x11docker cache files.
  Caution: any currently running x11docker sessions will be terminated, too.
  Please type in your password to get a current list of existing containers:"
  Orphanedcontainers=""
  Orphanedfolders=""
  cd $Cacherootfolder
  [ $? ] && [ -n "$(echo $Cacherootfolder | grep .cache/x11docker)" ] && Orphanedfolders=$(echo $(find $Cacherootfolder -mindepth 1 -maxdepth 1 -type d)) ||:
  while read -r Line ; do
    Orphanedcontainers="$Orphanedcontainers $(echo $Line | rev | cut -d ' ' -f1 | rev)"
  done < <($Getroot 'docker ps -a' | grep "x11docker_X")
  if [ -z "$Orphanedcontainers" ] && [ -z "$Orphanedfolders" ] ; then echo "No orphaned containers or cache files found. good luck!"
  else
    echo "Found orphaned containers: $Orphanedcontainers"
    echo -n "Found orphaned folders in $Cacherootfolder: " 
    for Line in $Orphanedfolders ; do echo -n "$(basename $Line) " ; done ; echo ""
    echo "Type in your password to remove orphaned containers and folders:"
    if [ -n "$Orphanedcontainers" ] && [ -n "$Orphanedfolders" ] ; then
      echo $Getroot "'docker rm -f $Orphanedcontainers ; rm -R -f -v $Orphanedfolders'"
      eval $Getroot "'docker rm -f $Orphanedcontainers ; rm -R -f -v $Orphanedfolders'"
    fi
    if [ -n "$Orphanedcontainers" ] && [ -z "$Orphanedfolders" ] ; then
      echo $Getroot "'docker rm -f $Orphanedcontainers'"
      eval $Getroot "'docker rm -f $Orphanedcontainers'"
    fi
    if [ -z "$Orphanedcontainers" ] && [ -n "$Orphanedfolders" ] ; then
      echo $Getroot "'rm -R -f -v $Orphanedfolders'"
      eval $Getroot "'rm -R -f -v $Orphanedfolders'"
    fi
  fi
  echo "Ready."
}
storepid () {           # store pids and names in file $Bgpidfile
  # store Pid and process name of background processes in file
  # $1 should be Pid, $2 should be name of process
  # for use on exit / with trap to clean up with background processes
  # this subroutine has a twin in xinitrc
  echo ${1:-} ${2:-} >> $Bgpidfile
}
finish() {              # trap routine, clean up background processes and cache
  set +x
  [ -e "$Sharefolder" ] && touch $Sharefolder/timetosaygoodbye ||:

  [ -s "$Bgpidfile" ] && {
    # check for possible remaining background processes stored in $Bgpidfile
    # double check with Pid and name; kill if process is still running
    while read -r Line ; do 
      Pid=$(echo $Line | awk '{print $1}')
      Name=$(echo $Line | awk '{print $2}')
      if [ -n "$Pid" ] && [ -n "$(ps -p $Pid | grep $Name)" ] ; then
        case $Name in
          weston|kwin_wayland) kill -s KILL $Pid ||:
          ;;
          docker) kill $Pid
            warning "Found remaining docker process. Most probably the
  X session was not closed in a clean way. Can not send TERM signal because 
  docker runs as root. Will wait up to 10 seconds for docker to finish."
            Zeit=$(date +%s)
            while [ -n "$(ps -p $Pid | grep docker)" ] ; do
              echo "waiting for docker to terminate ..."
              sleep 1
              [ 10 -lt $(echo "$(date +%s) - $Zeit" | bc) ] && break ||:
            done
            if [ -n "$(ps -p $Pid | grep docker)" ] ; then
              warning "docker didn't terminate as it should. 
  Will not clean cache to avoid file permission problems. 
  You can remove the new container with command:
docker rm -f $Containername
  Afterwards, remove cache files with:
rm -R $Cachefolder
  or let x11docker do the cleanup work for you: 
x11docker --orphaned"
              Preservecachefiles="yes"
            else
              echo "docker container terminated successfully"
            fi
          ;;
          bash) # from --exe for x11docker_CMD, see xinitrc
            pkill -KILL -P $Pid || :
          ;;
          *) warning "Found remaining background process.
  Will send signal KILL to process tree of $Line"
            pkill -KILL -P $Pid ||:
          ;;
        esac
      fi
    done < <(tac $Bgpidfile ||:)
  }
  
  sleep 0.1
  [ "$Preservecontainer" = "yes" ] && Preservecachefiles="yes"
  [ "$Preservecachefiles" = "no" ] && [ -n "$(echo $Cachefolder | grep .cache)" ] && [ -n "$(echo $Cachefolder | grep x11docker)" ] && [ "x11docker" != "$(basename $Cachefolder)" ] && rm -f -R $Cachefolder ||:
  
  exit $Exitcode
}
verlte() {              # version number checker $1 less than or equal $2
  [  "${1:-}" = "$(echo -e "${1:-}\n${2:-}" | sort -V | head -n1)" ] && return 0 || return 1
}
verlt() {               # version number checker $1 less than $2 
  [ "${1:-}" = "${2:-}" ] && return 1 || { verlte ${1:-} ${2:-} && return 0 || return 1 ; }
}
isnum() {               # check if $1 is a number
  [ "1" = "$(awk -v a="${1:-}" 'BEGIN {print (a == a + 0)}')" ]
}
writeaccess() {         # check if useruid $1 has write access to folder $2
  if read -a dirVals < <(stat -Lc "%U %G %A" ${2:-}) && (
    ( [ "$(id -u $dirVals)" == "${1:-}" ] && [ "${dirVals[2]:2:1}" == "w" ] ) ||
    ( [ "${dirVals[2]:8:1}" == "w" ] ) ||
    ( [ "${dirVals[2]:5:1}" == "w" ] && (
        gMember=($(groups ${1:-} 2>/dev/null)) &&
        [[ "${gMember[*]:2}" =~ ^(.* |)${dirVals[1]}( .*|)$ ]]
    ) ) )
  then
    return 0
  else
    [ "w" = "$(getfacl -pn "${2:-}" | grep user:${1:-}: | rev | cut -c2)" ] && return 0 || return 1   # should check for gid, too. Im too lazy.
  fi 
}
waitforfilecreation() { # similar to inotify-wait: wait up to 10s for a file to be created
  # return 1 on timeout
  # $1 file to wait for
  Zeit=$(date +%s)
  while [ ! "$(find  ${1:-} 2>/dev/null)" ] ; do
    sleep 0.2
    [ 10 -lt $(expr $(date +%s) - $Zeit) ] && return 1 ||:
  done
  return 0
}
waitforfilecontent() {  # wait for a file to be not empty
  # $1 file to look at
  Zeit=$(date +%s)
  while [ ! -s "$1" ] ; do
    sleep 0.1
    [ 5 -lt $(expr $(date +%s) - $Zeit) ] && return 1
  done
  return 0
}
waitforlogentry() {     # wait for entry in logfile
  # $1 is the application we are waiting for to be ready
  # $2 points to logfile
  # $3 keyword to wait for 
  # terminate x11docker on fail
  Zeit=$(date +%s)
  while [ -z "$(cat ${2:-} | grep "${3:-}")" ] ; do
    echo "waiting since $(expr $(date +%s) - $Zeit)s for ${1:-} to be ready..." >&2 && sleep 1
    [ 15 -lt $(expr $(date +%s) - $Zeit) ] && error "x11docker: Timeout error: ${1:-} not ready after 15 seconds." ||:
  done
}
no_xhost() {            # remove any access to X server granted by xhost
  xhost
  xhost | tail -n +2  /dev/stdin | while read -r Line ; do  # read all but the first line (header)
    xhost -$Line                                         # disable every entry
  done
  xhost -                                                # enable access control
  [ "$(xhost | wc -l)" = "1" ] || { warning "Remaining xhost permissions found on display $DISPLAY!
$(xhost)" 
  }
}

{ #### part: variables default settings

exec 3>&2                                       # second stderr to show x11docker warnings and errors from within redirected output (especially xinitrc and xtermrc)
export IFS=$' \n\t'                             # set IFS to default
[ -z "${HOME:-}" ]            && HOME=""
[ -z "${DISPLAY:-}" ]         && DISPLAY=""
[ -z "${XAUTHORITY:-}" ]      && XAUTHORITY=""
[ -z "${WAYLAND_DISPLAY:-}" ] && WAYLAND_DISPLAY=""
[ -z "${XDG_RUNTIME_DIR:-}" ] && XDG_RUNTIME_DIR=""
Exitcode="0"

Hostuser=$(id -un)

Cacherootfolder=$HOME/.cache/x11docker          # define cache folder to store temporary files
Cachefolder=""
Logfile="x11docker.log"                         # changes later to reside in $Sharefolder. On exit a copy of logfile will be placed here
Sharefolder="share"                             # subfolder for shared files
Cshare="/x11docker"                             # mountpoint of $Sharefolder in container

X11dockermode="run"                             # can be either "xonly", "run" or "exe", depends on options. while parsing, xonly changes to run or exe
Dockeroptions=""                                # options for docker without image name/image args
X11dockerargs="$*"                              # arguments for x11docker
Imagename=""                                    # name of image to run
Imagecommand=""                                 # image command [+args]
Hostexe=""                                      # can contain host executable
Containername=""                                # name of container set by x11docker to make --orphaned able to find orphaned containers

Dockerip=""                                     # IP adress of docker interface
Dockeriprange=""                                # IP adress of docker interface including suffix /16
Dockerpid=""                                    # process ID of docker container
Containerip="containerIP"                       # IP adress of container
Dockerrc=dockerrc

Imagecommandscript=x11docker_CMD                # name of shared script containing imagecommand
Createsudouser=createsudouser                   # script to create sudo user (option --sudouser)
Xinitrc=xinitrc                                 # file to store xinitrc commands
Xinitlogfile=xinit.log                          # file to log output of X server
Xtermrc=xtermrc                                 # file to store xtermrc commands
Xtermlogfile=xterm.log                          # file to log output of xterm
Dockerlogfile=docker.log                        # file to log output of docker
Dockerpidfile=docker.pid                        # file to store process ID of docker
Bgpidfile=backgroundpids                        # file to store PidS and names of background processes that shut be killed on exit
Compositorlogfile=compositor.log                # file to log output of Weston or KWin 
Xpraserverlogfile=xpraserver.log                # logfile for xpra server
Westonini=weston.ini                            # config file for weston
Customwestonini=""                              # custom config file for weston

Xcommand=""                                     # command to start X server
Autochooseserver="yes"                          # option '--auto': automated choosing server
Xauthentication="yes"                           # option '--no-auth' use cookie authentication yes/no
Xserver=""                                      # X server to use
Newdisplay=""                                   # new display for new X server
Newdisplaynumber=""                             # Like Newdisplay, but without ':'
Newxsocket=""                                   # New X socket
Newxenv=""                                      # environment variables for new X server DISPLAY XAUTHORITY XSOCKET WAYLAND_DISPLAY
Xserveroptions=""                               # X extensions to enable and other X options

Hostdisplay=$DISPLAY                            # store environment variable containing name of current display
Hostxauthority=$XAUTHORITY                      # store environment variable pointing to X authority cookies
Hostdisplaynumber="$(echo $Hostdisplay | cut -d: -f2 | cut -d. -f1)"  # display number without ":" and ".0"
Hostxsocket="/tmp/.X11-unix/X$Hostdisplaynumber" # X socket from host, needed for --hostdisplay and --virtualgl
Hostxenv="DISPLAY=$Hostdisplay XAUTHORITY=$Hostxauthority XSOCKET=$Hostxsocket" 

Xservercookie=Xservercookie                     # file to store new X server cookies
Xclientcookie=Xclientcookie                     # file to store new X client cookies
#Newxlock=""                                     # .Xn-lock - exists for running X server with socket n
Newxvt=""                                       # Virtual console to use for core new X server (>7)

# options for different X servers
Xserveroptions=""                               # options for new X server
Xpraoptions=""                                  # options for xpra server and client
Xprashm=""                                      # content XPRA_XSHM=0 disables usage of MIT-SHM in xpra
Xpramode="start"                                # "start" = single applications, "start-desktop" = desktop mode like Xephyr
Nxagentoptions=""                               # options for nxagent
Xephyroptions=""                                # options for Xephyr
Xephyrglamor="yes"                              # former option '--glamor': enable Xephyr glamor 2D acceleration (deprecated, now always yes)
Xephyrresize="no"                               # option '--resizeable': make Xephyr window resizeable
Westonoptions=""                                # options for Weston
Scaling="1"                                     # option --scale: Scaling factor for xpra and weston
Rotation="0"                                    # option --rotate: Rotation for --weston and --weston-xwayland 0/90/180/270/flipped/flipped-90/..
Dpi=""                                          # option --dpi: dots per inch to tell the clients.
Outputcount="1"                                 # option --output-count, quantum of virtual screens for Weston and Xephyr

# Screensize for windowed servers and for --xdummy
Screensize=""                                   # option --size  XxY
Xaxis=""                                        # virtual screen width
Yaxis=""                                        # virtual screen height
Modeline=""                                     # screen modeline, see "man cvt"
Fullscreen="no"                                 # option '-f, --fullscreen': use fullscreen mode (Xephyr only)

# Wayland and Weston
Waylandsocket=""                                # Wayland socket for Xwayland in weston
Waylandtoolkitenv=("XDG_SESSION_TYPE=wayland GDK_BACKEND=wayland QT_QPA_PLATFORM=wayland-egl CLUTTER_BACKEND=wayland SDL_VIDEODRIVER=wayland ELM_DISPLAY=wl ELM_ACCEL=opengl ECORE_EVAS_ENGINE=wayland_egl")
Sharewayland="no"                               # option --sharewayland: Share wayland socket and WAYLAND_DISPLAY
Setwaylandenv="no"                              # option --setwaylandenv: Set environment variables $Waylandtoolkitenv
Compositorcommand=""                            # command to start Weston or KWin
Compositorpid=""                                # pid of weston or kwin
Westonoutput=""                                 # Xn, WLn or monitor identifier

Terminal=""                                     # Terminal to use for password prompt
Terminallist=""                                 # list of possible terminals, only a few work on wayland

Windowmanager=""                                # option '-w, --wm': window manager to use. if not given but needed, autodetection is used
Shareclipboard="no"                             # option '-c, --clipboard' enable clipboard sharing
Shareclipboardscript="clipboard.bash"           #    "              "      script used for text clipboard sharing
Showdisplayenvironment="no"                     # option -E, --env: Show environment variables of new display

Adduserhome="no"                                # option '-m, --home' (or '--homedir'): share a folder ~/.local/share/x11docker/Imagename with created container
Adduserhomefolder=""                            #   "        "   : path to shared folder. 
Sudouser="no"                                   # option --sudouser: Create user with sudo permissions without a password
Benutzer=""                                     # option --user: container user. Default: same as host user.
Benutzeruid=""                                  # user id of container user
Benutzergid=""                                  # group id of container user
Benutzerhome=""                                 # home folder of container user
Benutzerpasswdentry=""                          # entry in /etc/passwd of container user
Etcpasswd=passwd                                # created /etc/passwd for container
#Etcgroup=group
Capdropall="yes"                                # option --cap-default: (don't) drop all container capabilities
Sharevolumes=""                                 # option --volume: host folders to share

Pulseaudiotcpport=""                            # option '--pulseaudio': pulseaudio tcp port to use
Pulseaudio="no"                                 #   "                    use pulseaudio yes/no
Pulseaudiomoduleid=""                           #   "                    number of customized pulseaudio tcp module, output of pactl

Orphanedcheck="no"                              # option '--orphaned': check for non-removed containers and maybe root-owned files in cache
Createdesktopstarter="no"                       # option '--starter': create desktop starter and exit yes/no
Installermode=""                                # options --install/--update/--remove

Allowroot="no"                                  # option '--root': allow root to run x11docker
Getroot="su -c"                                 # option '-s, --sudo' will add 'sudo' to command to get root privileges, --no-passwd sets it to 'bash -c'
Verbose="no"                                    # option '-v, --verbose': if "yes", be verbose
Preservecachefiles="no"                         # if yes, dont delete cache files
Preservecontainer="no"                          # option '-p, --ps': if yes, preserve container instead of removing it with 'docker run --rm'
Gpu="no"                                        # option '--gpu': Use hardware accelerated OpenGL, share files in /dev/dri
Customenvironment=""                            # option '--env': set custom environment variables 
Dbuslaunch="no"                                 # option '--dbus': run image command with dbus-launch
Shareipc="no"                                   # option --ipc, set --ipc=host.
Sharenet="no"                                   # option --net, set --ipc=net

Trusted="yes"                                   # create trusted or untrusted cookies, see --trusted and --untrusted. Important for --hostdisplay and --kwin-native
Noxhost="no"                                    # option '--no-xhost': if yes, disable all X server access granted by xhost
Xhost=""                                        # option '--xhost': xhost + on new X server
Forcetrusted="no"                               # option --trusted: enforce trusted cookies for --hostdisplay and --kwin-native

# some temporary or loop variables
Pid=""
Name=""
Zeit=""
Line=""
Count=""

# these window managers are known to work well with x11docker (alphabetical order)(excluding $Wm_not_recommended and $Wm_ugly):
Wm_good="amiwm blackbox cinnamon compiz ctwm enlightenment fluxbox flwm fvwm"
Wm_good="$Wm_good jwm kwin lxsession mate-session mate-wm marco metacity muffin mutter notion olwm olvwm openbox ororobus pekwm"
Wm_good="$Wm_good sawfish twm wmaker w9wm xfwm4"
# these wm's are recommended, lightweight AND desktop independent. best first:
Wm_recommended_desktop_light="flwm blackbox fluxbox jwm mwm wmaker afterstep amiwm fvwm ctwm pekwm olwm olvwm openbox lxsession" 
# these wm's are recommended, heavy AND desktop independent. best first:
Wm_recommended_desktop_heavy="lxsession mate-session"
# these wm's are recommended and lightweight, but cannot show desktop options. best first:
Wm_recommended_nodesktop_light="sawfish xfwm4 metacity marco mate-wm "
# these wm's are recommended and heavy, but cannot show desktop options (especially exiting themselves). best first:
Wm_recommended_nodesktop_heavy="muffin mutter kwin cinnamon gnome-shell compiz"
# these wm's are not really useful (please don't hit me) (best first):
Wm_not_recommended="awesome enlightenment evilwm herbstluftwm i3 lwm matchbox miwm spectrwm subtle windowlab wmii wm2"
# these wm's cannot be autodetected by wmctrl if they are already running
Wm_nodetect="aewm aewm++ afterstep awesome ctwm mwm miwm olwm olvwm sapphire windowlab wm2 w9wm"
# these wm's can cause problems (they can be beautiful, though):
Wm_ugly="icewm sapphire aewm aewm++"
# these wm's doesn't work:
Wm_bad="clfswm tinywm tritium"
# List of all working window managers, recommended first: (excluding $Wm_bad)
Wm_all="$Wm_recommended_desktop_light $Wm_recommended_nodesktop_light $Wm_recommended_desktop_heavy $Wm_recommended_nodesktop_heavy $Wm_good $Wm_ugly $Wm_not_recommended $Wm_nodetect"
}

{ #### part: parsing cli options
  Shortoptions="aAcdeEfgGhHKml:MnNoOpPrsSutvw:WxXyY"
  Longoptions="auto,x,X,xpra,xephyr,x11,xorg,hostdisplay,xwayland,weston-xwayland,xpra-xwayland,nxagent"                   # X servers
  Longoptions="$Longoptions,weston,hostwayland,kwin,kwin-xwayland,kwin-native,xdummy,xvfb,nothing"                         # more X/Wayland servers
  Longoptions="$Longoptions,wm:,exe,xonly"
  Longoptions="$Longoptions,fullscreen,resizeable,size:,glamor,scale:,rotate:,dpi:,output-count:,gpu"                      # screen options
  Longoptions="$Longoptions,user:,home,clipboard,pulseaudio"                                                               # comfort options
  Longoptions="$Longoptions,sudo,verbose,nopwd,no-password,no-xhost,trusted,untrusted,dbus,waylandenv"                     # advanced options
  Longoptions="$Longoptions,starter,orphaned,license,licence,help,version,install,update,remove"                           # special options without starting X server
  Longoptions="$Longoptions,xhost:,no-auth,vt:,display:,env:,showenv,sharewayland,root,ipc,net,ps,cache,cap-default,sudouser"  # developer options
  Longoptions="$Longoptions,cachedir:,homedir:,westonini:,sharedir:"                                                       # developer options
  Longoptions="$Longoptions,hostuser,desktop,xsocket,tcp,tcpxsocket,virtualgl,glamor,xpra-image,xpra-attach,xorg-image,xdummy-image,volume:,xhost+"  # deprecated
  Parsedoptions="$(getopt --options $Shortoptions --longoptions $Longoptions --name "$0" -- "$@" 2>/tmp/x11docker_parsererror)"
  [ -e /tmp/x11docker_parsererror ] && Parsererror=$(cat /tmp/x11docker_parsererror) && rm /tmp/x11docker_parsererror
  [ -n "$Parsererror" ] && error "$Parsererror"
  
  eval set -- $Parsedoptions

  [ "$*" = "-h --" ] &&    usage         && exit 0         # catch single -h for usage info, otherwise it means --hostdisplay
  
  while [ -n "${1:-}" ] ; do
    case "${1:-}" in
      --help)              usage         && exit 0  ;;     # show help/usage and exit
      --license|--licence) license       && exit 0  ;;     # show MIT license and exit
      --version)           echo $Version && exit 0  ;;     # output version number and exit

      -e|--exe)        X11dockermode="exe"   ;;            # execute application from host instead of running docker image
         --xonly)      X11dockermode="xonly" ;;            # only create X erver

         --auto)                                                 Autochooseserver="yes" ;; # use xpra or Xephyr, Xorg or hostdisplay, --xpra-xwayland or --weston-xwayland
      -a|--xpra)                     Xserver="Xpra" ;            Autochooseserver="no"  ;; # use xpra on host
      -y|--xephyr)                   Xserver="Xephyr" ;          Autochooseserver="no"  ;; # use Xephyr
      -x|--xorg|--x11)               Xserver="Xorg" ;            Autochooseserver="no"  ;; # use core Xorg
      -h|-0|--hostdisplay)           Xserver="Hostdisplay" ;     Autochooseserver="no"  ;; # use host display :0 with shared X socket
      -X|--xwayland)                 Xserver="Xwayland" ;        Autochooseserver="no"  ;; # Xwayland needs already running Wayland
      -A|--xpra-xwayland)            Xserver="Xpra-Xwayland" ;   Autochooseserver="no"  ;; # Xpra with Xwayland
      -Y|--weston-xwayland)          Xserver="Weston-Xwayland" ; Autochooseserver="no"  ;; # Weston-Xwayland as Wayland compositor with Xwayland, runs in X or standalone from console
         --xdummy)                   Xserver="Xdummy" ;          Autochooseserver="no" ; Showdisplayenvironment="yes" ;;  # use Xdummy. Invisible on host. For custom network setups with VNC or xpra
         --xvfb)                     Xserver="Xvfb" ;            Autochooseserver="no" ; Showdisplayenvironment="yes" ;;  # use Xvfb. Invisible on host. For custom network setups with VNC or xpra
         --nothing)                  Xserver="Nothing" ;         Autochooseserver="no"  ;; # Do not provide any X nor Wayland
      -W|--weston)                   Xserver="Weston" ;          Autochooseserver="no"  ;; # Wayland in Weston only, no X
      -H|--hostwayland)            [ "$Xserver" = "Hostdisplay" ] || Xserver="Hostwayland" # share host wayland. Allow coexistence with option --hostdisplay
                                     Sharewayland="yes" ;        Autochooseserver="no"  ;;
      -K|--kwin)                     Xserver="Kwin" ;            Autochooseserver="no"  ;;
         --kwin-xwayland)            Xserver="Kwin-Xwayland" ;   Autochooseserver="no"  ;;
      -N|--kwin-native)              Xserver="Kwin-Native" ;     Autochooseserver="no"     # Seamless X and Wayland together
                                     Sharewayland="yes" ; Setwaylandenv="yes"; Dbuslaunch="yes" ;;
      -n|--nxagent)                  Xserver="Nxagent" ;         Autochooseserver="no"  ;;
      
      -g|--gpu)        Gpu="yes" ;;                        # share files in /dev/dri
      -E|--waylandenv) Setwaylandenv="yes" ;;              # set environment variables forcing toolkits like QTK and QT to use wayland

      -w|--wm)         case ${2:-} in
                         ""|"n"|"none") Windowmanager="none" ;;
                         "m"|"auto")    Windowmanager="auto" ;;
                         *)             Windowmanager=${2:-} ;;
                       esac
                       shift ;;
      --desktop)       [ -z "$Windowmanager" ] && Windowmanager="none" ;;
       
      -f|--fullscreen) Fullscreen="yes"  ;;                # fullscreen mode for Xephyr and Weston
         --size)       Screensize="${2:-}" ;  shift ;;     # set screen size for Xephyr, Xdummy and Weston
      -r|--resizeable) Xephyrresize="yes"  ;;              # make Xephyr window resizeable
      -l|--scale)      Scaling=${2:-} ; shift ;;
         --rotate)     Rotation=${2:-} ; shift ;;
         --dpi)        Dpi=${2:-} ; shift ;;
         --output-count) Outputcount="${2:-}" ; shift ;;

      -o|--no-xhost)   Noxhost="yes"  ;;                   # disable any access granted by xhost
         --trusted)    Forcetrusted="yes"  ;;              # force trusted cookies for --hostdisplay and --kwin-native
      -t|--untrusted)  Trusted="no"  ;;                    # create untrusted cookies

         --user)       Benutzer="${2:-}"  ; shift ;;       # set container user instead of host user
      -m|--home)       Adduserhome="yes" ;;                # share folder ~/x11docker/Imagename with container
      -c|--clipboard)  Shareclipboard="yes"  ;;            # share host clipboard with dockered applications (xpra only)
      -p|--pulseaudio) Pulseaudio="yes"  ;;                # enable pulseaudio connection / sound support over tcp

      -v|--verbose)    Verbose="yes"  ;;                   # be verbose
      -P|--nopwd|--no-password) Getroot="bash -c" ;;       # Don't ask for password
      -s|--sudo)       Getroot="sudo su -c"  ;;            # use sudo to run 'su -c docker ...'
      
      ##### some developer options
         --sudouser)   Sudouser="yes" ;;                   # give container user sudo without password
         --showenv)    Showdisplayenvironment="yes" ;;     # output of display number and cookie file on stdout. Catch with  ~$ read xdenv < <(x11docker --showenv)
         --env)        Customenvironment="$Customenvironment\n${2:-}" ; shift ;;   # set custom environment variables
      -d|--dbus)       Dbuslaunch="yes" ;;                 # run command with dbus-launch

         --vt)         Newxvt="vt${2:-}" ;       shift ;;  # set virtual console to use
         --display)    Newdisplaynumber=${2:-} ; shift ;;  # set display to use

         --xhost)      Xhost="xhost $2" ; shift ;;         # set 'xhost +' on both X servers
         --xhost+)     Xhost="xhost +"  ;;                 # set 'xhost +' on both X servers (deprecated, please use --xhost N)
         --no-auth)    Xauthentication="no" ;;             # disable cookie authentication

         --ps)         Preservecontainer="yes"  ;;         # preserve container instead of removing it with 'docker run --rm'
         
         --root)       Allowroot="yes" ;;                  # allow x11docker to be run as root

      -S|--sharewayland) Sharewayland="yes" ;;             # Share wayland socket
      
         --ipc)        Shareipc="yes" ;;                   # docker run option --ipc=host
         --net)        Sharenet="yes" ;;                   # docker run option --net=host
         --cap-default) Capdropall="no" ;;                 # don't use --cap-drop=ALL
         
         --homedir)    Adduserhomefolder="${2:-}" ; Adduserhome="yes" ; shift ;; # set host folder to share as home folder instead of ~/x11docker/NAME
         --cachedir)   Cacherootfolder="${2:-}" ; shift ;; # set cache folder instead of default $Cacherootfolder
         --sharedir)   Sharevolumes="$Sharevolumes\n${2:-}" ; shift ;; # share host folder at same location with rw access
         
         --westonini)  Customwestonini="${2:-}" ; shift ;; # custom weston.ini

      ##### special options not starting X or docker
      --starter)       Createdesktopstarter="yes" ;;       # create desktop starter and exit
      --orphaned)      Orphanedcheck="yes"  ;;             # check for orphaned containers and files owned by root, created by docker)
      --install|--update|--remove) Installermode="${1:-}" ;;   # installer

      ##### depracated
      --virtualgl|--tcpxsocket|--xsocket|--tcp|--cache)             warning "Option ${1:-} is deprecated and has no effect now." ;; 
      --xpra-image|--xpra-attach|--xorg-image|--xdummy-image)         error "Option ${1:-} no longer included. Please use x11docker version 2.5 instead." ;;
      -u|--hostuser)                                                warning "Option --hostuser is obsolete. x11docker now creates 
  a container user similar to host user as default.
  To run as another container user, use option --user." ;;
      --volume)     Sharevolumes="$Sharevolumes\n${2:-}" ; shift ;  warning "Option --volume is now called --sharedir
  to avoid confusion with divergent docker run option --volume.
  Please use --sharedir instead." ;;

      ##### docker options / image
      --) shift
        while [ "${1:-}" ] ; do
          [ -z "$Imagecommand" ] && [ "$(echo "${1:-}" | cut -c1)" = "-" ]  && Dockeroptions="$Dockeroptions ${1:-}"
          [ -z "$Imagecommand" ] && [ "$(echo "${1:-}" | cut -c1)" != "-" ] && Imagecommand="${1:-}" && shift
          [ -n "$Imagecommand" ] && Imagecommand="$Imagecommand ${1:-}"     && Imagecommand="${Imagecommand## }"
          shift ||:
        done
        Imagename=$(echo $Imagecommand | cut -d ' ' -f1)
        Imagecommand=$(echo $Imagecommand | cut -s -d ' ' -f2-)
      ;;
      *) error "Unknown option ${1:-}" ;;
    esac  
    shift ||:
  done
}

{ #### part: some init
  trap finish EXIT
  
  ## options --install --update --remove
  [ -n "$Installermode" ] && {
    [ "0" = "$(id -u)" ] || { error "Must run as root to install, update or remove x11docker." ; }
    installer $Installermode
    exit
  }
  
  ## option --orphaned : check for non-removed containers and left cache files possibly owned by root and created by docker
  [ "$Orphanedcheck" = "yes" ] && { checkorphaned ; exit ; }
  
  # check if script runs as root, if yes, show error & exit ( except if allowed with option --root)
  [ "$Allowroot" = "no" ] && [ "0" = "$(id -u)" ] && error "x11docker should not run as root. Every child process of 
  the new X server would get root privileges, too. To run docker, you will be
  prompted for your root password only for this one docker command.
  On systems without a root password, like Ubuntu, choose option '-s, --sudo'
  If you want to allow root to run x11docker, use option '--root'"
  [ "0" = "$(id -u)" ] && Getroot="bash -c"

  # if desktop starter should be created, check if xdg-user-dir is installed
  if [ "$Createdesktopstarter" = "yes" ] ; then
    command -v "xdg-user-dir" >/dev/null 2>&1 || { error "could not find xdg-user-dir.
  x11docker needs it to create a desktop starter. Please install xdg-utils with
  command:
  apt-get install xdg-utils" ; }
  fi
  
  # option '--pulseaudio': find a free tcp port
  [ "$Pulseaudio" = "yes" ] && {
    read -r Lowerport Upperport < /proc/sys/net/ipv4/ip_local_port_range
    while : ; do
      Pulseaudiotcpport="$(shuf -i $Lowerport-$Upperport -n 1)"
      ss -lpn | grep -q ":$Pulseaudiotcpport " || break
    done
  }
  
  # check whether x11docker runs on tty1-tty6
  # console users have to use their own tty for X since debian 9
  if [ -n "$(tty | grep tty)" ] && [ "$Newxvt" = "" ] ; then Newxvt="vt$(tty | cut -c9-)" ; fi
  
  # Weston and Xwayland need XDG_RUNTIME_DIR 
  [ -z "$XDG_RUNTIME_DIR" ] && [ -e "/run/user/$(id -u)" ] && export XDG_RUNTIME_DIR="/run/user/$(id -u)" 
  [ -z "$XDG_RUNTIME_DIR" ] && {
    mkdir -p /tmp/XDG_RUNTIME.x11docker.$(id -u)
    export XDG_RUNTIME_DIR=/tmp/XDG_RUNTIME.x11docker.$(id -u)
    chmod 700 $XDG_RUNTIME_DIR
  }
  
  [ "$Getroot" = "su -c" ] && case $(lsb_release -is) in
    Ubuntu|Sparky|LinuxMint) warning "You may need option --sudo if root has no password for su." ;;
  esac

  [ -n "$Customwestonini" ] && [ ! -e "$Customwestonini" ] && { 
    warning "Custom weston.ini (option --westonini) not found."
    Customwestonini=""
  }
}

{ #### part: check X server
  ## option '--auto': Try to automatically choose best matching and available X server
  if [ "$Autochooseserver" = "yes" ] ; then
    Xserver="Xpra"
    [ -n "$WAYLAND_DISPLAY" ] && Xserver="Xpra-Xwayland"
    [ "$Gpu" = "yes" ]        && Xserver="Xpra-Xwayland"
    [ -n "$Windowmanager" ]   && Xserver="Xephyr"
    [ -z "$Imagename" ]       && Xserver="Xephyr"
    [ "$Xserver" = "Xephyr" ] && { command -v "Xephyr" >/dev/null 2>&1 || Xserver="Weston-Xwayland" ; } # try weston if Xephyr is missing
    [ "$Gpu" = "yes" ] && [ "$Xserver" = "Xephyr" ]  && Xserver="Weston-Xwayland"

    if tty | grep -q tty ; then
      Xserver="Weston-Xwayland"
      command -v "Weston-Xwayland" >/dev/null 2>&1 || Xserver="Xorg"  # if running on tty1-tty6, only weston or core X will work
    else
      [ -z "$Hostdisplay" ]   && Xserver="Weston-Xwayland"
    fi
    #command -v "nxagent" >/dev/null && {   # currently disabled as nxagent is experimental
    #  case $Xserver in
    #    Xpra|Xephyr) Xserver="Nxagent" ;;
    #  esac
    #} || {
      case $Xserver in
        Xpra|Xpra-Xwayland) ;;
        *) [ -z "$Windowmanager" ] && Windowmanager="auto" ;;
      esac
    #}
  fi

  ## check if chosen X server is installed
  #
  case $Xserver  in
    Xdummy|Xvfb) 
      [ "$Gpu" = "yes" ] && { 
        warning "Using special setup with Weston, Xwayland and xdotool
  instead of $Xserver to allow GPU access."
        Xserver="Xdummy-Xwayland" 
      }
    ;;
  esac
  [ "$Xserver" = "Xdummy" ] && [ "$(lsb_release -is)" = "Ubuntu" ] && [ "$(lsb_release -rs)" = "16.04" ] && {
    warning "Ubuntu 16.04 is known to have problems with Xdummy.
  You can try Xvfb instead (option --xvfb)."
  }
  [ "$Xserver" = "Xvfb" ] && { 
    command -v Xvfb >/dev/null || { warning "Xvfb not found.
  Please install package 'xvfb' to use option --xvfb.
  Fallback: Will try to use Xdummy."
      Xserver="Xdummy"
    }
  }
  [ "$Xserver" = "Hostwayland" ] && [ -z "$WAYLAND_DISPLAY" ] && {
    warning "WAYLAND_DISPLAY is not set. 
  Fallback: Will try to run Weston"
    Xserver="Weston"
  }
  case $Xserver in
    Xpra-Xwayland|Xdummy-Xwayland)
      command -v "xdotool" >/dev/null || { [ -z "$WAYLAND_DISPLAY" ] && warning "Could not find xdotool to autohide weston window.
  You will have a bothersome weston window. 
  To avoid this, please install package 'xdotool'" 
      } ;;
  esac
  [ "$Xserver" = "Nxagent" ] && {
    command -v "nxagent" >/dev/null 2>&1 || {  
      [ -n "$Windowmanager" ] && Xserver="Xephyr" || Xserver="Xpra"
      warning "could not find executable 'nxagent'. 
  Try 'apt-get install nxagent' to install nxagent.
  Fallback: Will try to use $Xserver"
    }
  }
  case $Xserver in
    Xpra|Xpra-Xwayland)
      verlt "$(xpra --version | cut -d' ' -f2)" "v1.0" && {
        warning "Your xpra version is out of date. It is recommended to install
  a recent version from www.xpra.org, but at least xpra v1.0."
      }
      command -v "xpra" >/dev/null 2>&1 || { warning "could not find executable 'xpra'. 
  Try 'apt-get install xpra' to install xpra.
  Fallback: x11docker will try to use Xephyr (option --xephyr)"
        Xserver="Xephyr" 
        Windowmanager="auto"
      } 
    ;;
  esac
  case $Xserver in 
    Xpra)
      [ "$(lsb_release -is)" = "Ubuntu" ] && {
        command -v Xvfb >/dev/null || { warning "On Ubuntu you need to install
  package xvfb to use $Xserver. Try 'apt-get install xvfb' to install Xvfb.
  Fallback: Will try to use Xephyr"
          Xserver="Xephyr"
        }
      }
    ;;
  esac
  [ "$Xserver" = "Xwayland" ] && [ -z "$WAYLAND_DISPLAY" ] && {
    warning "WAYLAND_DISPLAY is not set. 
  Fallback: Will try to run Weston-Xwayland"
    Xserver="Weston-Xwayland"
  }
  case $Xserver in
    Kwin|Kwin-Xwayland|Kwin-Native) command -v kwin_wayland >/dev/null || { warning "kwin_wayland not found.
  Fallback: Will try to use Weston instead"
      [ "$Xserver" = "Kwin" ] && Xserver="Weston" || Xserver="Weston-Xwayland" 
    } ;;
  esac
  case $Xserver in
    Weston|Weston-Xwayland|Xdummy-Xwayland)
      command -v "weston" >/dev/null 2>&1 || { warning "could not find executable 'weston'. 
  Try 'apt-get install weston' to install weston.
  Fallback: x11docker will try to use Xephyr (option --xephyr)"
        Xserver="Xephyr"
      } ;;
  esac
  case $Xserver in
    Xwayland|Weston-Xwayland|Xpra-Xwayland|Kwin-Xwayland|Xdummy-Xwayland)
      command -v "Xwayland" >/dev/null 2>&1 || { warning "could not find executable 'Xwayland'. 
  Try 'apt-get install xwayland' to install xwayland.
  Fallback: x11docker will try to use Xephyr (option --xephyr)"
      Xserver="Xephyr" 
    } ;;
  esac
  [ "$Xserver" = "Xephyr" ] && {
    command -v "Xephyr" >/dev/null 2>&1 || { warning "could not find executable 'Xephyr'. 
  Try 'apt-get install xserver-xephyr' to install Xephyr.
  Fallback: x11docker will try to use xpra in desktop mode (--xpra with --wm)"
    [ -z "$Windowmanager" ] && Windowmanager="none"
    Xserver="Xpra"
    }
  }
  [ "$Xserver" = "Xpra" ] && { command -v "xpra" >/dev/null 2>&1 || { warning "could not find executable 'xpra'. 
  Try 'apt-get install xpra' to install xpra.
  Fallback: x11docker will try to use core X (option --xorg)"
      Xserver="Xorg"
    }
  }
  case $Xserver in 
    Xorg|Xdummy)
      command -v "X" >/dev/null 2>&1 || { error "Could not find executable 'X'. 
  Try 'apt-get install xorg' to install X server." 
      } ;;
  esac
  [ "$Xserver" = "Xorg" ] && {
    # if x11docker is running from within an X server, check if user is allowed to run a new core X server
    if [ -z "$Newxvt" ] ; then
      if [ ! -e "/etc/X11/Xwrapper.config" ] || [ -z "$(grep "allowed_users=anybody" </etc/X11/Xwrapper.config)" ] ; then
        warning "You are not allowed to start a second X server. As a default 
  configuration of X, only root or console users can start a second X server.
  
  You can switch to one of tty1...tty6 with <STRG><ALT><F1>...<F6>
  and start x11docker there. (Fails on Ubuntu 16.04 due to Ubuntu bug.) 
  
  Look at 'x11docker --help' how to setup Xwrapper.config to be able to run
  a second core X server from within an already running X session.

  Fallback: Using host display without container isolation"
      Xserver="Hostdisplay"
      fi
    fi
  }
  
  #### check multiple option interferences

  case $Xserver in
    Xpra|Xephyr|Hostdisplay|Xpra-Xwayland|Nxagent) [ -z "$Hostdisplay" ] && error "You only can run $Xserver within an already running X server."  ;;
  esac
  
  [ "$Xserver" = "Xpra" ] || [ "$Xserver" = "Xpra-Xwayland" ] && {
    xmessage -timeout 5 "Please be patient, xpra will start soon ..." -default okay &
    case $Windowmanager in
      "") Xpramode="start" ;;
      *)  Xpramode="start-desktop" ;;
    esac
  }
 
  [ "$Xserver" = "Nxagent" ] && { 
    case $Windowmanager in
      "") Nxagentoptions="-R" ;; # rootless mode, similar to xpra
      *)  Nxagentoptions="-D" ;; # desktop mode,  similar to xephyr. including wm="none"
    esac
  }
  
  [ "$Gpu" = "yes" ] && { 
    warning "Option --gpu degrades container isolation.
  Container gains access to GPU hardware."
    case $Xserver in
      Xpra|Xdummy|Nxagent|Xephyr) warning "$Xserver does not support hardware acceleration.
  Fallback: using software rendering, disabling option --gpu" 
        Gpu="no" ;;
    esac
  }
  
  case $Xserver in
    Hostdisplay|Kwin-Native) Trusted="no" ;;
  esac
  [ "$Forcetrusted" = "yes" ] && Trusted="yes"

  case $Xserver in
    Hostdisplay|Kwin-Native)
      [ "$Shareipc" = "no" ] && [ "$Gpu" = "yes" ] && {
        warning "To allow GPU acceleration (option --gpu) with $Xserver,
  x11docker will share host resources with insecure option --ipc 
  and allow trusted cookies with option --trusted."
        Shareipc="yes"
        Trusted="yes"
      }
      [ "$Shareipc" = "yes" ] && [ "$Xserver" = "Kwin-Native" ] && Trusted="yes"
      [ "$Trusted" = "yes" ] && [ "$Shareipc" = "no" ] && [ "$X11dockermode" = "run" ] && warning "You may experience rendering issues and RAM access failures.
  x11docker can not disable MIT-SHM extension with $Xserver.
  Either do not use --trusted, or use isolation breaking option --ipc."
      [ "$Trusted" = "no" ] && warning "$Xserver runs with untrusted cookies restricting
  access to X resources. Some applications may misbehave, especially those 
  needing OpenGL. Also, some keys like AltGr  may not work. 
  (Insecure options  --trusted, --ipc or --gpu change this.) 
  It is recommended to use another X server option."
    ;;
  esac
  
  [ "$Shareclipboard" = "yes" ] && { 
    [ "$Trusted" = "no" ] && warning "Sharing clipboard does not work with untrusted cookies."
    case $Xserver in
      Weston|Kwin) warning "Sharing clipboard with $Xserver is not supported" ;;
      Hostwayland) warning "Sharing clipboard may or may not work.
  Cannot enable or disable it, it depends on your Wayland compositor." ;;
    esac
  }
  
  
  [ "$Xserver" = "Hostdisplay" ] && {
    [ "$Trusted" = "no" ] && {
      warning "Option --hostdisplay provides only low container isolation!
  Restricting X access with untrusted cookies. Some programs wont like that.
  You can enforce trusted cookies with option --trusted, but then you risk
  RAM access failures due to missing MIT-SHM. Or you can break container
  isolation with option --ipc.
  It is recommended to use another X server option."
    } || {
      warning "Option --hostdisplay with trusted cookies provides 
      QUITE BAD CONTAINER ISOLATION !
  Keylogging and controlling host applications is possible!"
    }
    [ "$Autochooseserver" = "yes" ] && [ "$Windowmanager" = "none" ] && error "Can not avoid to use host window manager (--wm=none)
  along with option --hostdisplay. Won't do this in auto mode as the result may
  be strange. (Can be interesting though, having two overlapping desktops.)
  Install Xephyr or nxagent, or explicitly choose --hostdisplay."
  }
  
  [ "$Shareipc" = "yes" ] && warning "SECURITY RISK!
  Option --ipc breaks down container isolation!"
  [ "$Sharenet" = "yes" ] && warning "SECURITY RISK: 
  Option --net breaks down container isolation!"
  
  [ "$Fullscreen" = "yes" ] && {
    case $Xserver in
      Xephyr|Weston|Weston-Xwayland|Nxagent|Xdummy|Xdummy-Xwayland|Xvfb) ;;
      *) warning "$Xserver does not support option --fullscreen" ;;
    esac
  }
  
  [ "$Scaling" != "1" ] && {
    case $Xserver in
      Weston|Weston-Xwayland)
        [[ $Scaling =~ ^[1-9]$ ]] || {
          warning "The scale factor for $Xserver must be one of 1 2 3 4 5 6 7 8 9
  Fallback: setting option --scale=1"
          Scaling="1"
        }
      ;;
      Xpra|Xpra-Xwayland)
        isnum $Scaling || {
          warning "Option --scale needs a number. '$Scaling' is not allowed.
  Fallback: setting option --scale=1"
          Scaling="1"
        }
        verlt "$(xpra --version | cut -d' ' -f2)" "v0.16" && {
          warning "Your xpra version is too old and does not support --scale.
  You need at least xpra version 0.16"
          Scaling="1"
        }
      ;;
      *) warning "$Xserver does not support option --scale" ; Scaling="1" ;;
    esac
    case $Xserver in
      Weston-Xwayland) warning "Weston does not work well with Xwayland in scaled mode.
  In summary, Xwayland does not get the right screen resolution from Weston.
  Try out if it works for you. Otherwise, you can combine 
  --xpra-xwayland --wm=none for better desktop scaling support." 
      ;;
      Xpra-Xwayland)
        [ "1" = "$(awk -v a="$Scaling" 'BEGIN {print (a < 1)}')" ] && {
          command -v weston >/dev/null || { 
            warning "$Xserver needs weston for scale factor smaller than 1.
  Fallback: setting --scale=1"
            Scaling="1"
          }
        }
      ;;
    esac
  }
  
  case $Xserver in
    Weston|Kwin|Hostwayland)
      [ "$Dbuslaunch" = "no" ] || [ "$Setwaylandenv" = "no" ] && warning "You are running a pure Wayland environment.
  X applications without Wayland support will fail.
  QT5 / KDE applications also need options --dbus --waylandenv"
      [ -n "$Dpi" ] && warning "Option --dpi has no effect on $Xserver"
    ;;
  esac
  
  [ "$Rotation" != "0" ] && {
    case $Xserver in
      Weston|Weston-Xwayland|Xorg)
        echo "0 90 180 270 flipped flipped-90 flipped-180 flipped-270" | grep -q "$Rotation" || {  # fuzzy test
          warning "Unsupported value '$Rotation' for option --rotate. 
  Must be one of 0 90 180 270 flipped flipped-90 flipped-180 flipped-270"
          Rotation="0"
        }
      ;;
      *) warning "$Xserver does not support option --rotate" ; Rotation="0" ;;
    esac
  }
  [ "$Rotation" = "0" ] && Rotation="normal"
  
  [ "$Outputcount" != "1" ] && {
    case $Xserver in
      Xephyr|Weston|Kwin|Weston-Xwayland|Kwin-Xwayland|Kwin-Native) 
        [[ "$Outputcount" =~ ^[1-9]$ ]] || {
          warning "--output-count value must be one of 1 2 3 4 5 6 7 8 9
  Disabling invalid value $Outputcount"
          Outputcount="1"
        }
      ;;
      *) warning "$Xserver does not support option --output-count.
  Only available for Weston, KWin and Xephyr, thus for options --weston,
  --weston-xwayland, --kwin, --kwin-xwayland, --kwin-native, --xephyr." 
        Outputcount="1"
      ;;
    esac
    case $Xserver in
      Weston-Xwayland) warning "Xwayland sometimes does not position itself 
  at origin 0+0 of first virtual screen, and some screens appear to 
  be unused. 
  You may need to move Xwayland manually  with [META]+[LeftMouseButton]." ;;
      Xephyr) warning "Xinerama support would be best here,
  but is disabled in Xephyr because it does not handle it well.
  Different window managers handle this different. Just try out." ;;
    esac
  }
}

{ #### part: check virtual screen size

  # check whole display size, can include multiple monitors
  [ -n "$Hostdisplay" ] && {
    command -v xwininfo      >/dev/null && {
      Xaxis=$(xwininfo -root -stats | grep Width  | cut -d: -f2)
      Yaxis=$(xwininfo -root -stats | grep Height | cut -d: -f2)
    } || command -v xdpyinfo >/dev/null && {
      Xaxis=$(xdpyinfo | grep dimensions | cut -dx -f1 | rev | cut -d ' ' -f1 | rev)
      Yaxis=$(xdpyinfo | grep dimensions | cut -dx -f2 | cut -d ' ' -f1)
    } || command -v xrandr   >/dev/null && {
      Xaxis=$(xrandr | grep current | head -n1 | cut -d, -f2 | cut -d' ' -f3)
      Yaxis=$(xrandr | grep current | head -n1 | cut -d, -f2 | cut -d' ' -f5)
    } || {
      warning "Could not determine your screen size. Will use arbitrary
  virtual resolution 4720x3840 as hopefully big enough. Please improve this by
  installing one of xdpyinfo, xwininfo or xrandr. Or use option --size=XxY."
    }
  }
  
  # size for windowed desktops, roughly maximized relative to primary monitor
  [ "$Xpramode" = "start-desktop" ] && Xserver="${Xserver}-Desktop"
  case $Xserver in
    Xephyr|Weston-Xwayland|Weston|Kwin|Kwin-Xwayland|Kwin-Native|Nxagent|Xpra-Desktop|Xpra-Xwayland-Desktop)
      tty | grep -q tty && {
        : # nothing to do on tty; maybe should check --size=$Screensize
      } || {
        command -v xrandr > /dev/null && [ -n "$(xrandr | grep primary)" ] && { # reduce size to primary monitor for windowed desktop
          Xaxis=$(xrandr | grep primary | head -n1 | cut -dx -f1 | rev | cut -d' ' -f1 | rev)
          Yaxis=$(xrandr | grep primary | head -n1 | cut -dx -f2 | cut -d' ' -f1 | cut -d+ -f1)
        } || warning "Could not determine size of your primary display to
  create a roughly maximized window for $Xserver. Please install xrandr
  or use option --size=XxY."
        Xaxis=$(($Xaxis-100))
        Yaxis=$(($Yaxis-100))
      }
    ;;
  esac
  Xserver=${Xserver%-Desktop}
  
  # regard scaling (option --scale)
  Xaxis=$(awk -v a=$Xaxis -v b=$Scaling 'BEGIN {print (a / b)}')
  Xaxis=${Xaxis%.*}
  Yaxis=$(awk -v a=$Yaxis -v b=$Scaling 'BEGIN {print (a / b)}')
  Yaxis=${Yaxis%.*}

  [ -n "$Screensize" ] && {
    Xaxis=${Screensize%x*}
    Yaxis=${Screensize#*x}
  }
  
  [ -z "$Xaxis" ] && {
    Xaxis="4720"
    Yaxis="3840"
  }
  
  Screensize="${Xaxis}x${Yaxis}"

  case $Xserver in
    Xpra|Xdummy|Xvfb) Modeline=$(cvt $Xaxis $Yaxis | tail -n1 | cut -d' ' -f2-) ;;
  esac
}

{ #### part: check free display, create cache folder and subfolder and add path to cache filenames
  mkdir -p $Cacherootfolder || error "Could not create cache folder
  $Cacherootfolder"
  writeaccess $(id -u) $Cacherootfolder || error "User $(id -un) does not have write access to
  cache folder $Cacherootfolder"  # can happen with --cachedir
  [ -z "$Newdisplaynumber" ] && {
    # Look for next free display and change some display specific variables
    case $Xserver in                         # set initial value for searching
      Xorg)                   Newdisplaynumber="8"   ;;
      Xpra|Xpra-Xwayland)     Newdisplaynumber="100" ;;
      Xephyr)                 Newdisplaynumber="200" ;;
      Hostdisplay)            Newdisplaynumber="300" ;; # dummy number to look for free cache folder, DISPLAY will be $Hostdisplay
      Xdummy|Xvfb|Xdummy-Xwayland) Newdisplaynumber="400" ;;
      Weston-Xwayland)        Newdisplaynumber="500" ;;
      Xwayland)               Newdisplaynumber="600" ;;
      Weston)                 Newdisplaynumber="700" ;;
      Hostwayland)            Newdisplaynumber="800" ;; # dummy number to look for free cache folder, DISPLAY will be empty
      Nothing)                Newdisplaynumber="900" ;; # dummy number to look for free cache folder
      Kwin)                   Newdisplaynumber="1100" ;;
      Kwin-Xwayland)          Newdisplaynumber="1200" ;;
      Kwin-Native)            Newdisplaynumber="1300" ;;
      Nxagent)                Newdisplaynumber="1400" ;;
    esac
    #
    while [ -e "/tmp/.X11-unix/X$Newdisplaynumber" ] || [ -h "/tmp/.X11-unix/X$Newdisplaynumber" ] || [ -e "/tmp/,X$Newdisplaynumber-lock" ]  || [ -d "$Cacherootfolder/X$Newdisplaynumber" ] || [ -e "$XDG_RUNTIME_DIR/wayland-$Newdisplaynumber" ] ; do   # search unused X socket, passing already used cache numbers
      Newdisplaynumber=$(($Newdisplaynumber + 1))
    done
  } || {
    [ -e "/tmp/.X11-unix/X$Newdisplaynumber" ] || [ -h "/tmp/.X11-unix/X$Newdisplaynumber" ]  || [ -d "$Cacherootfolder/X$Newdisplaynumber" ] && error "Display :$Newdisplaynumber is already in use"
  }
  #
  Cachefolder="$Cacherootfolder/X$Newdisplaynumber"
  Sharefolder="$Cachefolder/$Sharefolder"
  #
  Xinitrc="$Cachefolder/$Xinitrc"
  Xinitlogfile="$Cachefolder/$Xinitlogfile"
  Xtermrc="$Cachefolder/$Xtermrc"
  Xtermlogfile="$Cachefolder/$Xtermlogfile"
  Dockerlogfile="$Cachefolder/$Dockerlogfile"
  Dockerpidfile="$Cachefolder/$Dockerpidfile"
  Dockerrc=$Cachefolder/$Dockerrc
  Containerip="$Cachefolder/$Containerip"
  Xservercookie="$Cachefolder/$Xservercookie"
  Xclientcookie="$Sharefolder/$Xclientcookie"
  Xpraserverlogfile="$Cachefolder/$Xpraserverlogfile"
  Compositorlogfile="$Cachefolder/$Compositorlogfile"
  Bgpidfile="$Cachefolder/$Bgpidfile"
  Imagecommandscript="$Sharefolder/$Imagecommandscript"
  Createsudouser="$Sharefolder/$Createsudouser"
  Shareclipboardscript="$Cachefolder/$Shareclipboardscript"
  Newxsocket="/tmp/.X11-unix/X$Newdisplaynumber"
  #Newxlock="/tmp/.X$Newdisplaynumber-lock"
  Logfile="$Sharefolder/x11docker.log"
  Etcpasswd="$Cachefolder/$Etcpasswd"
  #Etcgroup="$Cachefolder/$Etcgroup"
  Westonini="$Cachefolder/$Westonini"

  
  [ "$Newxvt" = "" ] && Newxvt="vt$Newdisplaynumber"    # FIXME: assuming instead of knowing whether VT is free
  Newdisplay=":$Newdisplaynumber"
  
  case $Xserver in
    Hostdisplay)
      Newdisplay=$Hostdisplay
      Newxsocket=$Hostxsocket ;;
  esac
 
  ## Get inet adress of docker0 interface
  Dockeriprange=$(ip -4 -o a | grep docker0 | awk '{print $4}')
  Dockerip=$(echo $Dockeriprange | cut -d/ -f1)
   
  ## create display specific cache subfolder
  #
  mkdir $Cachefolder
  mkdir $Sharefolder
  :>$Logfile
}

{ #### part: check window manager
  case $Windowmanager in
  ""|"none") Windowmanager="" ;;
  *)
    [ "$Windowmanager" = "auto" ] && Windowmanager=""
    case $Xserver in
      Hostdisplay|Nothing|Hostwayland) # disable window manager if xpra (or host display)(or wayland compositor) does this job
        Windowmanager="" 
      ;; 
      Kwin-Native) Windowmanager=""
        warning "$Xserver provides its own window management.
  Will not use another window manager from host." 
      ;;
      Xephyr|Xorg|Xdummy|Xvfb|Xwayland|Weston-Xwayland|Nxagent|Xpra|Xpra-Xwayland|Xdummy-Xwayland|Kwin-Xwayland)
        # try to find out current window manager to use it for x11docker (i.e. run a new instance of it)
        [ -z "$Windowmanager" ] && [ -e "/etc/alternatives/x-window-manager" ] && Windowmanager=$(command -v $(ls -l /etc/alternatives/x-window-manager | cut -d ">" -f2))
        # try with wmctrl
        if [ -z "$Windowmanager" ] && [ -n "$(command -v wmctrl)" ]  ; then          # option '-w, --wm': maybe a window manager is already set
          Windowmanager=$(wmctrl -m | grep 'PID' | awk '{print $2}')                 # wmtrl, if installed, can find already running wm. at first get pid
          if [ -e "/proc/$Windowmanager" ] ; then                                    # check if pid is valid
            Windowmanager=$(ls -l "/proc/$Windowmanager/exe" | awk '{print $11}')    # if yes, then get /path/executable
          else                                                                       # otherwise, try insecure way over name
            Windowmanager=$(wmctrl -m | grep 'Name' | awk '{print $2}' | tr '[:upper:]' '[:lower:]')
          fi
        fi
        [ -z "$Windowmanager" ] && {
          for Windowmanager in $Wm_all none ; do
            command -v $Windowmanager >/dev/null && break
          done
        }
        case $(basename $Windowmanager | awk '{print $1}') in  # check some wm which need to be configured 
          cinnamon|cinnamon-session) Windowmanager="cinnamon --sm-disable";;
          compiz) # if none, create minimal config to have useable window decoration and can move windows
            if [ ! -e "$HOME/.config/compiz-1/compizconfig/Default.ini" ] ; then
              mkdir -p "$HOME/.config/compiz-1/compizconfig"
              echo "[core]
s0_active_plugins = core;composite;opengl;decor;resize;move;
" > "$HOME/.config/compiz-1/compizconfig/Default.ini"
            fi  ;;
          enlightenment|e17|e16|e19|e20|e) Windowmanager="enlightenment_start" ;;
          gnome|gnome-shell|gnome-session) # crashes without option '--sm-disable', crashes host X, too!
            Windowmanager="gnome-shell --sm-disable" ;;
          matchbox) Windowmanager="matchbox-window-manager"  ;;
          mate|mate-session) Windowmanager="mate-session -f" ;;
          mate-wm) Windowmanager="marco --sm-disable"  ;;
          openbox) Windowmanager="openbox --sm-disable" ;;
        esac
        #
        [ -n "$Windowmanager" ] && [ -z "$(command -v $Windowmanager)" ] && error "No executeable window manager $Windowmanager found. 
  Have a look at 'x11docker --help' for a list of reommended window managers."
      ;;
    esac
    ;;
  esac
}

{ #### part: check run/exe/xonly
  [ -z "$Imagename" ] && X11dockermode="xonly" 
  case $X11dockermode in
    run) ;;
    exe)
      Hostexe="$Imagename $Imagecommand"
      Imagename=""
      Imagecommand=""
      [ -z "$Hostexe" ]               && error "No host executable defined"
      [ -z "$(command -v $Hostexe)" ] && error "$Hostexe seems to be not executeable"
      [ "$Dbuslaunch" = "yes" ] && Hostexe="dbus-launch $Hostexe" 
    ;;
    xonly)
      case $Xserver in
        Nothing|Hostwayland|Hostdisplay) 
          warning "You are using $Xserver along with --xonly. 
  That will achieve nothing"
        ;;
        *)
          case $Windowmanager in
            "") Hostexe="while [ ! -e /$Sharefolder/timetosaygoodbye ] ; do sleep 1 ; done" ;;
            *)  Hostexe="$Windowmanager" ; Windowmanager="" 
                [ "$Dbuslaunch" = "yes" ] && Hostexe="dbus-launch $Hostexe" 
            ;;
          esac
          Imagename=""
          Imagecommand=""
          X11dockermode="exe"
        ;;
      esac
    ;;
  esac
}

{ #### part: check terminal for password prompt
  [ "$Getroot" = "bash -c" ] && Terminal="bash -c" || {
    [ "$X11dockermode" = "run" ] && {
      case $Xserver in
        Weston|Hostwayland)  Terminallist=("qterminal konsole terminator NOLUCK") ;;
        Kwin)                Terminallist=("konsole NOLUCK") ;;
        Nothing)             Terminallist="bash NOLUCK" ;;
        *)                   Terminallist=("xterm qterminal konsole terminator NOLUCK") ;;
      esac
      # problems with gnome-terminal, sakura, lilyterm kterm mrxvt termit
      for Terminal in $Terminallist ; do command -v $Terminal >/dev/null && break ; done
      [ "$Terminal" = "NOLUCK" ] && { error "Can not find a terminal emulator that works in $Xserver.
  Please install one of:
  ${Terminallist%"NOLUCK"}
  (gnome-terminal is not suitable.)" ; }
      case $Xserver in
        Weston|Kwin|Hostwayland)
          case $Terminal in 
            qterminal|konsole) Terminal="QT_QPA_PLATFORM=wayland $Terminal" ;;
          esac
        ;;
      esac
      case $Terminal in
        bash) Terminal="bash -c" ;;
        *) Terminal="$Terminal -e" ;;
      esac
    }
  }
}

{ #### part: option '-c, --clipboard' create shareclipboard script
  # use xclip to share text clipboard content between X servers.
  # xpra has its own clipboard management including image transfer
 
  case $Shareclipboard in                        # option '-c, --clipboard'
    yes) Xpraoptions="$Xpraoptions --clipboard"   ;;
    no)  Xpraoptions="$Xpraoptions --no-clipboard" ;; 
  esac
  
  [ "$Shareclipboard" = "yes" ] && case $Xserver in
  Nothing|Weston|Hostwayland|Kwin) Shareclipboard="no" 
    warning "Option --clipboard not supported for $Xserver"
  ;;
  Nxagent) ;; # look at "create command to start X server"
  Xephyr|Xorg|Xdummy|Xdummy-Xwayland|Xvfb|Xwayland|Weston-Xwayland)
    if [ -z "$(command -v 'xclip')" ] ; then
      warning "Cannot share clipboard. Need package 'xclip' to be
  installed. Try installing xclip with command: 'apt-get install xclip'"
      Shareclipboard="no"
    else 
      echo "#! /bin/bash
# share clipboard between two X servers
while true ; do
    # read content of clipboard of first X server
    XAUTHORITY=$Hostxauthority
    D1CLIP=\"\$(xclip -selection clipboard -o -display $Hostdisplay)\"
    # check if clipboard of first X server has changed; if yes, send new content to second X server
    if [ ! \"\$CLIP\" = \"\$D1CLIP\" ] ; then
        CLIP=\"\$D1CLIP\"
        xclip -selection clipboard -o -display $Hostdisplay | XAUTHORITY=$Xclientcookie xclip -selection clipboard -i -display $Newdisplay
    fi
    
    # read content of clipboard of second X server
    XAUTHORITY=$Xclientcookie
    D2CLIP=\"\$(xclip -selection clipboard -o -display $Newdisplay)\"
    # check if clipboard of second X server has changed; if yes, send new content to first X server
    if [ ! \"\$CLIP\" = \"\$D2CLIP\" ] ; then
        CLIP=\"\$D2CLIP\"
        xclip -selection clipboard -o -display $Newdisplay | XAUTHORITY=$Hostxauthority xclip -selection clipboard -i -display $Hostdisplay
    fi
    
    # avoid empty string error
    if [ -z \"\$CLIP\" ] ; then CLIP=' ' ; fi
    # sleep a bit to avoid high cpu usage
    sleep 0.5
done
" > $Shareclipboardscript
    fi
  ;;
  esac
}

{ #### part: Xdummy: xorg.conf and Xorg starter script
#error $(($Xaxis * $Yaxis * 24 / 8 /1024))
  case $Xserver in
    Xpra|Xdummy)
      # create xorg.conf for Xdummy
      echo '# This xorg configuration file is forked and changed from xpra to start a dummy X11 server.
# For original and details, please see: https://xpra.org/Xdummy.html
Section "ServerFlags"
  Option "DontVTSwitch" "true"
  Option "AllowMouseOpenFail" "true"
  Option "PciForceNone" "true"
  Option "AutoEnableDevices" "false"
  Option "AutoAddDevices" "false"
EndSection
Section "Device"
  Identifier "dummy_videocard"
  Driver "dummy"
  DacSpeed 600
  Option "ConstantDPI" "true"
  VideoRam '$(($Xaxis * $Yaxis * 2 * 32 / 8 / 1024))'
EndSection
Section "Monitor"
  Identifier "dummy_monitor"
  HorizSync   1.0 - 2000.0
  VertRefresh 1.0 - 200.0
  Modeline '$Modeline'
EndSection
Section "Screen"
  Identifier "dummy_screen"
  Device "dummy_videocard"
  Monitor "dummy_monitor"
  DefaultDepth 24
  SubSection "Display"
    Viewport 0 0
    Depth 32
    Modes '$(echo $Modeline | cut -d " " -f1)'
    Virtual '$Xaxis' '$Yaxis'
  EndSubSection
EndSection
Section "ServerLayout"
  Identifier   "dummy_layout"
  Screen       "dummy_screen"
EndSection
' > $Cachefolder/xorg.xdummy.conf
      # create starter script for Xdummy
      echo '#!/bin/sh
#@PydevCodeAnalysisIgnore
# fork of https://xpra.org/trac/browser/xpra/trunk/src/scripts/xpra_Xdummy
find_ld_linux() {
	arch=$(uname -m)

	if [ $arch = "x86_64" ]; then
		LD_LINUX="/lib64/ld-linux-x86-64.so.2"
	elif [ $arch = "i386" ]; then
		LD_LINUX="/lib/ld-linux.so.2"
	elif [ $arch = "i486" ]; then
		LD_LINUX="/lib/ld-linux.so.2"
	elif [ $arch = "i586" ]; then
		LD_LINUX="/lib/ld-linux.so.2"
	elif [ $arch = "i686" ]; then
		LD_LINUX="/lib/ld-linux.so.2"
	elif [ $arch = "armel" ]; then
		LD_LINUX="/lib/ld-linux.so.3"
	elif [ $arch = "armhfp" ]; then
		LD_LINUX="/lib/ld-linux.so.3"
	elif [ $arch = "armhf" ]; then
		LD_LINUX="/lib/ld-linux-armhf.so.3"
	elif [ $arch = "ppc64" ]; then
		LD_LINUX="/lib64/ld64.so.1"
	elif [ $arch = "s390x" ]; then
		LD_LINUX="/lib64/ld64.so.1"
	else
		#suitable for: powerpc/ppc, mips/mipsel, s390 and others:
		LD_LINUX="/lib/ld.so.1"
	fi

	if [ ! -x "$LD_LINUX" ]; then
		# Musl C / Alpine Linux
		ldmusl=$(ls /lib | grep ^ld-musl)
		if [ -n "$ldmusl" ]; then
			LD_LINUX="/lib/$ldmusl"
		else
			LD_LINUX=''
			echo "could not determine ld path for $arch, please file an xpra bug"
		fi
	fi
}

if [ -x "/usr/libexec/Xorg" ]; then
	#Fedora 22+ workaround where /usr/bin/Xorg is not suid
	#because it is a script, which calls /usr/libexec/Xorg.wrap
	#which is setuid, and which eventually calls this one:
	XORG_BIN="/usr/libexec/Xorg"
elif [ -x "/usr/libexec/Xorg.bin" ]; then
	#Fedora 21 workaround where /usr/bin/Xorg is not suid
	#because it is a script, which calls /usr/libexec/Xorg.wrap
	#which is setuid, and which eventually calls this one:
	XORG_BIN="/usr/libexec/Xorg.bin"
elif [ -x "/usr/lib/xorg-server/Xorg" ]; then
	#Arch Linux:
	exec "/usr/lib/xorg-server/Xorg" "$@"
elif [ -x "/usr/lib/xorg/Xorg" ]; then
	#Ubuntu 16.10:
	exec "/usr/lib/xorg/Xorg" "$@"
else
	XORG_BIN=$(which Xorg)
fi
if [ ! -x "$XORG_BIN" ]; then
	echo "failed to locate Xorg binary to run"
	exit 1
fi
if [ -u "$XORG_BIN" ]; then
	# setuid is set, we need to do magic
	find_ld_linux
	if [ -n "$LD_LINUX" ]; then
		if [ -n "$BASH" ]; then
			#running in bash, can show a more helpful command name:
			exec -a "Xorg-nosuid" "$LD_LINUX" "$XORG_BIN" "$@"
		else
			exec "$LD_LINUX" "$XORG_BIN" "$@"
		fi
	else
		#fallback to making a copy of the binary:
		DOTXPRA_DIR="$HOME/.xpra"
		if [ ! -d "$DOTXPRA_DIR" ]; then
	 		mkdir "$DOTXPRA_DIR"
	 		chmod 700 "$DOTXPRA_DIR"
	 	fi
		NOSUID_XORG="$DOTXPRA_DIR/Xorg-nosuid"
	 	cp -f "$XORG_BIN" "$NOSUID_XORG"
	 	exec "$NOSUID_XORG" "$@"
	 fi
else
	# setuid is not set on xorg_bin
	exec "$XORG_BIN" "$@"
fi
' > $Cachefolder/Xdummy.wrap
    ;;
  esac
}

{ #### part: create command to start X server
  Xserveroptions="-nolisten tcp -dpms"
  [ "$Xauthentication" = "yes" ] && Xserveroptions="$Xserveroptions -auth $Xservercookie"
  [ "$Verbose" = "yes" ] && Xserveroptions="$Xserveroptions -audit 4"
  case $Xserver in
    Nxagent)
      { [ "$Shareipc" = "yes" ] || [ "$X11dockermode" = "exe" ] ; } && Xserveroptions="$Xserveroptions -shmem -shpix" || Xserveroptions="$Xserveroptions -noshmem -noshpix"
    ;;
    *)
      Xserveroptions="$Xserveroptions +extension Composite +extension RANDR +extension RENDER +extension GLX +iglx +extension XVideo +extension DOUBLE-BUFFER"
      Xserveroptions="$Xserveroptions -extension XINERAMA -xinerama"
      Xserveroptions="$Xserveroptions -extension X-Resource +extension SECURITY +extension DAMAGE"
      Xserveroptions="$Xserveroptions -retro"
      { [ "$Shareipc" = "yes" ] || [ "$X11dockermode" = "exe" ] ; } && {
        Xserveroptions="$Xserveroptions +extension MIT-SHM"
      } || { 
        Xserveroptions="$Xserveroptions -extension MIT-SHM"
        Xprashm="XPRA_XSHM=0"
      }
    ;;
  esac
  
  [ -n "$Windowmanager" ] && {
    case $Xserver in
      Xpra) [ "$Xpramode" = "start-desktop" ] && warning "Can not disable XTEST on new X server as Xpra needs it.
  If your host window manager $Windowmanager can start applications
  on its own (for example, with a context menu), container applications
  could abuse this to run and remotly control host applications."
        ;;
      Xdummy|Xdummy-Xwayland|Xvfb) Xserveroptions="$Xserveroptions +extension XTEST" && warning "Did not disable XTEST for invisible X server.
  If your host window manager $Windowmanager can start applications
  on its own (for example, with a context menu), container applications
  could abuse this to run and remotly control host applications.
  If you provide content of $Xserver over network to others,
  they may take control over your computer!"
        ;;
      *) Xserveroptions="$Xserveroptions -tst -extension XTEST" ;;
    esac
  }

  [ -z "$Dpi" ] && {
    xdpyinfo >/dev/null 2>&1 && {
      Dpi="$(xdpyinfo | grep dots | cut -dx -f2 | cut -d' ' -f1)"
    } || {
      [ -n "$Hostdisplay" ] && [ -z "$(command -v xdpyinfo)" ] && warning "Could not determine dpi settings. If you encounter too
  big or small fonts in $Xserver, please install xdpyinfo or use option --dpi."
    }
    case $Xserver in
      Xpra|Xpra-Xwayland)
        [ "$Xpramode" = "start" ] && {
          Dpi=$(awk -v a="$Scaling" -v b="$Dpi" 'BEGIN {print (b * a * a)}')
          Dpi=${Dpi%.*}
        }
      ;;
    esac
  }
  [ -n "$Dpi" ] && { :
    Xserveroptions="$Xserveroptions -dpi $Dpi"
    Xpraoptions="$Xpraoptions --dpi $Dpi"
  }
  
  Waitforgoodbye='bash -c "while [ ! -e '$Sharefolder'/timetosaygoodbye ] ; do sleep 1 ; done"' 

  Xpraoptions="$Xpraoptions -z0 --no-speaker --no-pulseaudio"
  [ "$Scaling" != "1" ] && Xpraoptions="$Xpraoptions --desktop-scaling=$Scaling"
  
  case $Xserver in
    Weston|Weston-Xwayland|Xpra-Xwayland|Xdummy-Xwayland)
      echo "
[core]
shell=desktop-shell.so
idle-time=0
[shell]
#background-color=0xff002244
panel-location=none
locking=false
" > $Westonini
      [ -n "$WAYLAND_DISPLAY" ] &&  [ "$Xserver" != "Xpra-Xwayland" ] && {
        Westonoutput="WL"
      } || {
        [ -n "$Hostdisplay" ] && Westonoutput="X"
      }
      tty | grep -q tty && {
        [ -n "$Screensize" ] || [ "$Scaling" != "1" ] || [ "$Rotation" != "0" ] && {
          weston --no-config > $Compositorlogfile 2>&1 &
          waitforlogentry weston $Compositorlogfile connector
          Westonoutput="$(cat $Compositorlogfile | grep Output | grep connector | head -n1 | cut -d ' ' -f3 | rev | cut -c2- | rev)"
          kill $!
        }
      }
    ;;
  esac

  case $Xserver in
    Xorg) 
      Xserveroptions="$Xserveroptions +extension XFree86-DRI +extension XFree86-DGA +extension XFree86-VidModeExtension"
      Xserveroptions="$Xserveroptions -verbose"                  # make X verbose
      Xcommand="$(command -v Xorg) $Newdisplay $Newxvt $Xserveroptions"
    ;;
    Xpra) # To use xpra, Xdummy will run first. xpra server uses it later. Use Xvfb if available.
      command -v Xvfb >/dev/null && {
        Xcommand="$(command -v Xvfb) $Newdisplay $Xserveroptions -screen 0 ${Screensize}x24"
      } || {
        Xcommand="$Cachefolder/Xdummy.wrap $Newdisplay $Newxvt -config $Cachefolder/xorg.xdummy.conf $Xserveroptions"
      }
    ;;
    Xdummy)
      Xcommand="$Cachefolder/Xdummy.wrap $Newdisplay $Newxvt -config $Cachefolder/xorg.xdummy.conf $Xserveroptions"
    ;;
    Xvfb)
      Xcommand="$(command -v Xvfb) $Newdisplay $Xserveroptions -screen 0 ${Screensize}x24"
    ;;
    Xephyr)
      case $Fullscreen in
        yes) Xephyroptions="$Xephyroptions -fullscreen" ;;
        no)  for Count in $(seq 1 $Outputcount) ; do Xephyroptions="$Xephyroptions -screen $Screensize" ; done ;;
      esac
      [ "$Xephyrresize" = "yes" ] && Xephyroptions="$Xephyroptions -resizeable"  # option '--resizeable'
      [ "$Xephyrglamor" = "yes" ] && Xephyroptions="$Xephyroptions -glamor"      # deprecated option '--glamor'
      Xcommand="$(command -v Xephyr) $Newdisplay $Xserveroptions $Xephyroptions"
    ;;
    Xwayland) 
      Xcommand="$(command -v Xwayland) $Newdisplay $Xserveroptions"
      Waylandsocket=$WAYLAND_DISPLAY
    ;;
    Xpra-Xwayland|Xdummy-Xwayland)
      [ "$Xpramode" = "start" ] && [ "$Xserver" = "Xpra-Xwayland" ] && Xserveroptions="$Xserveroptions -rootless" 
      Xcommand="$(command -v Xwayland) $Newdisplay $Xserveroptions"
      [ -z "$WAYLAND_DISPLAY" ] && Waylandsocket="wayland-$Newdisplaynumber" || { 
        [ "1" = "$(awk -v a="$Scaling" 'BEGIN {print (a < 1)}')" ] && Waylandsocket="wayland-$Newdisplaynumber" || Waylandsocket=$WAYLAND_DISPLAY 
      }
      echo "[output]" >> $Westonini
      case $Westonoutput in
        X|WL) echo "name=${Westonoutput}1" >> $Westonini ;;
        *)    echo "name=${Westonoutput}"  >> $Westonini ;;
      esac
      echo "mode=$Screensize" >> $Westonini
      Compositorcommand="weston --config=$Westonini --socket=$Waylandsocket --backend=x11-backend.so"
    ;;
    Weston|Weston-Xwayland)
      [ "$Xserver" = "Weston-Xwayland" ] && Xcommand="$(command -v Xwayland) $Newdisplay $Xserveroptions"
      [ "$Xserver" = "Weston" ]          && Sharewayland="yes"
      Waylandsocket="wayland-$Newdisplaynumber"
      case "$Customwestonini" in
        "") Compositorcommand="weston --socket=$Waylandsocket --config=$Westonini " ;;
        *)  Compositorcommand="weston --socket=$Waylandsocket --config=$Customwestonini " ;;
      esac
      [ "$Fullscreen" = "yes" ] && Compositorcommand="$Compositorcommand --fullscreen"
      [ "$Outputcount" = "1" ]  || Compositorcommand="$Compositorcommand --output-count=$Outputcount"
      for Count in $(seq 1 $Outputcount) ; do
        [ "$Westonoutput" = "WL" ] || [ "$Westonoutput" = "X" ] || { Count="" ; Screensize="preferred" ;  } # for tty
        echo "[output]
name=$Westonoutput$Count
mode=$Screensize
scale=$Scaling
transform=$Rotation
" >> $Westonini
      done
    ;;
    Kwin-Xwayland)
      Xcommand="$(command -v Xwayland) $Newdisplay $Xserveroptions"
      Waylandsocket="wayland-$Newdisplaynumber"
      Compositorcommand="kwin_wayland --xwayland --socket=$Waylandsocket --width=$Xaxis --height=$Yaxis --output-count=$Outputcount" 
    ;;
    Kwin-Native) # experimental, hacky and not nice implemented as I cannot tell KWin which display number to use. A clean workflow requires KWin to be started at end of script.
      Waylandsocket="wayland-$Newdisplaynumber"
      Kwinrc=$Cachefolder/kwinrc
      echo "#!/bin/bash
        echo \$DISPLAY >$Cachefolder/kwindisplay
        while [ ! -e $Sharefolder/timetosaygoodbye ] ; do sleep 1 ; done
      ">$Kwinrc
      Compositorcommand="kwin_wayland --xwayland --socket=$Waylandsocket --width=$Xaxis --height=$Yaxis  --output-count=$Outputcount --exit-with-session='bash $Kwinrc'"
      kwin_wayland --xwayland --socket="$Waylandsocket" --width=$Xaxis --height=$Yaxis  --output-count="$Outputcount" --exit-with-session="bash $Kwinrc"  > $Compositorlogfile 2>&1 & storepid $! kwin_wayland && export Compositorpid=$!
      waitforlogentry   "kwin"   "$Compositorlogfile" "X-Server"
      bash -c "while ps -p $Compositorpid >/dev/null; do sleep 1 ; done ; touch $Sharefolder/timetosaygoodbye" &  #storepid $! bash
      Newdisplay=$(cat $Cachefolder/kwindisplay)
      Newdisplaynumber="$(echo $Newdisplay | cut -d: -f2 | cut -d. -f1)"
      Newxsocket=/tmp/.X11-unix/X$Newdisplaynumber
    ;;
    Kwin)
      Waylandsocket="wayland-$Newdisplaynumber"
      Sharewayland="yes"
      Compositorcommand="kwin_wayland --xwayland --socket=$Waylandsocket --width=$Xaxis --height=$Yaxis --output-count='$Outputcount'" 
    ;;
    Nxagent)
      Xcommand="$(command -v nxagent) $Newdisplay $Xserveroptions -ac $Nxagentoptions -options $Cachefolder/nxagentoptions"
      # create file for additional nxagent options
      Nxagentoptions="nx/nx"
      [ "$Shareclipboard" = "yes" ] && Nxagentoptions="$Nxagentoptions,clipboard=both" || Nxagentoptions="$Nxagentoptions,clipboard=none"
      [ "$Fullscreen" = "yes" ] && Nxagentoptions="$Nxagentoptions,fullscreen=1" || {
        [ -n "$Screensize" ] && Nxagentoptions="$Nxagentoptions,geometry=$Screensize" 
      }
      # set keyboard layout
      command -v setxkbmap >/dev/null && { 
        Nxagentoptions="$Nxagentoptions,keyboard=$(setxkbmap -query | grep rules | rev | cut -d' ' -f1 | rev)/$(setxkbmap -query | grep layout | rev | cut -d' ' -f1 | rev)"
      } || warning "Could not check your keyboard layout due to missing setxkbmap"
      Nxagentoptions="$Nxagentoptions$Newdisplay"
      echo $Nxagentoptions > "$Cachefolder/nxagentoptions"
      # workaround as nxagent ignores XAUTHORITY and fails to start if option -auth is given. Option -ac above complies "xhost +" and is disabled in xinitrc
      [ "$Xauthentication" = "yes" ] && {
        cp $XAUTHORITY $Xservercookie
        :> $Xclientcookie
        xauth -f $Xclientcookie add   $Newdisplay . $(mcookie)
        xauth -f $Xclientcookie nlist $Newdisplay | xauth -f $Xservercookie nmerge -
      }
      # fake NXclient
      echo '#! /bin/bash
# helper script to terminate nxagent. 
# nxagent runs program stored in NX_CLIENT if window close button is pressed.
# (real nxclient does not exist)
echo "NXclient: $*" >> '$Xinitlogfile'
parsed=$(getopt --options="" --longoptions="parent:,display:,dialog:,caption:,window:,message:" -- "$@")
eval set -- $parsed
while [ -n "${1:-}" ] ; do
  case "${1:-}" in
    --dialog) dialog=${2:-} && shift ;;
    --display|--caption|--message) shift ;;
    --window) shift ;;
    --parent) pid=${2:-} && shift ;;
    --) ;;
  esac
  shift
done
case $dialog in
  pulldown) ;;
  yesnosuspend) 
    kill $pid 
    touch '$Sharefolder/timetosaygoodbye'
  ;;
esac
' > $Cachefolder/nxkill
      chmod +x $Cachefolder/nxkill
      export NX_CLIENT=$Cachefolder/nxkill
    ;;
    Hostwayland) Waylandsocket="$WAYLAND_DISPLAY" ;;
    Hostdisplay|Nothing) ;;
  esac
  
  [ "$Sharewayland" = "yes" ] && [ -z "$Waylandsocket" ] && Sharewayland="no" && warning "No wayland socket to share" 
  
  # some checks to avoid exploits
  [ "$Sharewayland" = "yes" ] && {
    [ -d "$XDG_RUNTIME_DIR" ] ||                                 error "Invalid XDG_RUNTIME_DIR $XDG_RUNTIME_DIR"
    [[ "$Waylandsocket" =~ ^[a-zA-Z0-9_.-]+$ ]] ||               error "Invalid name for WAYLAND_DISPLAY $Waylandsocket"
  }
  [ -n "$Hostdisplay" ] && { [[ "$Hostdisplay" =~ ^[0-9a-zA-Z:._-]+$ ]] || error "Invalid DISPLAY $Hostdisplay" ; }
  [ -n "$XAUTHORITY" ] && [ ! -e "$XAUTHORITY" ] &&              error "XAUTHORITY $XAUTHORITY not found" 
  [ -n "$HOME" ] && [ ! -e "$HOME" ] &&                          error "Invalid HOME $HOME" 
}

{ #### part: create $Newxenv
  case $Xserver in
    Xpra|Xephyr|Xpra-Xwayland|Weston-Xwayland|Hostdisplay|Xorg|Xdummy|Xvfb|Xdummy-Xwayland|Xwayland|Kwin-Xwayland|Kwin-Native|Nxagent)
      Newxenv="DISPLAY=$Newdisplay"
      [ "$Xauthentication" = "yes" ] && Newxenv="$Newxenv XAUTHORITY=$Xclientcookie" || Newxenv="$Newxenv XAUTHORITY=  " 
      Newxenv="$Newxenv XSOCKET=$Newxsocket"
    ;;
    Weston|Kwin|Hostwayland|Nothing)
      Newxenv="DISPLAY=''"
      Newxenv="$Newxenv XAUTHORITY=''"
  esac
  [ "$Sharewayland" = "yes" ] && {
    [ -n "$Waylandsocket" ]                              &&  Newxenv="$Newxenv WAYLAND_DISPLAY=$Waylandsocket"
    [ -z "$Waylandsocket" ] && [ -n "$WAYLAND_DISPLAY" ] &&  Newxenv="$Newxenv WAYLAND_DISPLAY=$WAYLAND_DISPLAY"
    [ -z "$Waylandsocket" ] && [ -z "$WAYLAND_DISPLAY" ] &&  { warning "No wayland environment to share,
  neither from host nor from $Xserver (--sharewayland)"
      Sharewayland="no" 
    }  ||  Newxenv="$Newxenv XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR"
  }
  [ "$Setwaylandenv" = "yes" ] && for Line in $Waylandtoolkitenv ; do Newxenv="$Newxenv $Line" ; done
  Newxenv="$Newxenv X11DOCKER_CACHE=$Cachefolder"
  #for Line in $Customenvironment ; do Newxenv="$Newxenv $Line" ; done
  while read -r Line; do Newxenv="$Newxenv $Line" ;   done < <(echo -e $Customenvironment)
  while read -r Line; do Hostxenv="$Hostxenv $Line" ; done < <(echo -e $Customenvironment)

  #   option '--showenv': show display infos on stdout
  [ "$Showdisplayenvironment" = "yes" ] && echo $Newxenv
  
}

{ #### part: check container user and shared home folder
  ## determine container user
  [ -z "$Benutzer" ] && Benutzer=$(id -un)                 # default: containeruser = hostuser
  [ -n "$Benutzer" ] && echo $Benutzer | grep -q ':' && {  # option --user can specify a group/gid after :
    Benutzergid="$(echo $Benutzer | cut -d: -f2)"
    Benutzer="$(echo $Benutzer | cut -d: -f1)"
  }
  [ -n "$(getent passwd $Benutzer)" ] && {                 # user exists on host
    Benutzer=$(getent passwd $Benutzer | cut -d: -f1)      # if name or uid -> now name
    Benutzeruid=$(getent passwd $Benutzer | cut -d: -f3)
    [ -z "$Benutzergid" ] && Benutzergid=$(getent passwd $Benutzer | cut -d: -f4)
    Benutzerhome=$(getent passwd $Benutzer | cut -d: -f6)
  } || {                                                   # user does not exist on host
    [[ $Benutzer =~ ^[0-9]+$ ]] || error "Unknown user or invalid user number '$Benutzer' for option --user."  # virtual users can only be specified as uid
    Benutzeruid=$Benutzer
    Benutzer="unknown$Benutzer"
    [ -z "$Benutzergid" ] && Benutzergid=100
    Benutzerhome=/home/$Benutzer
    [ -z "$Adduserhomefolder" ] && [ "$Adduserhome" = "yes" ] && { warning "Will not create a persistent home folder on host
  for a non-existing user. (Except you specify --homedir to a location
  where $Benutzer or at least $(id -un) has write access.)
  Fallback: Disabling option --home, no persistent home folder will be created."
      Adduserhome="no"
    }
  }
  
  ## check --userns-remap
  nsBenutzeruid=$Benutzeruid
  Line="$(pgrep -xa dockerd)"
  Line="${Line#*dockerd}"
  echo "$Line" | grep -q userns-remap && {
    Line="$(echo "${Line#*userns-remap}" | xargs)"
    [ "$(echo $Line | cut -c1)" = "=" ] && Line="$(echo $Line | cut -c2-)"
    Line="$(echo $Line | cut -d' ' -f1)"
    nsBenutzeruid="$(cat /etc/subuid | grep "$Line:" | cut -d: -f2)" # can be wrong, cannot predict or preset mapped uid for sure.
  }
  
  ## option '--home':    share folder ~/.local/share/x11docker/imagename with created container as its home directory
  ## option '--homedir': share custom host folder as home
  case $Adduserhome in
    yes)
      [ "$nsBenutzeruid" = "$Benutzeruid" ] || {
        warning "Can not share host folder as container home folder
  with user namespace remapping enabled. Disabling user namespace remapping!" 
        Dockeroptions="$Dockeroptions --userns=host"
      }
      # if no home folder on host is specified (--homedir), create a standard one in ~/.local/share/x11docker
      [ -z "$Adduserhomefolder" ] && Adduserhomefolder=$Benutzerhome/.local/share/x11docker/$(echo $Imagename | tr / - | tr : - )
      [ -e "$Adduserhomefolder" ] || {
        if mkdir -p $Adduserhomefolder; then
          # create symbolic link to ~/x11docker
          echo $Adduserhomefolder | grep -q .local/share/x11docker && [ ! -e $Benutzerhome/x11docker ] && ln -s $Benutzerhome/.local/share/x11docker $Benutzerhome/x11docker
        else
          # errors can occur if specifying a user with --user different from current user
          error "Could not create persistent home folder for 
  user '$Benutzer' on host (option --home or --homedir). You may create folder 
  $Adduserhomefolder
  with write access for '$Benutzer' so x11docker can provide it to container.
  Otherwise, you can run x11docker one time as user '$Benutzer', afterwards
  you can provide the folder as user '$(id -un)' with option '--user=$Benutzer'."
        fi
      }
      writeaccess $Benutzeruid $Adduserhomefolder || warning "User '$Benutzer' does not have write access to
  $Adduserhomefolder."
    ;;
    no) Benutzerhome="/tmp/fakehome" ;;
  esac
  
  # create /etc/passwd. only needed to provide user name in container
  [ -z "$(getent passwd $Benutzer)" ] && { 
    Benutzerpasswdentry="$Benutzer:*:$Benutzeruid:$Benutzergid:$Benutzer,,,:$Benutzerhome:/bin/bash"
  } || {
    Benutzerpasswdentry="$(getent passwd $Benutzer)"
    Benutzerpasswdentry="$(echo $Benutzerpasswdentry | cut -d: -f1-5):$Benutzerhome:$(echo $Benutzerpasswdentry | cut -d: -f7)"
  }
  echo "$Benutzerpasswdentry" > $Etcpasswd
}

{ #### part: create command to run docker
  case $X11dockermode in
    exe)  Dockercommand="# dontrundocker"  ;;
    run)  Dockercommand='docker run'
      
      case $Sudouser in
        no)
          # Create container user
          # group video is needed for non-systemd systems and for KDE
          Dockercommand="$Dockercommand --user $Benutzeruid:$Benutzergid --group-add video --env USER=$Benutzer"
          [ "$Benutzeruid" = "0" ] || Dockercommand="$Dockercommand -v $Etcpasswd:/etc/passwd:ro"
          # hardening container security
          [ "$Capdropall" = "yes" ] && Dockercommand="$Dockercommand --cap-drop=ALL --security-opt=no-new-privileges"
          [ "$Benutzeruid" = "0" ]  || Dockercommand="$Dockercommand --read-only --volume=/tmp"
        ;;
        yes) # option --sudouser
          warning "You allow $Benutzer sudo permissions without a password.
  Also, default container capabilities are not dropped (--cap-default).
  This is a severe reduction of default x11docker security.
  If an application breaks out of container, it can harm your system
  in every way without you noticing."
          { echo "#! /bin/bash"
            echo "id $Benutzeruid > /dev/null 2>&1 || {"
            echo "  addgroup --force-badname --gid $Benutzergid $Benutzer"
            echo "  useradd -l --password \\\"\\\" --uid $Benutzeruid --gid $Benutzergid --create-home --home-dir $Benutzerhome $Benutzer"
            echo "}"
            echo "Benutzer=\$(id -un $Benutzeruid)"
            echo 'touch /etc/sudoers'
            echo "echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"
            echo "adduser \$Benutzer sudo"
            echo "adduser \$Benutzer video"
            echo "su \$Benutzer -c 'bash $Cshare/x11docker_CMD'"
          } > $Createsudouser
          Dockercommand="$Dockercommand --user 0"
        ;;
      esac

      [ "$Preservecontainer" = "no" ] && Dockercommand="$Dockercommand --rm"
      Containername="x11docker_X${Newdisplaynumber}_$(mcookie | cut -c -6)_$(echo $Imagename | tr / _ | tr : _ )"
      Dockercommand="$Dockercommand --name=$Containername"

      Dockercommand="$Dockercommand --entrypoint='' "
      
      Dockercommand="$Dockercommand -v $Sharefolder:$Cshare:ro"
      [ "$Adduserhome" = "yes" ] && [ -n "$Adduserhomefolder" ] && Dockercommand="$Dockercommand -v $Adduserhomefolder:$Benutzerhome"
     
      case $Xserver in
        Nothing|Weston|Hostwayland|Kwin) ;;
        *)
          #      DISPLAY
          Dockercommand="$Dockercommand -e DISPLAY=unix$Newdisplay"
          #      XAUTHORITY
          [ "$Xauthentication" = "yes" ] && Dockercommand="$Dockercommand -e XAUTHORITY=$Cshare/Xclientcookie"
          #      X socket (link to /tmp/.X11-unix in dockerrc)
          Dockercommand="$Dockercommand -v $Newxsocket:/tmp/X$Newdisplaynumber:ro"
        ;;
      esac
      #          WAYLAND_DISPLAY
      [ "$Sharewayland" = "yes" ] && {   # option --sharewayland: Share wayland socket
        [ -n "$Waylandsocket" ] && {
          Dockercommand="$Dockercommand -e WAYLAND_DISPLAY=$Waylandsocket"
          Dockercommand="$Dockercommand -v $XDG_RUNTIME_DIR/$Waylandsocket:/tmp/$Waylandsocket:ro"
        } 
      }
      
      ## option --sharedir
      while read -r Line; do 
        [ -n "$Line" ] && { 
          [ -e "$Line" ] && Dockercommand="$Dockercommand --volume=\"$Line:$Line:rw\"" || warning "Directory to share not found (option --sharedir):
  $Line"
        }
      done < <(echo -e $Sharevolumes)

      ## option --gpu : share graphics adapter device files ### SECURITY: degrades container isolation
      [ "$Gpu" = "yes" ] && Dockercommand="$Dockercommand --device=/dev/dri:/dev/dri:rw"
      ## option '--pulseaudio': provide pulseaudio server
      [ "$Pulseaudio" = "yes" ] && Dockercommand="$Dockercommand -e PULSE_SERVER=tcp:$Dockerip:$Pulseaudiotcpport"
      ## options --ipc and --net
      [ "$Shareipc" = "yes" ]   && Dockercommand="$Dockercommand --ipc=host"
      [ "$Sharenet" = "yes" ]   && Dockercommand="$Dockercommand --net=host"
        
      # add custom docker arguments, imagename and imagecommand
      Dockercommand="$Dockercommand $Dockeroptions"
      case $Sudouser in
        no)  Dockercommand="$Dockercommand -- $Imagename /bin/bash $Cshare/x11docker_CMD" ;;
        yes) Dockercommand="$Dockercommand -- $Imagename /bin/bash $Cshare/createsudouser" ;;
      esac
    ;;
  esac
}

{ #### part: create dockerrc
  # create script that needs root permissions or docker group membership to use docker.
  # This is the part the password prompt is needed for.
  echo "#! /bin/bash"
  declare -f warning
  echo "Imagecommand='$Imagecommand'"
  echo "Imagename='$Imagename'"
  echo "Logfile='$Logfile'"
  echo "# check if image is available locally"
  echo "docker inspect --type=image $Imagename > /dev/null 2>&1 || {"
  echo "  warning 'Image $Imagename not found locally. Will try to pull it'"
  echo "  echo 'Image $Imagename not found locally. docker will try to pull it:'"
  echo "  docker pull $Imagename 2>&1 | tee >(cat >&3)"
  echo "}"  
  echo "[ -z \"\$Imagecommand\" ] && {"
  echo "  # extract image command from image if not given on cli"
  echo "  Imagecommand=\$(docker inspect --format='{{.Config.Cmd}}' $Imagename)"
  echo "  Imagecommand=\${Imagecommand#[}"
  echo "  Imagecommand=\${Imagecommand#/bin/sh -c }"
  echo "  Imagecommand=\${Imagecommand%]}"
  echo "}"
  echo "# extract entrypoint of image"
  echo "Entrypoint=\$(docker inspect --format='{{.Config.Entrypoint}}' $Imagename)"
  echo "Entrypoint=\${Entrypoint#[}"
  echo "Entrypoint=\${Entrypoint#/bin/sh -c }"
  echo "Entrypoint=\${Entrypoint%]}"
  echo "[ -z \"\$Imagecommand\" ] && [ -z \"\$Entrypoint\" ] && echo 'x11docker WARNING: No image command specified and no CMD found in image.' >&2"
  echo ""
  echo "# create x11docker_CMD (shared with container and given as image command on docker run)"
  echo "{ echo '#! /bin/bash'"
  echo "  # created startscript for docker run: x11docker_CMD"
  echo '  echo Imagecommand="\"$Imagecommand\""'
  echo '  echo Entrypoint="\"$Entrypoint\""'
  [ "$Dbuslaunch" = "yes" ] && echo "  echo 'command -v dbus-launch >/dev/null && Imagecommand=\"dbus-launch '\$Imagecommand'\" || echo \"x11docker WARNING: image does not provide dbus-launch (--dbus)\" >&2'"
  echo "  echo ''"
  echo "  echo export HOME=\"\\\"$Benutzerhome\\\"\""
  echo "  echo 'mkdir -p  \"\$HOME\" && cd \"\$HOME\"'"
  echo "  echo 'mkdir -p /tmp/.ICE-unix'"
  echo "  echo ''"
  echo "  echo '# link X socket into right folder /tmp/.X11-unix. '"
  echo "  echo '# Was not directly shared to provide .X11-unix with rw-access. Needed for X created in container like with startplasmacompositor'"
  echo "  echo 'mkdir -p /tmp/.X11-unix'"
  echo "  [ -e $Newxsocket ] && echo 'ln -s /tmp/X$Newdisplaynumber $Newxsocket'"
  echo "  echo ''"
  echo "  echo '# XDG_RUNTIME_DIR must be owned by user'"
  echo "  echo 'mkdir -p /tmp/XDG_RUNTIME_DIR'"
  echo "  echo 'export XDG_RUNTIME_DIR=/tmp/XDG_RUNTIME_DIR'"
  [ "$Sharewayland" = "yes" ] && [ -n "$Waylandsocket" ] && echo "  echo 'ln -s /tmp/$Waylandsocket /tmp/XDG_RUNTIME_DIR/$Waylandsocket'"
  [ "$Setwaylandenv" = "yes" ] && for Line in $Waylandtoolkitenv ; do echo "  echo export $Line" ; done
  echo "  echo ''"
  echo "  echo 'export SHELL=/bin/bash'"
  while read -r Line; do
    [ -z "$Line" ] || {
      Line="$(echo $Line | cut -d= -f1)='$(echo $Line | cut -d= -f2-)'"
      echo "  echo \"export $Line\"" 
    }
  done < <(echo -e $Customenvironment)
  echo "  echo ''"
  echo "  echo 'command -v ps >/dev/null && {'"
  echo "  echo \"  \\\$Entrypoint \\\$Imagecommand &\""
  echo "  echo '  Imagecommandpid=\$!'"
  echo "  echo '  while ps -p \$Imagecommandpid >/dev/null && [ ! -e $Cshare/timetosaygoodbye ] ; do sleep 1 ; done '"
  echo "  echo \"} || \\\$Entrypoint \\\$Imagecommand\""
  echo "} > $Imagecommandscript"
  echo "chown $Hostuser $Imagecommandscript"
  echo ""
  echo "cat $Imagecommandscript | nl >> $Dockerlogfile"
  echo ""
  echo "$Dockercommand >> $Dockerlogfile 2>&1 &"
  echo "echo \$! >> $Dockerpidfile" 
  echo "sleep 1 # wait a moment until IP is available. Currently, IP is only needed for --pulseaudio"
  echo "docker inspect --format '{{ .NetworkSettings.IPAddress }}' $Containername > $Containerip"
} > $Dockerrc


{ #### part: create xinitrc
  echo "#!/bin/bash"

  echo "Bgpidfile=$Bgpidfile"
  echo "Logfile=$Logfile"
  # declaring functions echoes them into xinitrc
  declare -f storepid
  declare -f waitforlogentry
  declare -f waitforfilecontent
  declare -f no_xhost 
  declare -f warning 
  declare -f error
  
  [ "$Noxhost" = "yes" ] && [ -n "$Hostdisplay" ] && {  
    echo "## option --no-xhost: disable any access to host display granted by xhost"
    echo "export $Hostxenv"
    echo "no_xhost"
  }
  
  echo "Hostxenv=$Hostxenv"
  echo "Newxenv=$Newxenv"

  # avoid exploit of --env with --nothing
  echo "export $Newxenv || error 'Invalid environment variables
  $Newxenv'"
  
  case $Xserver in
    Weston|Kwin|Hostwayland) ;;
    Nothing) echo "export WAYLAND_DISPLAY=''" ;;
    *) # here something for real X servers
      echo "# set X variables to new display"
      [ "$Xserver" = "Hostdisplay" ] && echo "export $Hostxenv" || echo "export $Newxenv"
      
      [ "$Xserver" = "Hostdisplay" ] || {
        [ -n "$Xhost" ] && {
          echo "# custom xhost setting (option --xhost)"
          echo "$Xhost" 
        }  || {
          echo "# disable any possible access to new X server possibly granted by xhost"
          echo "no_xhost"
        }
      }
      
      [ "$Xauthentication" = "yes" ] && {
        echo "# create new XAUTHORITY cookies"
        [ "$Xserver" = "Nxagent" ] && { 
          echo "cp $Xclientcookie $Xclientcookie.bak   # workaround cookie was created before starting xinit" 
          echo "export XAUTHORITY=$Xclientcookie.bak"
        }
        echo ':> '$Xclientcookie
        [ "$Trusted" = "yes" ] && Trusted="trusted" || Trusted="untrusted" 
        echo "xauth -v -f $Xclientcookie generate $Newdisplay . $Trusted"  
        echo "# create prepared cookie with localhost identification disabled by ffff, needed if X socket is shared. ffff means 'familiy wild'"
        echo "Cookie=\$(xauth -f $Xclientcookie nlist $Newdisplay | sed -e 's/^..../ffff/' )"   
        echo "echo \$Cookie | xauth -v -f $Xclientcookie nmerge -"
        echo "cp $Xclientcookie $Xservercookie"
        echo "export $Newxenv"
        echo "xauth list"
        [ "$Xserver" = "Nxagent" ] && echo "rm $Xclientcookie.bak"
      }

      [ "$Benutzeruid" = "$(id -u)" ] || echo "setfacl -m u:$Benutzeruid:r $Xclientcookie"  # read permissions for option --user
      [ "$nsBenutzeruid" = "$Benutzeruid" ] || echo "chmod 644 $Xclientcookie"              # read permissions for user namespace remapping

      [ "$Shareclipboard" = "yes" ] && [ -n "$Hostdisplay" ] && {
        case $Xserver in
          Xpra|Xpra-Xwayland|Nxagent) ;;           # have their own clipboard management
          Hostdisplay) ;;                          # already shared
          *)                                       # synchronizing between different X servers
            echo "# option '-c, --clipboard': Run clipboard script "
            echo "# (text copy only) (xpra has its own clipboard managment including images)"
            echo "bash $Shareclipboardscript & storepid \$! bash"
          ;;
        esac
      }
    ;;
  esac

  echo "export $Newxenv"
  [ "$Setwaylandenv" = "yes" ] && for Line in $Waylandtoolkitenv ; do echo "export $Line" ;  done
  [ "$Sharewayland"  = "yes" ] &&       [ -n "$Waylandsocket" ]    && echo "export WAYLAND_DISPLAY=$Waylandsocket"
  
  case $Xserver in # some server special settings
    Xpra|Xpra-Xwayland) 
      echo "## start xpra server on display $Newdisplay created by Xdummy or Xvfb"
      echo "export XPRA_OPENGL_DOUBLE_BUFFERED=1 # avoid xpra resizing window bug in older versions http://xpra.org/trac/ticket/1469" 
      echo "$Xprashm xpra $Xpramode $Newdisplay --use-display --no-daemon $Xpraoptions --exit-with-children --start-child='$Waitforgoodbye' > $Xpraserverlogfile 2>&1 &"
      echo 'storepid $! xpra'
      echo "waitforlogentry xpra $Xpraserverlogfile \"xpra is ready\""
      echo "# start xpra viewer on host display"
      echo "export $Hostxenv"
      echo "xpra attach $Newdisplay $Xpraoptions &"
      echo 'storepid $! xpra'
      echo "Xpraclientpid=\$!"
      echo "while : ; do"
      echo "  sleep 1"
      echo "  ps -p \$Xpraclientpid >/dev/null || { touch $Sharefolder/timetosaygoodbye ; break ; }"
      echo "done &"
      echo "export $Newxenv"
    ;;
    Xephyr)
      echo "# set keyboard layout in Xephyr to same as on host"
      echo "echo '$(setxkbmap -display $Hostdisplay -print)' | xkbcomp - $Newdisplay"
    ;;
    Xorg)
      [ "$Rotation" = "0" ] || {
        echo "# Rotation $Rotation"
        case $Rotation in
          0|normal)    Rotation="" ;;
          90)          Rotation="--rotate right";;
          180)         Rotation="--reflect xy" ;; 
          270)         Rotation="--rotate left";;
          flipped)     Rotation="--reflect y";;
          flipped-90)  Rotation="--rotate right --reflect x";;
          flipped-180) Rotation="--reflect x";;
          flipped-270) Rotation="--rotate left --reflect x";;
        esac
        echo "bash -c 'while read Line ; do xrandr --output \$Line $Rotation ; done < <(xrandr | grep \" connected\" | cut -d \" \" -f1)'"
      }
    ;;
  esac
  
  case $Xserver in
    Weston|Weston-Xwayland|Kwin|Kwin-Xwayland|Kwin-Native)
      echo "{  # catch closing compositor window"
      echo '  while ps -p $Compositorpid >/dev/null &&  [ ! -e "'$Sharefolder'/timetosaygoodbye" ]; do sleep 1 ; done'
      echo "  touch $Sharefolder/timetosaygoodbye"
      echo '} &'
    ;;
  esac

  [ -n "$Windowmanager" ] && {
    echo "# start host window manager on new display"
    echo "$Windowmanager & storepid \$! $(basename $Windowmanager | cut -d " " -f1)"
  }

  case $X11dockermode in
    run)
      case $Xserver in
        Xdummy|Xdummy-Xwayland|Xvfb) echo "export $Hostxenv" ;;
      esac
      echo "# password for docker will be prompted in $Terminal"
      echo "$Terminal '/bin/bash $Xtermrc 2>&1 | tee $Xtermlogfile'"
      echo "[ -s '$Dockerpidfile' ] && {"
      echo '  Dockerpid=`cat '$Dockerpidfile'` && storepid $Dockerpid docker'
      [ "$Pulseaudio" = "yes" ] && {
        echo "  # option '--pulseaudio': enable pulseaudio sound over tcp"
        echo "  # load pulseaudio tcp module, authenticated to container ip on specified port"
        echo "  waitforfilecontent $Containerip  && Pulseaudiomoduleid=\$(pactl load-module module-native-protocol-tcp port=$Pulseaudiotcpport auth-ip-acl=\$(cat $Containerip))"
      }
      echo '  # wait for docker until it terminates. bash builtin wait does not work in this case'
      echo "  while ps -p \$Dockerpid >/dev/null 2>&1 && [ ! -e $Sharefolder/timetosaygoodbye ] ; do sleep 1 ; done"
      echo '}'
    ;;
    exe) # includes --xonly
      echo "# run host application"
      echo "echo '$Hostexe' > $Sharefolder/x11docker_CMD"
      echo "bash $Sharefolder/x11docker_CMD & Hostexepid=\$! && storepid \$! bash"
      echo "while [ ! -e $Sharefolder/timetosaygoodbye ] && ps -p \$Hostexepid >/dev/null; do sleep 1 ; done"
    ;;
  esac
  echo "touch $Sharefolder/timetosaygoodbye"

  # option '--pulseaudio'. remove custom tcp module
  [ "$Pulseaudio" = "yes" ] && echo '[ -n "$Pulseaudiomoduleid" ] && pactl unload-module $Pulseaudiomoduleid'
  
  case $Xserver in
    Xpra|Xpra-Xwayland) echo "[ -e "$HOME/.:$Newdisplaynumber-fakexinerama" ] && rm $HOME/.:$Newdisplaynumber-fakexinerama   # clean up behind xpra"  ;;
  esac
  
} > $Xinitrc

{ #### part: create xtermrc (used by xinitrc to get password and run docker)
  echo "#! /bin/bash"
  declare -f error
  echo "Logfile=$Logfile"
  echo "Hostxenv=$Hostxenv"
  echo "Cacherootfolder=$Cacherootfolder"
  [ "$Windowmanager" = "" ] && [ "$Getroot" != "bash -c" ] && case $Xserver in
    Xorg|Xephyr|Weston-Xwayland|Xwayland)
      echo "echo 'Please move mouse cursor into terminal area to get keyboard focus.'"
    ;;
  esac
  echo "
echo 'Created docker command:'
echo ''
echo $Dockercommand
echo ''"
  [ "$Getroot" = "bash -c" ] || echo "echo 'Please type in your password to run docker on display $Newdisplay:'"
  echo ":> $Dockerlogfile"
  echo ":> $Dockerpidfile"
  echo "$Getroot 'bash $Dockerrc'"
  echo "sleep 3"
  echo '[ -s "'$Dockerpidfile'" ] && { ps -p $(cat '$Dockerpidfile') >/dev/null 2>&1 || error "Docker startup failed! Last lines of docker.log: '
  echo '  $(tail '$Dockerlogfile')"'
  echo '} || { error "docker startup was not successfull. '
  echo '  Maybe you mistyped your password?'
  echo '  Last 5 lines of xterm.log:'
  echo '  $(tail -n5 '$Xtermlogfile')"'
  echo '}' 
  echo "cat $Dockerlogfile | grep -q 'Pulling from $Imagename' && tail -F $Dockerlogfile"
} > $Xtermrc

{ #### part:  some verbose output
    verbose "$(date) $(lsb_release -ds) $(Xorg -version 2>&1 | grep X.Org)
$(xrandr | grep Screen)
Command: $0 $X11dockerargs
Parsed options: $Parsedoptions"
    [ "$Xserver" != "Nothing" ] && {
      verbose "X or Wayland server: $Xserver"
      verbose "Virtual screen size: $Screensize"
      verbose "Environment variables: 
  $Newxenv"
    }
    [ -n "$Waylandsocket" ] && {
      verbose "XDG_RUNTIME_DIR: $XDG_RUNTIME_DIR"
      verbose "Wayland socket: $Waylandsocket"
    }
    verbose "Image name: $Imagename"
    verbose "Image command: $Imagecommand"
    verbose "Current cache folder: $Cachefolder"
    verbose "IP of docker interface: $Dockeriprange"
    case $Xserver in
      Xpra|Xpra-Xwayland) verbose "As window manager serves: Xpra" ;;
      Hostdisplay|Nothing|Weston|Hostwayland|Kwin|Kwin-Native) ;;
      *) [ "$Windowmanager" ] && verbose "As window manager from host serves: $Windowmanager" ;;
    esac
    [ -n "$Hostexe" ] && verbose "Running host application: $Hostexe"
    [ "$Adduserhome" = "yes" ] && verbose "Sharing directory $Adduserhomefolder with container as its home directory /home/$(id -u)"
    [ -n "$Xcommand" ] && verbose "Created X server command:
  $Xcommand" 
    [ -n "$Compositorcommand" ] && verbose "Created compositor command:
  $Compositorcommand"
    verbose "Created docker command:
  $Dockercommand"
    [ -e $Westonini ] && verbose "Created weston.ini:
$(cat $Westonini | nl)"
    [ -e "$Dockerrc" ] && verbose "Created dockerrc:
$(cat $Dockerrc | nl)" 
    verbose "Created xinitrc:
$(cat $Xinitrc | nl)"
    [ -e "$Xtermrc" ] && verbose "Created xtermrc:
$(cat $Xtermrc | nl)"
    verbose "Logfiles are:
  $Xinitlogfile
  $Xpraserverlogfile
  $Xtermlogfile
  $Dockerlogfile
Summary logfile: $Logfile
Copy of logfile: $Cacherootfolder/x11docker.log"
    verbose "Running X server $Xserver on display $Newdisplay now ..."

  # create summary logfile
  tail --pid=$$ --retry -n +1 -F $Xtermlogfile $Dockerlogfile $Xpraserverlogfile $Xinitlogfile $Compositorlogfile 2>/dev/null >> $Logfile &
  tail --pid=$$ --retry -n +1 -F $Logfile >$Cacherootfolder/x11docker.log 2>/dev/null &
  # option --verbose: Show logfile on stdout
  [ "$Verbose" = "yes" ] && tail --pid=$$ --retry -n +1 -F $Logfile >&3 2>/dev/null &
}

{ #### part: option '--starter': create desktop starter
  if [ "$Createdesktopstarter" = "yes" ] ; then
    X11dockerargs=$(echo $X11dockerargs | sed 's/--starter/ /')
    Name="$(echo $Imagename | tr / -) $(echo $Imagecommand | tr -cd '[:alpha:][:digit:][:blank:]-_.') x11docker"
    read -re -p "Please choose a name for your desktop starter: " -i "$Name" Name
    { echo "#!/usr/bin/xdg-open
[Desktop Entry]
Type=Application
Name=$Name
Exec=$(basename $0) $X11dockerargs
Icon=system-run
Comment=
Categories=System
Keywords=docker x11docker $(echo $Name | tr -c '[:alpha:][:digit:][:blank:]' ' ' )"
    case $(command -v x11docker) in 
      "")echo "TryExec=$0 $X11dockerargs" ;;
      *) echo "TryExec=x11docker $X11dockerargs" ;;
    esac
    } > "$(xdg-user-dir DESKTOP)/$Name.desktop"
    verbose "Created desktop icon $(xdg-user-dir DESKTOP)/$Name.desktop"
    exit 0
  fi
}

{ #### Finally: run new X server or/and Wayland Compositor
  :> $Xinitlogfile
  case $Xserver in
    Xorg|Xpra|Xephyr|Xdummy|Xvfb|Xwayland|Nxagent) xinit $Xinitrc -- $Xcommand        >> $Xinitlogfile  2>&1 ;;
    Hostdisplay|Hostwayland|Kwin-Native)           bash  $Xinitrc                     >> $Xinitlogfile  2>&1 ;;
    Xpra-Xwayland|Xdummy-Xwayland)
      [ "$WAYLAND_DISPLAY" = "" ] || [ "1" = "$(awk -v a="$Scaling" 'BEGIN {print (a < 1)}')" ] && {
        WAYLAND_DISPLAY=""  $Compositorcommand                                        > $Compositorlogfile 2>&1 & storepid $! weston
        waitforlogentry "weston" $Compositorlogfile "weston-desktop-shell"            >> $Xinitlogfile  2>&1
        xdotool windowunmap "0x$(printf '%x\n' $(cat $Compositorlogfile | grep 'window id' | rev | cut -d' ' -f1 | rev))"
      }
      WAYLAND_DISPLAY=$Waylandsocket               xinit $Xinitrc -- $Xcommand        >> $Xinitlogfile  2>&1 ;;
    Weston-Xwayland)
      [ -n "$WAYLAND_DISPLAY" ] && export DISPLAY=""
      $Compositorcommand                                                              > $Compositorlogfile 2>&1 & storepid $! weston       && export Compositorpid=$!
      waitforlogentry   "weston" $Compositorlogfile "weston-desktop-shell"            >> $Xinitlogfile  2>&1 
      WAYLAND_DISPLAY=$Waylandsocket               xinit $Xinitrc -- $Xcommand        >> $Xinitlogfile  2>&1 ;;
    Weston)
      [ -n "$WAYLAND_DISPLAY" ] && export DISPLAY=""
      $Compositorcommand                                                              > $Compositorlogfile 2>&1 & storepid $! weston       && export Compositorpid=$!
      waitforlogentry   "weston" $Compositorlogfile "weston-desktop-shell"            >> $Xinitlogfile  2>&1 
                                                   bash  $Xinitrc                     >> $Xinitlogfile  2>&1 ;;
    Kwin-Xwayland)
      $Compositorcommand --exit-with-session="$Waitforgoodbye"                        > $Compositorlogfile 2>&1 & storepid $! kwin_wayland && export Compositorpid=$!
      waitforlogentry   "kwin"   $Compositorlogfile "X-Server"                        >> $Xinitlogfile  2>&1 || error x
      WAYLAND_DISPLAY=$Waylandsocket               xinit $Xinitrc -- $Xcommand        >> $Xinitlogfile  2>&1 ;;
    Kwin)
      #[ -n "$Hostdisplay" ] && export WAYLAND_DISPLAY=""
      $Compositorcommand --exit-with-session="$Waitforgoodbye"                        > $Compositorlogfile 2>&1 & storepid $! kwin_wayland && export Compositorpid=$!
      waitforlogentry   "kwin"   $Compositorlogfile "X-Server"                        >> $Xinitlogfile  2>&1
                                                   bash  $Xinitrc                     >> $Xinitlogfile  2>&1 ;;
    Nothing)                                       bash  $Xinitrc          2>&1 | tee -a $Xinitlogfile  2>&1 ;;
  esac
}
