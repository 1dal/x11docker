#! /bin/bash

# x11docker
# Run GUI applications and desktop environments in docker on a separate X server or Wayland compositor.
# Provides GPU acceleration and pulseaudio sound. Circumvents common X security leaks.
# Type 'x11docker --help' or scroll down to read usage information.
# https://github.com/mviereck/x11docker

Version="3.2.1"

changelog() {
# ToDo:
# BUG error() in xinitrc does not terminate --xpra
# --kwin*: wrong fullscreen and crashes in gnome-wayland, strange in weston, WAYLAND_DISPLAY="" does not help, probably bug in kwin
# check xpra version for --scale
# scale>1 Xwayland in Weston is too large (Xwayland BUG), rendering issues on tty (scaled/unscaled Xwayland on keyboard/mouse events)
# weston on tty: create modeline?
# check X security leaks. Avoid X if setuid?
# debian bugreport lightdm/sddm contra gdm, dm can crash on tty switch if multiple graphical sessions are running
# check whether VT is not in use with --xorg

# x11docker changelog
# 05.05.2017 V3.2.1  minor bugfix: --scale with --xpra-xwayland under X without Waylan failed
# 04.05.2017 V3.2.0  --scale: new option for xpra and weston
#                    --rotate: new option for weston
#                    --dpi: new option for screen density
#                    minor bugfix: checking screensize in Gnome-Wayland failed looking for primary display, window was not roughly maximized
#                    bugfix: missing error() in xinitrc
#                    allow MIT-SHM for --exe
# 03.05.2017 V3.1.16 bugfix --xpra-wayland in check for WAYLAND_DISPLAY
# 02.05.2017 V3.1.15 minor bugfix in choosing terminal, replace $Waylandterminal with $Terminal in re-check
#                    minor bugfix xtermrc and xinitrc: check if $Dockerpidfile is not empty
#                    faster startup for --xpra-xwayland, --weston-xwayland, --kwin and --kwin-xwayland
#                    code cleanup
# 01.05.2017 V3.1.14 checkorphaned() uses container names instead of numbers
#                    bugfix --exe: reliable kill $Hostexe, even with --weston* and --kwin*
#                    bugfix: remove : and / from image name in $Containername
# 30.04.2017 V3.1.13 Improved multimonitor support (still missing: multihead)
#                    bugfix: redirection of stderr wihout cat, avoids broken pipe on ctrl-c in ubuntu and opensuse
#                    bugfix: removed custom socket in xpra (failed in opensuse)
#                    removed $Cidfile at all, cleanup hint in finish() with $Containername
#                    avoid root ownership for $Dockerlogfile and $Dockerpidfile
# 29.04.2017 V3.1.12 clean up confusion with x11docker.log
#                    minor bugfix: include warning() in xinitrc
#                    bugfix in xinitrc for --no-xhost
#                    don't share $Xclientcookie as $Sharefolder is already shared
#                    don't use $Cacherootfolder for parsererror
#                    hint to use --sudo on some systems
#                    use id -g instead of $Benutzer for group name
#                    add lsb-release -ds to verbose output
# 29.04.2017 V3.1.11 disabled $Cidfile as not important and due to #10
# 28.04.2017 V3.1.10 minor bugfix: check for xenial instead of 16.04/xvfb
#                    regression fix: set XPRA_XSHM=0 on Shareipc=no
# 27.04.2017         disable --desktop-scaling in xpra, not supported before xpra v1.x
# 27.04.2017 V3.1.9  don't create Cacherootfolder in variable definitions
# 26.04.2017         check for Xvfb on Ubuntu 16.04
# 25.04.2017 V3.1.8  Add advice for --xorg how to setup xserver-xorg-legacy
# 25.04.2017 V3.1.7  --xpra and --xdummy now use Xvfb if installed. Compare #9, Xdummy cannot be used on Ubuntu 16.04 due to xorg.conf location
#                    set $Windowmanager in auto choosing X server if switching to desktop windows
# 21.04.2017 V3.1.6  bugfix 2 --nxagent: don't close nxagent on every call of nxclient
# 20.04.2017 V3.1.5  bugfix --nxagent: don't close nxagent on every call of nxclient
# 19.04.2017 V3.1.4  --nxagent supports untrusted cookies
#                    bugfix: don't set dpi if xdpyinfo fails
# 18.04.2017 V3.1.3  --nxagent cookie workaround as it ignores XAUTHORITY on option -auth
#                    --nxagent workaround to terminate on pressing window close button -> fake nxclient
#                    bugfix typo in finish() looking for docker pid
# 18.04.2017 V3.1.2  --nxagent sets right keyboard layout, thanks to Ulrich!
# 18.04.2017 V3.1.1   --nxagent now supports --size, --fullscreen and --clipboard, thanks to Ulrich Sibiller from Arctica!
# 17.04.2017          check dpi from host and set this to new X server
#                     xpra xmessage to be patient
#                     disabled keyboard adjusting for --nxagent
# 16.04.2017 V3.1.0   --nxagent: new X server option
# 15.04.2017 V3.0.0   Wayland support ready.
# 14.04.2017          code cleanup
#                     second stderr &3 to show warnings and errors also from within xinitrc and xtermrc
#                     error messages on docker startup failure in xtermrc
# 10.04.2017          --xhost changed to --xhost+, affects new X server only
# 08.04.2017          --kwin und --kwin-wayland: new X server / wayland options
#                     xdummy.conf or --xpra: custom modeline setting fittung to actual resolution
#                     --xdummy regards --size
# 07.04.2017          x11docker_CMD checks if ps is available
# 06.04.2017          --wm changed, autochoosing no longer default
#                     --desktop dismissed
# 05.04.2017          old --env now is called --showenv
#                     --env: new option: set custom envionment variables
#                     --dbus: new option, run image command with dbus-launch 
# 04.04.2017          chmod 1777 /tmp/X11-unix to allow creation of X sockets in container
#                     --verbose output much more reliebalenow, tail improved
# 03.04.2017          use prefix unix for DISPLAY to disable MIT_SHM instead using other environment variables
# 02.04.2017          --virtualgl dismissed
#                     --dockerenv dismissed
#                     --xpra-image --xorg-image --xdummy-image dismissed
#                     --tcp --tcpxsocket --xsocket dismissed
# 01.04.2017          --weston, --wayland: new options for pure Wayland applications
# 31.03.2017          --xpra-xwayland: new X server option
#                     create dektop starter with basename instead of $0
#                     createuser: start with --user=0 to allow useradd and su
#                     --setwaylandenv: new option setting environment variables for toolkits like QT and GTK to use wayland
# 28.03.2017          dismissed --glamor, now always enabled.
#                     dismissed --sharegpu: same is done with --gpu
#                     --nothing: Provide no X or Wayland server
#                     --sharewayland: Share host wayland socket and set WAYLAND_DISPLAY
#                     reverse order of killing of bgpids in finish(),last one first, to catch possible further output with tail -F
#                     Newdisplaynumber for xorg starts with 8, Newxvt not added 7
#                     xinitrc: XPRA_OPENGL_DOUBLE_BUFFERED=1 to avoid xpra bug 1469
# 26.03.2017          check and set $XDG_RUNTIME_DIR for weston and Xwayland
#                     --weston-xwayland and --xwayland: new X server options
# 25.03.2017  V3.beta start with eperimental Wayland support
# 10.04.2017  V2.5    Stable release, last one including --xpra-image, --xorg-image, --xdummy-image
#                     Still available on https://github.com/mviereck/x11docker/tree/x11docker_2.5
# 24.02.2017  V2.0
# 16.10.2015  V1.0
  : 
}
usage() {               # --help: show usage information
    echo "
x11docker: Create a new X server & run GUI applications and desktop 
         environments in docker and show them on your display.
         Useful to avoid security issues concerning X forwarding.
         Doesn't have dependencies inside of docker images (except for
         special options --gpu, --pulseaudio and --dbus).
         Wayland support included.
         GPU hardware accelerated OpenGL with option --gpu.
         Pulseaudio sound with option --pulseaudio.
         Clipboard exachange with option --clipboard.

Usage:
To run a docker image with new X server (auto-choosing X server option):
  x11docker [OPTIONS] IMAGE [COMMAND]
  x11docker [OPTIONS] -- "'"[DOCKER_RUN_OPTIONS]"'" IMAGE [COMMAND [ARG1 ARG2 ...]]
To run a host application on a new X server:
  x11docker [OPTIONS] --exe COMMAND
  x11docker [OPTIONS] --exe -- COMMAND [ARG1 ARG2 ...]
To run only a new empty X server:
  x11docker [OPTIONS]

 * The new X server will be terminated once dockered application is closed.
 * On systems without a root password like Ubuntu, use option '--sudo'.
 * x11docker is designed to run images only. New containers will be discarded.

Dependencies: 
  Depending on chosen options, x11docker needs some packages to be installed. 
  It will check for them on startup and show messages if some are missing. 
  List of possibly needed packages:
  more important: 
      xpra xserver-xephyr weston xwayland xdotool
  less important: 
      xclip pulseaudio xserver-xorg-legacy xserver-xorg-video-dummy kwin

Options:
     --help            display this message and exit
     --license         show license of script (MIT) and exit
 -w, --wm=COMMAND      host window manager to use. If COMMAND is 'auto' or 'm',
                       x11docker will try to autodetect an installed one.
 -e, --exe             execute host application on new X server (no docker)
     --xonly           only create new empty X server
 
X server options: 
     --auto            auto choose X server for docker applications (default)
 -a, --xpra            use xpra to show application windows on display :0
                       (needs package 'xpra' to be installed.
                       On Ubuntu 16.04 also package 'xvfb')
 -y, --xephyr          use Xephyr to show desktops in a window on display :0
                       (needs package 'xserver-xephyr' to be installed)
 -A, --xpra-xwayland   use xpra to show single applications using Xwayland
                       (needs xpra and xwayland, on X also weston and xdotool)
 -Y, --weston-xwayland use Wayland weston with Xwayland. Runs as nested server
                       in X or on its own from console. Needs packages 'weston'
                       and 'xwayland' to be installed.
 -h, --hostdisplay     share host display :0, DEGRADES CONTAINER ISOLATION.
                       Discouraged, use with fully trusted images only.
                       Least overhead of all X server usage variations.
                       Rendering glitches due to MIT-SHM RAM access errors
                       can be avoided with options --untrusted or --ipc.
 -x, --xorg            use new core Xorg server, Runs from console.
                       On Ubuntu 16.04 you need package xserver-xorg-legacy.
                       Edit file '/etc/X11/Xwrapper.conf' and 
                       replace line:        allowed_users=console
                       with lines           allowed_users=anybody
                                            needs_root_rights=yes
                       (This allows to start from within X, too!)
 -n, --nxagent         seamless like --xpra if --wm is empty or not given,
                       windowed like --xephyr if --wm is given or 'none'.
                       Needs nxagent to be installed.
 
special X servers:
 -X, --xwayland        use Xwayland, needs a running wayland compositor.
                       Needs 'xwayland' to be installed.
     --kwin-xwayland   like --weston-xwayland, but using kwin_wayland
 -N, --kwin-native     similar to --kwin-xwayland, but uses builtin xwayland
                       of kwin_wayland. Needs option --untrusted or --ipc
                       to avoid MIT-SHM errors. Experimental, testing purposes.
     --xdummy          invisible X server for custom setups of VNC, xpra
                       or network access. Needs package 'xvfb' or 
                       'xserver-xorg-video-dummy'
                       
No X server at all:
 -W, --weston          Weston without X for pure Wayland applications.
                       Runs in X or from console. Needs package weston.
 -H, --hostwayland     Share host Wayland without X for pure Wayland apps.
                       (Needs already running Wayland compositor)
 -K, --kwin            KWin without X for pure Wayland applications.
                       Runs from X or from console. Needs package kwin.
     --nothing         Do not provide any X or wayland server

Screensize options:                       
 -f, --fullscreen      run Xephyr, nxagent or Weston in fullscreen mode
     --size XxY        set Xephyr, Weston or KWin screen size (f.e. 800x600)
 -r, --resizeable      make Xephyr window resizeable (Note: some window
                       managers/desktops won't like this and may misbehave)
 -l, --scale N         scale factor N for xpra or weston. 
                       Allowed for --xpra and --xpra-xwayland: 0.25 ... 8.0
                       Allowed for --weston and --weston-xwayland: 1...9
     --rotate N        Rotate display (--weston and --weston-xwayland only)
                       Allowed values: 0, 90, 180, 270, flipped, flipped-90,
                       flipped-180, flipped-270  (flipped = mirrored)
     --dpi N           dpi value (dots per inch) to submit to clients

User and homedir options:
 -u, --hostuser        create a user in container similar to host user
                       (same UID, same GID, same name)
                       Recomended for all use cases, improves security.
 -U, --sudouser        same as '--hostuser', but container user gains root
                       permissions per sudo without password
 -m, --home            share folder ~/x11docker/Imagename in host home folder
                       with created container.
                       
GPU, clipboard and sound options:
 -c, --clipboard       share clipboard between X servers (works best with xpra.
                       Most other X servers need xclip to be installed) 
 -p, --pulseaudio      enable sound with pulseaudio over tcp. Needs
                       pulseaudio to be installed on host and in image
 -g, --gpu             Hardware accelerated OpenGL rendering. Shares files in
                       /dev/dri. Works with all X and Wayland options except
                       --xpra, --nxagent and --xdummy. --xephyr has limited 
                       benefit. Needs MESA/OpenGL to be installed in image.
                       Degrades container isolation, container access to GPU.  
Advanced options:
 -E, --waylandenv      set some environment variables summoning some toolkits
                       to use Wayland. (GTK QT Clutter SDL Elementary Evas)
 -d, --dbus            start image command with dbus-launch (often needed
                       for QT5 applications running on Wayland)
                       (needs dbus-x11 to be installed in image)
 -s, --sudo            use 'sudo' to run 'su -c docker ...' (Ubuntu special)
 -P, --no-password     don't ask for root password
 -o, --no-xhost        disable any access to host X server granted by xhost
 -t, --untrusted       create untrusted cookies. Restricts X access, avoids
                       keylogging with --hostdisplay, but some applications
                       will crash. OpenGL does not work.
     --starter         create starter on desktop and exit
     --orphaned        check for non-removed containers and left cache files 
                       possibly owned by root and created by docker
 -v, --verbose         be verbose

Developer options:
     --showenv         echo \$DISPLAY, \$XAUTHORITY and \$WAYLAND_DISPLAY
     --env VAR=value   set custom environment variable VAR=value
 -S, --sharewayland    share Wayland socket and WAYLAND_DISPLAY
     --vt N            use vt / tty N
     --display N       use display number N
     --ps              preserve container on exit (as a default, x11docker sets
                       docker run option '--rm' to remove created container)
     --root            allow root to run x11docker. Default: No
                       (A new X server should not run with root privileges)
     --cache           don't delete cache files on exit (including logs)
     --xhost+          set \"xhost +\" on new X server (testing purposes only)
     --no-auth         disable cookie authentication (testing purposes only)
     --ipc             set docker run option --ipc=host, BREAKS ISOLATION
                       share host interprocess communication and shared memory.
     --net             set docker run option --net=host, BREAKS ISOLATION
                       share host network stack including dbus connections
 
Installation options  (needs root permissions):
     --install        install x11docker (and x11docker-gui) on your system
                      (uses /usr/local/bin) (creates icon and desktop entry)
                      (creates /usr/share/doc/x11docker for readme and license)
     --update         update x11docker with latest version from github
     --remove         remove x11docker from your system

x11docker version $Version
"
}
license() {             # --license: show license (MIT)
echo 'MIT License

Copyright (c) 2015, 2016 Martin Viereck

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.'
}
error() {               # show error messages on stderr and exit
  Message="$* 
  Type 'x11docker --help' for usage information
  For debugging, run x11docker in terminal and/or enable option '--verbose'
  and look at logfile $Cacherootfolder/x11docker.log"
  echo "
  
$(tput setaf 1)x11docker ERROR$(tput sgr0) $Message
" >&3
  [ -t 1 ] || echo "x11docker ERROR: $Message" | xmessage -file - -default okay
  [ -e $Logfile ] && echo "x11docker ERROR: $Message" >> $Logfile
  exit 1
}
warning() {             # show warning message
  echo "$(tput setaf 3)x11docker WARNING:$(tput sgr0) $*" >&3
  #xmessage "$*" -timeout 10 &
  echo "" >&3
  [ -e $Logfile ] && echo "x11docker WARNING: $*" >> $Logfile
}
verbose() {             # show verbose messages
   [ -e $Logfile ] && echo "x11docker: $*
  " >> $Logfile
}
installer() {           # options --install, --update, --remove: Installer for x11docker
  # --install:
  #   - copies x11docker and x11docker-gui to /usr/local/bin
  #   - installs icon in /usr/share/icons
  #   - creates x11docker.desktop file in /usr/share/applications
  # --update:
  #   - download and install latest version from github
  # --remove
  #   - remove installed files

  # Prepairing
  case $1 in
    --install)
      command -v x11docker > /dev/null && { error "x11docker seems to be installed already.
  Try 'x11docker --update' instead." ; }
      [ -f "./x11docker" ]             || { error "File x11docker not found in current folder.
  Try 'x11docker --update' instead." ; }
      command -v kaptain > /dev/null   || { warning "x11docker-gui needs package kaptain
  to provide a GUI, but could not find kaptain on your system. 
  Please install package kaptain if you want to use x11docker-gui.
  x11docker itself does not need it, though." ; }
    ;;
    --update)
      mkdir /tmp/x11docker-install
      cd /tmp/x11docker-install || error "Could not create or cd to /tmp/x11docker-install"

      echo "Downloading latest x11docker version from github"
      wget https://github.com/mviereck/x11docker/archive/master.zip
      [ $? ] || error "Could not download x11docker-master from github"

      echo "Unpacking archive"
      unzip master.zip
      [ $? ] || error "Could not unzip archive"
  
      echo ""
      cd /tmp/x11docker-install/x11docker-master || error "could not cd to /tmp/x11docker-install/x11docker-master"
    ;;
  esac

  # Doing
  case $1 in
    --install|--update)
      echo "Installing x11docker and x11docker-gui in /usr/local/bin"
      cp x11docker /usr/local/bin/
      chmod +x /usr/local/bin/x11docker
      cp x11docker-gui /usr/local/bin/
      chmod +x /usr/local/bin/x11docker-gui

      echo "Creating icon and application entry for x11docker"
      x11docker-gui --icon
      xdg-icon-resource install --context apps --novendor --size 72 /tmp/x11docker.png x11docker
      rm /tmp/x11docker.png
      echo "[Desktop Entry]
Version=1.0
Type=Application
Name=x11docker
Comment=Run GUI applications in docker images
Exec=x11docker-gui
Icon=x11docker
Categories=System
" > /usr/share/applications/x11docker.desktop

      echo "Storing README.md and LICENSE.txt in /usr/share/doc/x11docker"
      mkdir -p /usr/share/doc/x11docker
      cp README.md /usr/share/doc/x11docker/
      cp LICENSE.txt /usr/share/doc/x11docker/
      
      echo "Installation ready: x11docker version $(x11docker --version)"
    ;;
    --remove)
      echo "removing x11docker from your system"
      rm -v /usr/local/bin/x11docker
      rm -v /usr/local/bin/x11docker-gui
      rm -v /usr/share/applications/x11docker.desktop
      rm -R -v /usr/share/doc/x11docker
      xdg-icon-resource uninstall --size 72 x11docker
    ;;
  esac

  # Cleanup
  case $1 in
    --update)
      echo "Removing downloaded files"
      cd ~
      rm -R /tmp/x11docker-install
    ;;
  esac
}
checkorphaned() {       # option --orphaned : check for non-removed containers and left cache files possibly owned by root and created by docker
  echo "x11docker will check for orphaned containers from earlier sessions.
  This can happen if docker was not closed successfully. If this is the case,
  and option --home was chosen, docker creates missing shared files as
  folders owned by root in your home cache folder. This is annoying. x11docker
  will try to find such containers and delete all x11docker cache files.
  Caution: any currently running x11docker sessions will be terminated, too.
  Please type in your password to get a current list of existing containers:"
  Orphanedcontainers=""
  Orphanedfolders=""
  cd $Cacherootfolder
  [ $? ] && Orphanedfolders=$(echo $(find $Cacherootfolder -mindepth 1 -maxdepth 1 -type d))
  while read -r Line ; do
    Orphanedcontainers="$Orphanedcontainers $(echo $Line | rev | cut -d ' ' -f1 | rev)"
  done < <($Getroot 'docker ps -a' | grep "x11docker_X")
  if [ -z "$Orphanedcontainers" ] && [ -z "$Orphanedfolders" ] ; then echo "No orphaned containers or cache files found. good luck!"
  else
    echo "Found orphaned containers: $Orphanedcontainers"
    echo -n "Found orphaned folders in $Cacherootfolder: " 
    for Line in $Orphanedfolders ; do echo -n "$(basename $Line) " ; done ; echo ""
    echo "Type in your password to remove orphaned containers and folders:"
    if [ -n "$Orphanedcontainers" ] && [ -n "$Orphanedfolders" ] ; then
      echo $Getroot "'docker rm -f $Orphanedcontainers ; rm -R -f -v $Orphanedfolders'"
      eval $Getroot "'docker rm -f $Orphanedcontainers ; rm -R -f -v $Orphanedfolders'"
    fi
    if [ -n "$Orphanedcontainers" ] && [ -z "$Orphanedfolders" ] ; then
      echo $Getroot "'docker rm -f $Orphanedcontainers'"
      eval $Getroot "'docker rm -f $Orphanedcontainers'"
    fi
    if [ -z "$Orphanedcontainers" ] && [ -n "$Orphanedfolders" ] ; then
      echo $Getroot "'rm -R -f -v $Orphanedfolders'"
      eval $Getroot "'rm -R -f -v $Orphanedfolders'"
    fi
  fi
  echo "Ready."
}
storepid () {           # store pids and names in file $Bgpidfile
  # store Pid and process name of background processes in file
  # $1 should be Pid, $2 should be name of process
  # for use on exit / with trap to clean up with background processes
  # this subroutine has a twin in xinitrc
  echo $1 $2 >> $Bgpidfile
}
finish() {              # trap routine, clean up background processes and cache
  [ -e "$Sharefolder" ] && touch $Sharefolder/timetosaygoodbye

  [ -s "$Bgpidfile" ] && {
    # check for possible remaining background processes stored in $Bgpidfile
    # double check with Pid and name; kill if process is still running
    while read -r Line ; do 
      Pid=$(echo $Line | awk '{print $1}')
      Name=$(echo $Line | awk '{print $2}')
      if [ -n "$Pid" ] && [ -n "$(ps -p $Pid | grep $Name)" ] ; then
        case $Name in
          weston) kill $Pid
          ;;
          docker) kill $Pid
            warning "Found remaining docker process. Most probably the
  X session was not closed in a clean way. Can not send TERM signal because 
  docker runs as root. Will wait up to 10 seconds for docker to finish."
            Zeit=$(date +%s)
            while [ -n "$(ps -p $Pid | grep docker)" ] ; do
              echo "waiting for docker to terminate ..."
              sleep 1
              [ 10 -lt $(echo "$(date +%s) - $Zeit" | bc) ] && break
            done
            if [ -n "$(ps -p $Pid | grep docker)" ] ; then
              warning "docker didn't terminate as it should. 
  Will not clean cache to avoid file permission problems. 
  You can remove the new container with command:
docker rm -f $Containername
  Afterwards, remove cache files with:
rm -R $Cachefolder
  or let x11docker do the cleanup work for you: 
x11docker --orphaned"
              Preservecachefiles="yes"
            else
              echo "docker container terminated successfully"
            fi
          ;;
          bash) # from --exe for x11docker_CMD, see xinitrc
            pkill -KILL -P $Pid
          ;;
          *) warning "Found remaining background process.
  Will send signal KILL to process tree of $Line"
            pkill -KILL -P $Pid
          ;;
        esac
      fi
    done < <(tac $Bgpidfile)
  }
  sleep 1
  # option '--cache': [don't] remove cache files
  case "$Preservecachefiles" in
    "no")  [ -n "$(echo $Cachefolder | grep .cache)" ] && [ -n "$(echo $Cachefolder | grep x11docker)" ] && [ "x11docker" != "$(basename $Cachefolder)" ] && rm -f -R $Cachefolder;; 
  esac
}
verlte() {              # version number checker $1 less than or equal $2 
  [  "$1" = "$(echo -e "$1\n$2" | sort -V | head -n1)" ]
}
verlt() {               # version number checker $1 less than $2 
  [ "$1" = "$2" ] && return 1 || verlte $1 $2
}
isnum() {
  # check if $1 is a number
  [ "1" = "$(awk -v a="$1" 'BEGIN {print (a == a + 0)}')" ]
}
waitforfilecreation() { # replacement for inotify-wait: wait up to 10s for a file to be created
  # return 1 on timeout
  # $1 file to wait for
  Zeit=$(date +%s)
  while [ ! "$(find  $1 2>/dev/null)" ] ; do
    sleep 0.2
    [ 10 -lt $(expr $(date +%s) - $Zeit) ] && return 1
  done
  return 0
}
waitforlogentry() {     # wait for entry in logfile
  # $1 is the application we are waiting for to be ready
  # $2 points to logfile
  # $3 keyword to wait for 
  # terminate x11docker on fail
  Zeit=$(date +%s)
  while [ -z "$(cat $2 | grep "$3")" ] ; do
    echo "waiting since $(expr $(date +%s) - $Zeit)s for $1 to be ready..." >&2 && sleep 1
    [ 15 -lt $(expr $(date +%s) - $Zeit) ] && error "x11docker: Timeout error: $1 not ready after 15 seconds."
  done
}
no_xhost() {            # remove any access to X server granted by xhost
  xhost
  xhost | tail -n +2  /dev/stdin | while read -r Line ; do  # read all but the first line (header)
    xhost -$Line                                         # disable every entry
  done
  xhost -                                                # enable access control
  [ "$(xhost | wc -l)" = "1" ] || { warning "Remaining xhost permissions found on display $DISPLAY!
$(xhost)" 
  }
}
askforimagecommand() {  # ask for password to extract image command if needed and not given
  [ -t 1 ] || { error "You need to specify an image command. Please specify one
  or run in terminal for more info and password prompt to get CMD from image."
  }
  warning "No command for image specified. Need to look for
  CMD command of docker image. Please type in your password to run 
  $Getroot 'docker inspect --format='{{.Config.Cmd}}' $Imagename'"
  Imagecommand=$($Getroot "docker inspect --format='{{.Config.Cmd}}' $Imagename")
  Imagecommand=$(echo "$Imagecommand" | tr -d [])
  Imagecommand=$(echo "$Imagecommand" | sed 's/\/bin\/sh -c//')
  warning "To avoid this password prompt, you can start x11docker
  next time with command:
    x11docker $X11dockerargs $Imagecommand"
  X11dockerargs="$X11dockerargs $Imagecommand"
}

{ #### part: variables default settings

exec 3>&2                                       # second stderr to show x11docker warnings and errors from within redirected output (especially xinitrc and xtermrc)

Cacherootfolder=$HOME/.cache/x11docker          # define cache folder to store temporary files
Logfile="x11docker.log"                         # changes later to reside in $Sharefolder. On exit a copy of logfile will be placed here
Sharefolder="share"                             # subfolder for shared files
Cshare="/x11docker"                             # mountpoint of $Sharefolder in container

X11dockermode="run"                             # can be either "xonly", "run" or "exe", depends on options. while parsing, xonly changes to run or exe
Dockeroptions=""                                # options for docker without image name/image args
X11dockerargs="$*"                              # arguments for x11docker
Imagename=""                                    # name of image to run
Imagecommand=""                                 # name of image [+ command+args]
Hostexe=""                                      # can contain host executable
Containername=""                                # name of container, set by x11docker, to make --orphaned able to find orphaned containers

Dockerip=""                                     # IP adress of docker interface
Dockeriprange=""                                # IP adress of docker interface including suffix /16
Dockerpid=""                                    # process ID of docker container

Imagecommandscript=x11docker_CMD                # name of shared script containing imagecommand
Xinitrc=xinitrc                                 # file to store xinitrc commands
Xinitlogfile=xinit.log                          # file to log output of X server
Xtermrc=xtermrc                                 # file to store xtermrc commands
Xtermlogfile=xterm.log                          # file to log output of xterm
Dockerlogfile=docker.log                        # file to log output of docker
Dockerpidfile=docker.pid                        # file to store process ID of docker
Bgpidfile=backgroundpids                        # file to store PidS and names of background processes that shut be killed on exit
Compositorlogfile=compositor.log                # file to log output of Weston or KWin 
Xpraserverlogfile=xpraserver.log                # logfile for xpra server

Autochooseserver="yes"                          # option '--auto': automated choosing server
Xauthentication="yes"                           # option '--no-auth' use cookie authentication yes/no
Xserver=""                                      # X server to use ( one of Xorg | Xpra | Xephyr | Hostdisplay)
Newdisplay=""                                   # new display for new X server
Newxsocket=""                                   # New X socket
Newxenv=""                                      # environment variables for new X server DISPLAY XAUTHORITY XSOCKET WAYLAND_DISPLAY
Xserveroptions=""                               # X extensions to enable and other X options

Hostdisplay=$DISPLAY                            # store environment variable containing name of current display
Hostxauthority=$XAUTHORITY                      # store environment variable pointing to X authority cookies
Hostdisplaynumber="$(echo $Hostdisplay | cut -d: -f2 | cut -d. -f1)"  # display number without ":" and ".0"
Hostxsocket="/tmp/.X11-unix/X$Hostdisplaynumber" # X socket from host, needed for --hostdisplay and --virtualgl
Hostxenv="DISPLAY=$Hostdisplay XAUTHORITY=$Hostxauthority XSOCKET=$Hostxsocket" 

Xservercookie=Xservercookie                     # file to store new X server cookies
Xclientcookie=Xclientcookie                     # file to store new X client cookies
#Newxlock=""                                     # .Xn-lock - exists for running X server with socket n
Newxvt=""                                       # Virtual console to use for core new X server (>7)

# options for different X servers
Xpraoptions=""
Nxagentoptions=""
Xephyroptions=""
Xephyrglamor="yes"                              # former option '--glamor': enable Xephyr glamor 2D acceleration (deprecated, now always yes)
Xephyrresize="no"                               # option '--resizeable': make Xephyr window resizeable
Westonoptions=""
Waylandsocket=""                                # Wayland socket for Xwayland in weston
Kwinoptions=""
Scaling="1"                                     # option --scale: Scaling factor for xpra and weston
Rotation="0"                                    # option --rotate: Rotation for --weston and --weston-xwayland 0/90/180/270/flipped/flipped-90/..
Dpi=""                                          # option --dpi: dots per inch to tell the clients.

# Screensize for windowed servers and for --xdummy
Screensize=""                                   # option --size  XxY
Xaxis=""
Yaxis=""
Modeline=""
Fullscreen="no"                                 # option '-f, --fullscreen': use fullscreen mode (Xephyr only)

# Wayland and Weston
Waylandtoolkitenv=("XDG_SESSION_TYPE=wayland GDK_BACKEND=wayland QT_QPA_PLATFORM=wayland CLUTTER_BACKEND=wayland SDL_VIDEODRIVER=wayland ELM_DISPLAY=wl ELM_ACCEL=opengl ECORE_EVAS_ENGINE=wayland_egl")
Sharewayland="no"                               # option --sharewayland: Share wayland socket and WAYLAND_DISPLAY
Setwaylandenv="no"
Compositorpid=""


Terminal=""
Terminallist=""

Windowmanager=""                                # option '-w, --wm': window manager to use. if not given but needed, autodetection is used
Shareclipboard="no"                             # option '-c, --clipboard' enable clipboard sharing
Shareclipboardscript="clipboard.bash"           #    "              "      script used for text clipboard sharing to Xephyr/Xorg 
Showdisplayenvironment="no"                     # option -E, --env: Show environment variables of new display

Benutzer=$(id -un)                              # name of user to simulate in container
Addhostuser="no"                                # option '-u, --hostuser': try to add user to container with same UID and GID as host user
Addsudouser="no"                                # option '-o, --sudouser': same as '-u, --hostuser', but created user gains root access via sudo without password
Createuserscript="createuser"                   #   "          "         : file to store commands to create container user
Adduserhome="no"                                # option '-m, --home': share a folder ~/.local/share/x11docker/Imagename with created container
Adduserhomefolder="no"                          #   "        "   : path to shared folder

Pulseaudiotcpport=""                            # option '--pulseaudio': pulseaudio tcp  to use
Pulseaudio="no"                                 #   "                    use pulseaudio yes/no
Pulseaudiomoduleid=""                           #   "                    number of customized pulseaudio tcp module, output of pactl

Orphanedcheck="no"                              # option '--orphaned': check for non-removed containers and maybe root-owned files in cache
Createdesktopstarter="no"                       # option '--starter': create desktop starter and exit yes/no
Installermode=""                                # --install/--update/--remove

Allowroot="no"                                  # option '--root': allow root to run x11docker
Getroot="su -c"                                 # option '-s, --sudo' will add 'sudo' to command to get root privileges.
Verbose="no"                                    # option '-v, --verbose': if "yes", be verbose
Preservecachefiles="no"                         # option '--cache': preserve cache files instead of removing them on exit
Preservecontainer="no"                          # option '-p, --ps': if yes, preserve container instead of removing it with 'docker run --rm'
Gpu="no"                                        # option '--gpu': Use hardware accelerated OpenGL, share files in /dev/dri
Customenvironment=""                            # option '--env': set custom environment variables 
Dbuslaunch="no"                                 # option '--dbus': run image command with dbus-launch
Shareipc="no"
Sharenet="no"

Trusted="trusted"                               # create "trusted" or "untrusted" cookies
Noxhost="no"                                    # option '--no-xhost': if yes, disable all X server access granted by xhost
Xhost=""                                        # option '--xhost': xhost + on new X server

# some temporary or loop variables
Pid=""
Name=""
Zeit=""
Line=""

# these window managers are known to work well with x11docker (alphabetical order)(excluding $Wm_not_recommended and $Wm_ugly):
Wm_good="amiwm blackbox cinnamon compiz ctwm enlightenment fluxbox flwm fvwm"
Wm_good="$Wm_good jwm kwin lxsession mate-session mate-wm marco metacity muffin mutter notion olwm olvwm openbox ororobus pekwm"
Wm_good="$Wm_good sawfish twm wmaker w9wm xfwm4"
# these wm's are recommended, lightweight AND desktop independent. best first:
Wm_recommended_desktop_light="flwm blackbox fluxbox jwm mwm wmaker afterstep amiwm fvwm ctwm pekwm olwm olvwm openbox lxsession" 
# these wm's are recommended, heavy AND desktop independent. best first:
Wm_recommended_desktop_heavy="lxsession mate-session"
# these wm's are recommended and lightweight, but cannot show desktop options. best first:
Wm_recommended_nodesktop_light="sawfish xfwm4 metacity marco mate-wm "
# these wm's are recommended and heavy, but cannot show desktop options (especially exiting themselves). best first:
Wm_recommended_nodesktop_heavy="muffin mutter kwin cinnamon gnome-shell compiz"
# these wm's are not really useful (please don't hit me) (best first):
Wm_not_recommended="awesome enlightenment evilwm herbstluftwm i3 lwm matchbox miwm spectrwm subtle windowlab wmii wm2"
# these wm's cannot be autodetected by wmctrl if they are already running
Wm_nodetect="aewm aewm++ afterstep awesome ctwm mwm miwm olwm olvwm sapphire windowlab wm2 w9wm"
# these wm's can cause problems (they can be beautiful, though):
Wm_ugly="icewm sapphire aewm aewm++"
# these wm's doesn't work:
Wm_bad="clfswm tinywm tritium"
# List of all working window managers, recommended first: (excluding $Wm_bad)
Wm_all="$Wm_recommended_desktop_light $Wm_recommended_nodesktop_light $Wm_recommended_desktop_heavy $Wm_recommended_nodesktop_heavy $Wm_good $Wm_ugly $Wm_not_recommended $Wm_nodetect"
}

{ #### part: parsing cli options
  Shortoptions="hw:dayxXWMKcfSGeuomprsnvgNPH0UANYtEl"
  Longoptions="auto,x,X,xpra,xephyr,x11,xorg,hostdisplay,xwayland,weston,weston-xwayland,xpra-xwayland,hostwayland,nxagent"  # X servers
  Longoptions="$Longoptions,wm:,exe,xonly"
  Longoptions="$Longoptions,install,update,remove,version"
  Longoptions="$Longoptions,fullscreen,resizeable,size:,glamor,scale:,rotate:,dpi:"
  Longoptions="$Longoptions,clipboard,hostuser,sudouser,home,pulseaudio,gpu"                       # comfort options
  Longoptions="$Longoptions,sudo,ps,verbose,cache,nopwd,no-password,no-xhost,untrusted,dbus"       # advanced options
  Longoptions="$Longoptions,starter,orphaned,license,licence,help"                                 # special options without starting X server
  Longoptions="$Longoptions,xhost+,vt:,display:,no-auth,env:,showenv,sharewayland,waylandenv,root,ipc,net"  # developer options
  Longoptions="$Longoptions,kwin,kwin-xwayland,kwin-native,nothing"                                # developer options - further X/Wayland servers
  Longoptions="$Longoptions,desktop,xsocket,tcpxsocket,virtualgl,glamor,xpra-image,xpra-attach,xorg-image,xdummy,xdummy-image,tcp"  # deprecated
  Parsedoptions="$(getopt --options $Shortoptions --longoptions $Longoptions --name "$0" -- "$@" 2>/tmp/x11docker_parsererror)"
  [ -e /tmp/x11docker_parsererror ] && Parsererror=$(cat /tmp/x11docker_parsererror) && rm /tmp/x11docker_parsererror
  [ -n "$Parsererror" ] && error "$Parsererror"
  
  eval set -- $Parsedoptions
  [ "$*" = "-h --" ] &&    usage         && exit 0         # catch single -h for usage info, otherwise it means --hostdisplay
  
  while [ -n "$1" ] ; do
    case "$1" in
      --help)              usage         && exit 0  ;;     # show help/usage and exit
      --license|--licence) license       && exit 0  ;;     # show MIT license and exit
      --version)           echo $Version && exit 0  ;;     # output version number and exit

      -e|--exe)        X11dockermode="exe"   ;;            # execute application from host instead of running docker image
         --xonly)      X11dockermode="xonly" ;;            # only create X erver

         --auto)                                                 Autochooseserver="yes" ;; # use xpra or Xephyr, Xorg or hostdisplay, --xpra-xwayland or --weston-xwayland
      -a|--xpra)                     Xserver="Xpra" ;            Autochooseserver="no"  ;; # use xpra on host
      -y|--xephyr)                   Xserver="Xephyr" ;          Autochooseserver="no"  ;; # use Xephyr
      -x|--xorg|--x11)               Xserver="Xorg" ;            Autochooseserver="no"  ;; # use core Xorg
      -h|-0|--hostdisplay)           Xserver="Hostdisplay" ;     Autochooseserver="no"  ;; # use host display :0 with shared X socket
      -X|--xwayland)                 Xserver="Xwayland" ;        Autochooseserver="no"  ;; # Xwayland needs already running Wayland
      -A|--xpra-xwayland)            Xserver="Xpra-Xwayland" ;   Autochooseserver="no"  ;; # Xpra with Xwayland
      -Y|--weston-xwayland)          Xserver="Weston-Xwayland" ; Autochooseserver="no"  ;; # Weston-Xwayland as Wayland compositor with Xwayland, runs in X or standalone from console
         --xdummy)                   Xserver="Xdummy" ;          Autochooseserver="no" ; Showdisplayenvironment="yes" ;;  # use Xdummy. Invisible on host. For custom network setups with VNC or xpra
         --nothing)                  Xserver="Nothing" ;         Autochooseserver="no"  ;; # Do not provide any X nor Wayland
      -W|--weston)                   Xserver="Weston" ;          Autochooseserver="no"  ;; # Wayland in Weston only, no X
      -H|--hostwayland)            [ "$Xserver" = "Hostdisplay" ] || Xserver="Hostwayland" # share host wayland. Allow coexistence with option --hostdisplay
                                     Sharewayland="yes" ;        Autochooseserver="no"  ;;
      -K|--kwin)                     Xserver="Kwin" ;            Autochooseserver="no"  ;;
         --kwin-xwayland)            Xserver="Kwin-Xwayland" ;   Autochooseserver="no"  ;;
      -N|--kwin-native)              Xserver="Kwin-Native" ;     Autochooseserver="no"  ;;
      -n|--nxagent)                  Xserver="Nxagent" ;         Autochooseserver="no"  ;;
      
      -g|--gpu)        Gpu="yes" ;;                        # share files in /dev/dri
      -E|--waylandenv) Setwaylandenv="yes" ;;              # set environment variables forcing toolkits like QTK and QT to use wayland

      -w|--wm)         Windowmanager=$2 ; shift            # Window manager to  use.
                       [ -z "$Windowmanager" ]    && Windowmanager="none"
                       [ "$Windowmanager" = "m" ] && Windowmanager="auto" ;;
       
      -f|--fullscreen) Fullscreen="yes"  ;;                # fullscreen mode for Xephyr and Weston
         --size)       Screensize="$2" ;  shift ;;         # set screen size for Xephyr, Xdummy and Weston
      -r|--resizeable) Xephyrresize="yes"  ;;              # make Xephyr window resizeable
      -l|--scale)      Scaling=$2 ; shift ;;
         --rotate)     Rotation=$2 ; shift ;;
         --dpi)        Dpi=$2 ; shift ;;

      -o|--no-xhost)   Noxhost="yes"  ;;                   # disable any access granted by xhost
      -t|--untrusted)  Trusted="untrusted"  ;;             # create untrusted cookies

      -u|--hostuser)   Addhostuser="yes" ;;                # create user similar to host user in created container
      -U|--sudouser)   Addhostuser="yes"                   # same as '--hostuser', but with root rights via sudo without password
                       Addsudouser="yes" ;;
      -m|--home)       Adduserhome="yes" ;;                # share folder ~/x11docker/Imagename with container

      -c|--clipboard)  Shareclipboard="yes"  ;;            # share host clipboard with dockered applications (xpra only)
      -p|--pulseaudio) Pulseaudio="yes"  ;;                # enable pulseaudio connection / sound support over tcp

      -v|--verbose)    Verbose="yes"  ;;                   # be verbose
         --root)       Allowroot="yes" ;;                  # allow x11docker to be run as root
      -P|--nopwd|--no-password) Getroot="bash -c" ;;       # Don't ask for password
      -s|--sudo)       Getroot="sudo su -c"  ;;            # use sudo to run 'su -c docker ...'

         --ps)         Preservecontainer="yes"  ;;         # presreve container instead of removing it with 'docker run --rm'
         --cache)      Preservecachefiles="yes"  ;;        # don't remove cache files on exit
      
      ##### some developer options
         --showenv)    Showdisplayenvironment="yes" ;;     # output of display number and cookie file on stdout. Catch with  ~$ read xdenv < <(x11docker --showenv)
         --env)        Customenvironment="$Customenvironment $2" ; shift ;;   # set custom environment variables
      -d|--dbus)       Dbuslaunch="yes" ;;                 # run command with dbus-launch

         --vt)         Newxvt="vt$2" ;       shift ;;      # set virtual console to use
         --display)    Newdisplaynumber=$2 ; shift ;;      # set display to use

         --xhost+)     Xhost="xhost +"  ;;                 # set 'xhost +' on both X servers
         --no-auth)    Xauthentication="no" ;;             # disable cookie authentication

      -S|--sharewayland) Sharewayland="yes" ;;             # Share wayland socket
      
         --ipc)        Shareipc="yes" ;;                   # docker run option --ipc=host
         --net)        Sharenet="yes" ;;                   # docker run option --net=host

      ##### special options not starting X
      --starter)       Createdesktopstarter="yes" ;;       # create desktop starter and exit
      --orphaned)      Orphanedcheck="yes"  ;;             # check for orphaned containers and files owned by root, created by docker)
      --install|--update|--remove) Installermode="$1" ;;   # installer

      ##### depracated or in development, don't rely on this
      --desktop)       Windowmanager="none"   &&                    warning "Option --desktop is deprecated. Use --wm=none instead" ;;
      --virtualgl|--tcpxsocket|--xsocket|--tcp)                     warning "Option $1 is deprecated and has no effect now." ;; 
      --xpra-image|--xpra-attach|--xorg-image|--xdummy-image)         error "Option $1 no longer included. Please use x11docker version 2.5 instead." ;;

      ##### docker options / image
      --) shift
        while [ "$1" ] ; do
          [ -z "$Imagecommand" ] && [ "$(echo "$1" | cut -c1)" = "-" ]  && Dockeroptions="$Dockeroptions $1"
          [ -z "$Imagecommand" ] && [ "$(echo "$1" | cut -c1)" != "-" ] && Imagecommand="$1" && shift
          [ -n "$Imagecommand" ] && Imagecommand="$Imagecommand $1"     && Imagecommand="${Imagecommand## }"
          shift
        done
        Imagename=$(echo $Imagecommand | cut -d ' ' -f1)
        Imagecommand=$(echo $Imagecommand | cut -s -d ' ' -f2-)
      ;;
      *) error "Unknown option $1" ;;
    esac  
    shift
  done
}

{ #### part: some init
  trap finish EXIT
  
  ## options --install --update --remove
  [ -n "$Installermode" ] && {
    [ "0" = "$(id -u)" ] || { error "Must run as root to install, update or remove x11docker." ; }
    installer $Installermode
    exit
  }
  
  ## option --orphaned : check for non-removed containers and left cache files possibly owned by root and created by docker
  [ "$Orphanedcheck" = "yes" ] && { checkorphaned ; exit ; }
  
  # check if script runs as root, if yes, show error & exit ( except if allowed with option --root)
  [ "$Allowroot" = "no" ] && [ "0" = "$(id -u)" ] && error "x11docker should not run as root. Every child process of 
  the new X server would get root privileges, too. To run docker, you will be
  prompted for your root password only for this one docker command.
  On systems without a root password, like Ubuntu, choose option '-s, --sudo'
  If you want to allow root to run x11docker, use option '--root'"
  [ "0" = "$(id -u)" ] && Getroot="bash -c"

  # if desktop starter should be created, check if xdg-user-dir is installed
  if [ "$Createdesktopstarter" = "yes" ] ; then
    command -v "xdg-user-dir" >/dev/null 2>&1 || { error "could not find xdg-user-dir.
  x11docker needs it to create a desktop starter. Please install xdg-utils with
  command:
  apt-get install xdg-utils" ; }
  fi
  
  # option '--pulseaudio': find a free tcp port
  [ "$Pulseaudio" = "yes" ] && {
    read -r Lowerport Upperport < /proc/sys/net/ipv4/ip_local_port_range
    while : ; do
      Pulseaudiotcpport="$(shuf -i $Lowerport-$Upperport -n 1)"
      ss -lpn | grep -q ":$Pulseaudiotcpport " || break
    done
  }
  
  # check whether x11docker runs on tty1-tty6
  # console users have to use their own tty for X since debian 9
  if [ -n "$(tty | grep tty)" ] && [ "$Newxvt" = "" ] ; then Newxvt="vt$(tty | cut -c9-)" ; fi
  
  # Weston and Xwayland need XDG_RUNTIME_DIR 
  [ -z "$XDG_RUNTIME_DIR" ] && [ -e "/run/user/$(id -u)" ] && export XDG_RUNTIME_DIR="/run/user/$(id -u)" 
  [ -z "$XDG_RUNTIME_DIR" ] && {
    mkdir -p /tmp/XDG_RUNTIME.x11docker.$(id -u)
    export XDG_RUNTIME_DIR=/tmp/XDG_RUNTIME.x11docker.$(id -u)
    chmod 700 $XDG_RUNTIME_DIR
  }
  
  [ "$Getroot" = "su -c" ] && case $(lsb_release -is) in
    Ubuntu|Sparky) warning "You may need option --sudo if root has no password for su." ;;
  esac
}

{ #### part: check X server
  ## option '--auto': Try to automatically choose best matching and available X server
  if [ "$Autochooseserver" = "yes" ] ; then
    Xserver="Xpra"
    [ -n "$WAYLAND_DISPLAY" ] && Xserver="Xpra-Xwayland"
    [ "$Gpu" = "yes" ]        && Xserver="Xpra-Xwayland"
    [ -n "$Windowmanager" ]   && Xserver="Xephyr"
    [ -z "$Imagename" ]       && Xserver="Xephyr"
    [ "$Xserver" = "Xephyr" ] && { command -v "Xephyr" >/dev/null 2>&1 || Xserver="Weston-Xwayland" ; } # try weston if Xephyr is missing
    [ "$Gpu" = "yes" ] && [ "$Xserver" = "Xephyr" ]  && Xserver="Weston-Xwayland"

    if tty | grep -q tty ; then
      Xserver="Weston-Xwayland"
      command -v "Weston-Xwayland" >/dev/null 2>&1 || Xserver="Xorg"  # if running on tty1-tty6, only weston or core X will work
    else
      [ -z "$Hostdisplay" ]   && Xserver="Weston-Xwayland"
    fi
    #command -v "nxagent" >/dev/null && {   # currently disabled as nxagent is experimental
    #  case $Xserver in
    #    Xpra|Xephyr) Xserver="Nxagent" ;;
    #  esac
    #} || {
      [ -z "$Windowmanager" ] && Windowmanager="auto"
    #}
  fi

  ## check if chosen X server is installed
  #
  [ "$Xserver" = "Hostwayland" ] && [ -z "$WAYLAND_DISPLAY" ] && {
    warning "WAYLAND_DISPLAY is not set. 
  Fallback: Will try to run Weston"
    Xserver="Weston"
  }
  [ "$Xserver" = "Xpra-Xwayland" ] && {
    command -v "xdotool" >/dev/null || { [ -z "$WAYLAND_DISPLAY" ] && warning "Could not find xdotool to autohide weston window.
  You will have a bothersome weston window. 
  To avoid this, please install package 'xdotool'"
    }
  }
  [ "$Xserver" = "Nxagent" ] && {
    command -v "nxagent" >/dev/null 2>&1 || {  
      [ -n "$Windowmanager" ] && Xserver="Xephyr" || Xserver="Xpra"
      warning "could not find executable 'nxagent'. 
  Try 'apt-get install nxagent' to install nxagent.
  Fallback: Will try to use $Xserver"
    }
  }
  case $Xserver in
    Xpra|Xpra-Xwayland)
      verlt "$(xpra --version | cut -d' ' -f2)" "v1.0" && {
        warning "Your xpra version is out of date. It is recommended to install
  a recent version from www.xpra.org, but at least xpra v1.0."
      }
      command -v "xpra" >/dev/null 2>&1 || { warning "could not find executable 'xpra'. 
  Try 'apt-get install xpra' to install xpra.
  Fallback: x11docker will try to use Xephyr (option --xephyr)"
        Xserver="Xephyr" 
        Windowmanager="auto"
      } 
    ;;
  esac
  case $Xserver in 
    Xpra|Xdummy)
      [ "$(lsb_release -is)" = "Ubuntu" ] && {
        command -v Xvfb >/dev/null || { warning "On Ubuntu you may need to install
  package xvfb to use $Xserver. Try 'apt-get install xvfb' to install Xvfb.
  Fallback: Will try to use Xephyr"
          Xserver="Xephyr"
        }
      }
    ;;
  esac
  [ "$Xserver" = "Xwayland" ] && [ -z "$WAYLAND_DISPLAY" ] && {
    warning "WAYLAND_DISPLAY is not set. 
  Fallback: Will try to run Weston-Xwayland"
    Xserver="Weston-Xwayland"
  }
  case $Xserver in
    Kwin|Kwin-Xwayland|Kwin-Native) command -v kwin_wayland >/dev/null || { warning "kwin_wayland not found.
  Fallback: Will try to use Weston instead"
      [ "$Xserver" = "Kwin" ] && Xserver="Weston" || Xserver="Weston-Xwayland" 
    } ;;
  esac
  if [ "$Xserver" = "Weston" ] || [ "$Xserver" = "Weston-Xwayland" ] ; then
    command -v "weston" >/dev/null 2>&1 || { warning "could not find executable 'weston'. 
  Try 'apt-get install weston' to install weston.
  Fallback: x11docker will try to use Xephyr (option --xephyr)"
      Xserver="Xephyr"
    }
  fi
  case $Xserver in
    Xwayland|Weston-Xwayland|Xpra-Xwayland|Kwin-Xwayland)
      command -v "Xwayland" >/dev/null 2>&1 || { warning "could not find executable 'Xwayland'. 
  Try 'apt-get install xwayland' to install xwayland.
  Fallback: x11docker will try to use Xephyr (option --xephyr)"
      Xserver="Xephyr" 
    } ;;
  esac
  [ "$Xserver" = "Xephyr" ] && {
    command -v "Xephyr" >/dev/null 2>&1 || { warning "could not find executable 'Xephyr'. 
  Try 'apt-get install xserver-xephyr' to install Xephyr.
  Fallback: x11docker will try to use core X (option --xorg)"
    Xserver="Xorg"
    }
  }
  [ "$Xserver" = "Xorg" ] && {
    command -v "X" >/dev/null 2>&1 || { error "Could not find executable 'X'. 
  Try 'apt-get install xorg' to install X server." 
    }
    # if x11docker is running from within an X server, check if user is allowed to run a new core X server
    if [ -z "$Newxvt" ] ; then
      if [ ! -e "/etc/X11/Xwrapper.config" ] || [ -z "$(grep "allowed_users=anybody" </etc/X11/Xwrapper.config)" ] ; then
        warning "You are not allowed to start a second X server. As a default 
  configuration of X, only root or console users can start a second X server.
  
  You can switch to one of tty1...tty6 with <STRG><ALT><F1>...<F6>
  and start x11docker there. (Fails on Ubuntu 16.04 due to Ubuntu bug.) 
  
  Look at 'x11docker --help' how to setup Xwrapper.config to be able to run
  a second core X server from within an already running X session.

  Fallback: Using host display without container isolation"
      Xserver="Hostdisplay"
      fi
    fi
  }
  
  case $Xserver in
    Xpra|Xephyr|Hostdisplay|Xpra-Xwayland|Nxagent) [ -z "$Hostdisplay" ] && error "You only can run $Xserver within an already running X server."  ;;
  esac
  
  [ "$Xserver" = "Xpra" ] || [ "$Xserver" = "Xpra-Xwayland" ] && xmessage -timeout 5 "Please be patient, xpra will start soon ..." -default okay &
 
  [ "$Xserver" = "Nxagent" ] && { 
    [ -z "$Imagename" ] && [ -z "$Windowmanager" ] && [ "$Showdisplayenvironment" = "no" ] && Windowmanager="none"
    case $Windowmanager in
      "") Nxagentoptions="-R" ;; # rootless mode, similar to xpra
      *)  Nxagentoptions="-D" ;; # desktop mode,  similar to xephyr. including wm="none"
    esac
  }
  
  [ "$Gpu" = "yes" ] && { 
    warning "Option --gpu degrades container isolation.
  Container gains access to GPU hardware."
    case $Xserver in
      Xpra|Xdummy|Nxagent) warning "$Xserver does not support hardware acceleration." ;;
      Xephyr) warning "$Xserver has only limited support of hardware acceleration."   ;;
    esac
  }
  
  [ "$Xserver" = "Hostdisplay" ] && {
    warning "SECURITY risk: Option --hostdisplay provides
  quite bad container isolation!"
    [ "$Addhostuser" = "no" ] && warning "SECURITY risk: Please use --hostdisplay always 
 along with --hostuser to avoid root running GUI applications 
 on your host display!"
    [ "$Trusted" = "trusted" ] && warning "Security advice: Please use --hostdisplay along
  with option --untrusted to improve security. 
  (Unfortunately, some application may not work with --untrusted)"
    [ "$Autochooseserver" = "yes" ] && [ "$Windowmanager" = "none" ] && error "Can not avoid to use host window manager (--wm=none)
  along with option --hostdisplay. Won't do this in auto mode as the result may
  be strange. (Can be interesting, though, having two desktops simultaneously.)
  Install Xephyr or nxagent, or explicitly choose --hostdisplay."
  }
  
  [ "$Shareipc" = "yes" ] && warning "SECURITY risk: Option --ipc breaks down
  container isolation!"
  [ "$Sharenet" = "yes" ] && warning "SECURITY risk: Option --net breaks down
  container isolation!"
  
  case $Xserver in
    Hostdisplay|Kwin-Native)
      [ "$Trusted" = "trusted" ] && [ "$Shareipc" = "no" ] && [ "$X11dockermode" = "run" ] && warning "You may experience rendering issues and RAM access failures.
  x11docker can not disable MIT-SHM extension with $Xserver. 
  Use option --untrusted (secure, but some applications may fail) 
  or use option --ipc (insecure, breaks container isolation)."
    ;;
  esac
  
  [ "$Scaling" != "1" ] && {
    case $Xserver in
      Weston|Weston-Xwayland)
        [[ $Scaling =~ ^[1-9]$ ]] || {
          warning "The scale factor for $Xserver must be one of 1 2 3 4 5 6 7 8 9
  Fallback: setting option --scale=1"
          Scaling="1"
        }
      ;;
      Xpra|Xpra-Xwayland)
        isnum $Scaling || {
          warning "Option --scale needs a number. '$Scaling' is not allowed.
  Fallback: setting option --scale=1"
          Scaling="1"
        }
        verlt "$(xpra --version | cut -d' ' -f2)" "v0.16" && {
          warning "Your xpra version is too old and does not support --scale.
  You need at least xpra version 0.16"
          Scaling="1"
        }
      ;;
      *) warning "$Xserver does not support option --scale" ; Scaling="1" ;;
    esac
    case $Xserver in
      Weston-Xwayland) warning "Weston does not work well with Xwayland in scaled mode.
  In summary, Xwayland does not get the right screen resolution from Weston.
  Try out if it works for you." 
      ;;
      Xpra-Xwayland)
        [ "1" = "$(awk -v a="$Scaling" 'BEGIN {print (a < 1)}')" ] && {
          command -v weston >/dev/null || { 
            warning "$Xserver needs weston for scale factor smaller than 1.
  Fallback: setting --scale=1"
            Scaling="1"
          }
        }
      ;;
    esac
  }
  
  [ "$Rotation" != "0" ] && {
    case $Xserver in
      Weston|Weston-Xwayland)
        echo "0 90 180 270 flipped flipped-90 flipped-180 flipped-270" | grep -q "$Rotation" || {
          warning "Unsupported value '$Rotation' for option --rotate. 
  Must be one of 0 90 180 270 flipped flipped-90 flipped-180 flipped-270"
          Rotation="0"
        }
      ;;
      *) warning "$Xserver does not support option --rotate" ; Rotation="0" ;;
    esac
  }
}

{ #### part: check screen size
  ### FIXME: Does support multimonitor, but does not regard multihead setup
  [ -n "$Hostdisplay" ] && {
    command -v xwininfo      >/dev/null && {
      Xaxis=$(xwininfo -root -stats | grep Width  | cut -d: -f2)
      Yaxis=$(xwininfo -root -stats | grep Height | cut -d: -f2)
    } || command -v xdpyinfo >/dev/null && {
      Xaxis=$(xdpyinfo | grep dimensions | cut -dx -f1 | rev | cut -d ' ' -f1 | rev)
      Yaxis=$(xdpyinfo | grep dimensions | cut -dx -f2 | cut -d ' ' -f1)
    } || command -v xrandr   >/dev/null && {
      Xaxis=$(xrandr | grep current | head -n1 | cut -d, -f2 | cut -d' ' -f3)
      Yaxis=$(xrandr | grep current | head -n1 | cut -d, -f2 | cut -d' ' -f5)
    } || {
      Xaxis=4720
      Yaxis=3840
      warning "Could not determine your screen size. Will use arbitrary
  virtual resolution 4720x3840 as hopefully big enough. Please improve this by
  installing one of xdpyinfo, xwininfo or xrandr."
    }
    Modeline=$(cvt $Xaxis $Yaxis | tail -n1 | cut -d' ' -f2-)
  }
  # Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192

  case $Xserver in
    Xephyr|Weston-Xwayland|Weston|Kwin|Kwin-Xwayland|Kwin-Native|Nxagent)
      tty | grep -q tty && {
        : # nothing to do on tty; maybe should check --size=$Screensize
      } || {
        command -v xrandr > /dev/null && [ -n "$(xrandr | grep primary)" ] && { # reduce size to primar monitor for windowed desktop
          Xaxis=$(xrandr | grep primary | head -n1 | cut -dx -f1 | rev | cut -d' ' -f1 | rev)
          Yaxis=$(xrandr | grep primary | head -n1 | cut -dx -f2 | cut -d' ' -f1 | cut -d+ -f1)
        }
        [ -z "$Screensize" ] && [ -n "$Xaxis" ] && {
          Screensize="$(($Xaxis-100))x$(($Yaxis-100))" # a roughly maximized window size is set here
          [ "$Scaling" != "1" ] && case $Xserver in
            Weston|Weston-Xwayland)
              Screensize="$(expr $(($Xaxis-100)) / $Scaling)x$(expr $(($Yaxis-100)) / $Scaling)"  
            ;;
          esac
        }
      }
    ;;
    Xdummy|Xpra)
      [ -z "$Screensize" ] && [ -n "$Modeline" ] && Screensize=$Xaxis"x"$Yaxis
      [ -z "$Screensize" ] && [ -z "$Modeline" ] && {
        Modeline='"4720x3840" 227.86 4720 4752 5616 5648 3840 3933 3940 4033'
        Xaxis="4720"
        Yaxis="3840"
        Screensize="${Xaxis}x${Yaxis}"
      }
      [ -n "$Screensize" ] && [ -z "$Modeline" ] && {
        Xaxis=$(echo $Screensize | cut -dx -f1)
        Yaxis=$(echo $Screensize | cut -dx -f2)
        Modeline=$(cvt $Xaxis $Yaxis | tail -n1 | cut -d' ' -f2-)
        [ -z "$Modeline" ] && Modeline='"'$Xaxis'x'$Yaxis'" 227.86 $Xaxis $Xaxis $Xaxis $Xaxis $Yaxis $Yaxis $Yaxis $Yaxis'
      }
    ;;
  esac
  case $Xserver in
    Xpra|Xpra-Xwayland)
      Xaxis=$(awk -v a=$Xaxis -v b=$Scaling 'BEGIN {print (a / b)}')
      Xaxis=${Xaxis%.*}
      Yaxis=$(awk -v a=$Yaxis -v b=$Scaling 'BEGIN {print (a / b)}')
      Yaxis=${Yaxis%.*}
      Modeline=$(cvt $Xaxis $Yaxis | tail -n1 | cut -d' ' -f2-)
      Screensize="${Xaxis}x${Yaxis}"
    ;;
  esac
}

{ #### part: check free display, create cache folder and subfolder and add path to cache filenames
  mkdir -p $Cacherootfolder
  [ -z "$Newdisplaynumber" ] && {
    # Look for next free display and change some display specific variables
    case $Xserver in                         # set initial value for searching
      Xorg)               Newdisplaynumber="8"   ;;
      Xpra|Xpra-Xwayland) Newdisplaynumber="100" ;;
      Xephyr)             Newdisplaynumber="200" ;;
      Hostdisplay)        Newdisplaynumber="300" ;; # dummy number to look for free cache folder, display will be $Hostdisplay
      Xdummy)             Newdisplaynumber="400" ;;
      Weston-Xwayland)    Newdisplaynumber="500" ;;
      Xwayland)           Newdisplaynumber="600" ;;
      Weston)             Newdisplaynumber="700" ;;
      Hostwayland)        Newdisplaynumber="800" ;;
      Nothing)            Newdisplaynumber="900" ;; # dummy number to look for free cache folder
      Kwin)               Newdisplaynumber="1100" ;;
      Kwin-Xwayland)      Newdisplaynumber="1200" ;;
      Kwin-Native)        Newdisplaynumber="1300" ;;
      Nxagent)            Newdisplaynumber="1400" ;;
    esac
    #
    while [ -e "/tmp/.X11-unix/X$Newdisplaynumber" ] || [ -h "/tmp/.X11-unix/X$Newdisplaynumber" ]  || [ -d "$Cacherootfolder/X$Newdisplaynumber" ] || [ -e "$XDG_RUNTIME_DIR/wayland-$Newdisplaynumber" ] ; do   # search unused X socket, passing already used cache numbers
      Newdisplaynumber=$(($Newdisplaynumber + 1))
    done
  } || {
    [ -e "/tmp/.X11-unix/X$Newdisplaynumber" ] || [ -h "/tmp/.X11-unix/X$Newdisplaynumber" ]  || [ -d "$Cacherootfolder/X$Newdisplaynumber" ] && error "Display :$Newdisplaynumber is already in use"
  }
  #
  Cachefolder="$Cacherootfolder/X$Newdisplaynumber"
  Sharefolder="$Cachefolder/$Sharefolder"
  #
  Xinitrc="$Cachefolder/$Xinitrc"
  Xinitlogfile="$Cachefolder/$Xinitlogfile"
  Xtermrc="$Cachefolder/$Xtermrc"
  Xtermlogfile="$Cachefolder/$Xtermlogfile"
  Dockerlogfile="$Cachefolder/$Dockerlogfile"
  Dockerpidfile="$Cachefolder/$Dockerpidfile"
  Xservercookie="$Cachefolder/$Xservercookie"
  Xclientcookie="$Sharefolder/$Xclientcookie"
  Xpraserverlogfile="$Cachefolder/$Xpraserverlogfile"
  Compositorlogfile="$Cachefolder/$Compositorlogfile"
  Bgpidfile="$Cachefolder/$Bgpidfile"
  Createuserscript="$Sharefolder/$Createuserscript"
  Imagecommandscript="$Sharefolder/$Imagecommandscript"
  Shareclipboardscript="$Cachefolder/$Shareclipboardscript"
  Newxsocket="/tmp/.X11-unix/X$Newdisplaynumber"
  #Newxlock="/tmp/.X$Newdisplaynumber-lock"
  Logfile="$Sharefolder/x11docker.log"
  
  [ "$Newxvt" = "" ] && Newxvt="vt$Newdisplaynumber"    # FIXME: assuming instead of knowing whether VT is free
  Newdisplay=":$Newdisplaynumber"
  
  case $Xserver in
    Hostdisplay)
      Newdisplay=$Hostdisplay
      Newxsocket=$Hostxsocket ;;
  esac
 
  ## Get inet Adress of docker0 interface
  Dockeriprange=$(ip -4 -o a | grep docker0 | awk '{print $4}')
  Dockerip=$(echo $Dockeriprange | cut -d/ -f1)
   
  ## create display specific cache subfolder
  #
  mkdir $Cachefolder
  mkdir $Sharefolder
  :>$Logfile
}

{ #### part: check window manager
  case $Windowmanager in
  ""|"none") Windowmanager="" ;;
  *)
    [ "$Windowmanager" = "auto" ] && Windowmanager=""
    case $Xserver in
    Xpra|Hostdisplay|Xpra-Xwayland|Nothing|Hostwayland) # disable window manager if xpra (or host display)(or wayland compositor) does this job
      Windowmanager="" 
      ;; 
    Xephyr|Xorg|Xdummy|Xwayland|Weston-Xwayland|Nxagent)
      # try to find out current window manager to use it for x11docker (i.e. run a new instance of it)
      [ -z "$Windowmanager" ] && Windowmanager=$(command -v $(ls -l /etc/alternatives/x-window-manager | cut -d ">" -f2))
      # try with wmctrl
      if [ -z "$Windowmanager" ] && [ -n "$(command -v wmctrl)" ]  ; then        # option '-w, --wm': maybe a window manager is already set
        Windowmanager=$(wmctrl -m | grep "PID" | awk '{print $2}')                 # wmtrl, if installed, can find already running wm. at first get pid
        if [ -e "/proc/$Windowmanager" ] ; then                                    # check if pid is valid
          Windowmanager=$(ls -l "/proc/$Windowmanager/exe" | awk '{print $11}')     # if yes, then get /path/executable
        else                                                                       # otherwise, try insecure way over name
          Windowmanager=$(wmctrl -m | grep "Name" | awk '{print $2}' | tr '[:upper:]' '[:lower:]')              #| awk '{print $1}'`
        fi
      fi
      #
      case $(basename $Windowmanager | awk '{print $1}') in  # check some wm which need to be configured 
        #cinnamon|cinnamon-session) Windowmanager="cinnamon-session -f";;
        cinnamon|cinnamon-session) Windowmanager="cinnamon --sm-disable";;
        compiz) # set minmal config to have useable window decoration and can move windows
          if [ ! -e "$HOME/.config/compiz-1/compizconfig/Default.ini" ] ; then
            mkdir -p "$HOME/.config/compiz-1/compizconfig"
            echo "[core]
s0_active_plugins = core;composite;opengl;decor;resize;move;
" > "$HOME/.config/compiz-1/compizconfig/Default.ini"
          fi  ;;
        enlightenment|e17|e16|e19|e20|e) Windowmanager="enlightenment_start" ;;
        gnome|gnome-shell|gnome-session) # crashes without option '--sm-disable', crashes host X, too!
          Windowmanager="gnome-shell --sm-disable" ;;
        matchbox) Windowmanager="matchbox-window-manager"  ;;
        mate|mate-session) Windowmanager="mate-session -f" ;;
        mate-wm) Windowmanager="marco --sm-disable"  ;;
        openbox) Windowmanager="openbox --sm-disable" ;;
      esac
      #
      [ "$Windowmanager" ] && [ -z "$(command -v $Windowmanager)" ] && error "No executeable window manager $Windowmanager found. 
  Have a look at 'x11docker --help' for a list of reommended window managers."
    ;;
    esac
  ;;
  esac
}

{ #### part: check run/exe/xonly
  [ -z "$Imagename" ] && X11dockermode="xonly" 
  case $X11dockermode in
    run)
      # CMD in image will be disabled by createuser script. If no iage command is defined on CLI, get CMD from image
      # ('docker inspect' needs root permissions. That's not nice. Have to ask for password)
      [ "$Addhostuser" = "yes" ] && [ -z "$Imagecommand" ] && { 
        warning "Option --hostuser needs an image command to be specified"
        askforimagecommand
      }
      # dbus-launch can only be executed in x11docker_CMD
      [ "$Dbuslaunch" = "yes" ] && [ -z "$Imagecommand" ] && {
        warning "Option --dbus needs an image command to be specified"
        askforimagecommand
      }
      [ "$Dbuslaunch" = "yes" ] && Imagecommand="dbus-launch $Imagecommand" 
    ;;
    exe)
      Hostexe="$Imagename $Imagecommand"
      Imagename=""
      Imagecommand=""
      [ -z "$Hostexe" ]               && error "No host executable defined"
      [ -z "$(command -v $Hostexe)" ] && error "$Hostexe seems to be not executeable"
      [ "$Dbuslaunch" = "yes" ] && Hostexe="dbus-launch $Hostexe" 
    ;;
    xonly)
      case $Xserver in
        Nothing|Hostwayland|Hostdisplay) 
          warning "You are using $Xserver along with --xonly. 
  That will achieve nothing"
        ;;
        *)
          case $Windowmanager in
            "") Hostexe="while [ ! -e /$Sharefolder/timetosaygoodbye ] ; do sleep 1 ; done" ;;
            *)  Hostexe="$Windowmanager" ; Windowmanager="" 
                [ "$Dbuslaunch" = "yes" ] && Hostexe="dbus-launch $Hostexe" 
            ;;
          esac
          Imagename=""
          Imagecommand=""
          X11dockermode="exe"
        ;;
      esac
    ;;
  esac
}

{ #### part: check terminal for password prompt
  [ "$X11dockermode" = "run" ] && {
    case $Xserver in
      Weston|Hostwayland)  Terminallist=("qterminal konsole terminator NOLUCK") ;;
      Kwin)                Terminallist=("konsole NOLUCK") ;;
      Nothing)             Terminallist="bash NOLUCK" ;;
      *)                   Terminallist=("xterm qterminal konsole terminator NOLUCK") ;;
    esac
    # problems with gnome-terminal, sakura, lilyterm kterm mrxvt termit
    for Terminal in $Terminallist ; do command -v $Terminal >/dev/null && break ; done
    [ "$Terminal" = "NOLUCK" ] && { error "Can not find a terminal emulator that works in $Xserver.
  Please install one of:
  ${Terminallist%"NOLUCK"}
  (gnome-terminal is not suitable.)" ; }
    case $Xserver in
      Weston|Kwin|Hostwayland)
        case $Terminal in 
          qterminal|konsole) Terminal="QT_QPA_PLATFORM=wayland $Terminal" ;;
        esac
      ;;
    esac
    case $Terminal in
      bash) Terminal="bash -c" ;;
      *) Terminal="$Terminal -e" ;;
    esac
  }
}

{ #### part: option '-c, --clipboard' create shareclipboard script
  # use xclip to share text clipboard content between X servers.
  # xpra has its own clipboard management including image transfer
 
  case $Shareclipboard in                        # option '-c, --clipboard'
    yes) Xpraoptions="$Xpraoptions --clipboard"   ;;
    no)  Xpraoptions="$Xpraoptions --no-clipboard" ;; 
  esac
  
  [ "$Shareclipboard" = "yes" ] && case $Xserver in
  Nothing|Weston|Hostwayland|Kwin) Shareclipboard="no" 
    warning "Option --clipboard not supported for $Xserver"
  ;;
  Nxagent) ;; # look at "create command to start X server"
  Xephyr|Xorg|Xdummy|Xwayland|Weston-Xwayland)
    if [ -z "$(command -v 'xclip')" ] ; then
      warning "Cannot share clipboard. Need package 'xclip' to be
  installed. Try installing xclip with command: 'apt-get install xclip'"
      Shareclipboard="no"
    else 
      echo "#! /bin/bash
# share clipboard between two X servers
while true ; do
    # read content of clipboard of first X server
    XAUTHORITY=$Hostxauthority
    D1CLIP=\"\$(xclip -selection clipboard -o -display $Hostdisplay)\"
    # check if clipboard of first X server has changed; if yes, send new content to second X server
    if [ ! \"\$CLIP\" = \"\$D1CLIP\" ] ; then
        CLIP=\"\$D1CLIP\"
        xclip -selection clipboard -o -display $Hostdisplay | XAUTHORITY=$Xclientcookie xclip -selection clipboard -i -display $Newdisplay
    fi
    
    # read content of clipboard of second X server
    XAUTHORITY=$Xclientcookie
    D2CLIP=\"\$(xclip -selection clipboard -o -display $Newdisplay)\"
    # check if clipboard of second X server has changed; if yes, send new content to first X server
    if [ ! \"\$CLIP\" = \"\$D2CLIP\" ] ; then
        CLIP=\"\$D2CLIP\"
        xclip -selection clipboard -o -display $Newdisplay | XAUTHORITY=$Hostxauthority xclip -selection clipboard -i -display $Hostdisplay
    fi
    
    # avoid empty string error
    if [ -z \"\$CLIP\" ] ; then CLIP=' ' ; fi
    # sleep a bit to avoid high cpu usage
    sleep 0.3
done
" > $Shareclipboardscript
    fi
  ;;
  esac
}

{ #### part: create command to start X server
  Xserveroptions="-nolisten tcp -dpms -audit 4"
  [ "$Xauthentication" = "yes" ] && Xserveroptions="$Xserveroptions -auth $Xservercookie"
  case $Xserver in
    Nxagent)
      { [ "$Shareipc" = "yes" ] || [ "$X11dockermode" = "exe" ] ; } && Xserveroptions="$Xserveroptions -shmem -shpix" || Xserveroptions="$Xserveroptions -noshmem -noshpix"
    ;;
    *)
      Xserveroptions="$Xserveroptions +extension Composite +extension RANDR +extension RENDER +extension GLX +extension XVideo +extension DOUBLE-BUFFER +extension XINERAMA"
      Xserveroptions="$Xserveroptions +extension X-Resource +extension SECURITY +extension DAMAGE"
      Xserveroptions="$Xserveroptions -retro +iglx"
      { [ "$Shareipc" = "yes" ] || [ "$X11dockermode" = "exe" ] ; } && {
        Xserveroptions="$Xserveroptions +extension MIT-SHM"
      } || { 
        Xserveroptions="$Xserveroptions -extension MIT-SHM"
        Xprashm="XPRA_XSHM=0"
      }
    ;;
  esac
  [ -z "$Dpi" ] && {
    xdpyinfo >/dev/null 2>&1 && {
      Dpi="$(xdpyinfo | grep dots | cut -dx -f2 | cut -d' ' -f1)"
      Dpi=$(awk -v a=$Scaling -v b=$Dpi 'BEGIN {print (b * a * a)}')
      Dpi=${Dpi%.*}
    } || {
      [ -n "$Hostdisplay" ] && [ -z "$(command -v xdpyinfo)" ] && warning "Could not determine dpi settings. If you encounter too
    big or small fonts in $Xserver, please install xdpyinfo or use option --dpi."
    }
  }
  [ -n "$Dpi" ] && { 
    Xserveroptions="$Xserveroptions -dpi $Dpi"
    Xpraoptions="$Xpraoptions --dpi $Dpi"
  }
  
  Waitforgoodbye='bash -c "while [ ! -e '$Sharefolder'/timetosaygoodbye ] ; do sleep 1 ; done"' 

  Xpraoptions="$Xpraoptions -z0 --no-speaker --no-pulseaudio"
  [ "$Scaling" != "1" ] && Xpraoptions="$Xpraoptions --desktop-scaling=$Scaling"
  
  case $Xserver in
    Xpra|Xdummy)
      echo '# This xorg configuration file is forked and changed from xpra to start a dummy X11 server.
# For (very long) original and details, please see: https://xpra.org/Xdummy.html
Section "ServerFlags"
  Option "DontVTSwitch" "true"
  Option "AllowMouseOpenFail" "true"
  Option "PciForceNone" "true"
  Option "AutoEnableDevices" "false"
  Option "AutoAddDevices" "false"
EndSection
Section "Device"
  Identifier "dummy_videocard"
  Driver "dummy"
  DacSpeed 600
  Option "ConstantDPI" "true"
  VideoRam 256000
EndSection
Section "Monitor"
  Identifier "dummy_monitor"
  HorizSync   1.0 - 2000.0
  VertRefresh 1.0 - 200.0
  Modeline '$Modeline'
EndSection
Section "Screen"
  Identifier "dummy_screen"
  Device "dummy_videocard"
  Monitor "dummy_monitor"
  DefaultDepth 24
  SubSection "Display"
    Viewport 0 0
    Depth 24
    Modes '$(echo $Modeline | cut -d " " -f1)'
    Virtual '$Xaxis' '$Yaxis'
  EndSubSection
EndSection
Section "ServerLayout"
  Identifier   "dummy_layout"
  Screen       "dummy_screen"
EndSection' > $Cachefolder/xorg.xdummy.conf
    ;;
    Weston|Weston-Xwayland|Xpra-Xwayland)
      echo "
[core]
shell=desktop-shell.so
idle-time=0
[shell]
#background-color=0xff002244
panel-location=none
locking=false
[output]
" > $Cachefolder/weston.ini
      [ -n "$WAYLAND_DISPLAY" ] &&  [ "$Xserver" != "Xpra-Xwayland" ] && {
        echo "name=WL1" >> $Cachefolder/weston.ini
      } || {
        [ -n "$Hostdisplay" ] && echo "name=X1" >> $Cachefolder/weston.ini
      }
      tty | grep -q tty && {
        [ -n "$Screensize" ] || [ "$Scaling" != "1" ] || [ "$Rotation" != "0" ] && {
          weston --no-config > $Compositorlogfile 2>&1 &
          waitforlogentry weston $Compositorlogfile connector
          echo "name=$(cat $Compositorlogfile | grep Output | grep connector | head -n1 | cut -d ' ' -f3 | rev | cut -c2- | rev)" >> $Cachefolder/weston.ini
          kill $!
        }
      }
    ;;
  esac

  case $Xserver in
    Xorg) 
      Xserveroptions="$Xserveroptions +extension XFree86-DRI +extension XFree86-DGA +extension XFree86-VidModeExtension"
      Xserveroptions="$Xserveroptions -verbose"                  # make X verbose
      Xcommand="$(command -v X) $Newdisplay $Newxvt $Xserveroptions"
    ;;
    Xpra|Xdummy) # To use xpra, Xdummy will run first. xpra server uses it later. Use Xvfb if available.
      Xserveroptions="$Xserveroptions +extension XTEST"          # Without XTEST keyboard and mouse are not recognized by xpra
      command -v Xvfb >/dev/null && {
        Xcommand="$(command -v Xvfb) $Newdisplay $Xserveroptions -screen 0 ${Screensize}x24"
      } || {
        Xcommand="$(command -v Xorg) $Newdisplay $Newxvt -config $Cachefolder/xorg.xdummy.conf $Xserveroptions"
      }
    ;;
    Xephyr)
      case $Fullscreen in
        yes) Xephyroptions="$Xephyroptions -fullscreen" ;;
        no)  Xephyroptions="$Xephyroptions -screen $Screensize" ;;
      esac
      [ "$Xephyrresize" = "yes" ] && Xephyroptions="$Xephyroptions -resizeable"  # option '--resizeable'
      [ "$Xephyrglamor" = "yes" ] && Xephyroptions="$Xephyroptions -glamor"      # option '--resizeable'
      Xcommand="$(command -v Xephyr) $Newdisplay $Xserveroptions $Xephyroptions"
    ;;
    Xwayland) 
      Xcommand="$(command -v Xwayland) $Newdisplay $Xserveroptions"
      Waylandsocket=$WAYLAND_DISPLAY
    ;;
    Xpra-Xwayland)
      Xcommand="$(command -v Xwayland) $Newdisplay -rootless $Xserveroptions +extension XTEST"
      [ -z "$WAYLAND_DISPLAY" ] && Waylandsocket="wayland-$Newdisplaynumber" || { 
        [ "1" = "$(awk -v a="$Scaling" 'BEGIN {print (a < 1)}')" ] && Waylandsocket="wayland-$Newdisplaynumber" || Waylandsocket=$WAYLAND_DISPLAY 
      }
      echo "mode=$Screensize" >> $Cachefolder/weston.ini
      Compositorcommand="weston --config=$Cachefolder/weston.ini --socket=$Waylandsocket --backend=x11-backend.so"
    ;;
    Weston|Weston-Xwayland)
      [ "$Xserver" = "Weston-Xwayland" ] && Xcommand="$(command -v Xwayland) $Newdisplay $Xserveroptions"
      [ "$Xserver" = "Weston" ]          && Sharewayland="yes"
      Waylandsocket="wayland-$Newdisplaynumber"
      Compositorcommand="weston --config=$Cachefolder/weston.ini --socket=$Waylandsocket"
      case $Fullscreen in
        "yes") Compositorcommand="$Compositorcommand --fullscreen";;
        "no")  [ -n "$Screensize" ] && echo "mode=$Screensize" >> $Cachefolder/weston.ini ;;
      esac
      [ "$Scaling"  != "1" ] && echo "scale=$Scaling"          >> $Cachefolder/weston.ini
      [ "$Rotation" != "0" ] && echo "transform=$Rotation"     >> $Cachefolder/weston.ini
    ;;
    Kwin-Xwayland)
      [ -n "$Screensize" ] && Kwinoptions="--width=$(echo $Screensize | cut -d x -f1) --height=$(echo $Screensize | cut -d x -f2)"
      Xcommand="$(command -v Xwayland) $Newdisplay $Xserveroptions"
      Waylandsocket="wayland-$Newdisplaynumber"
      Compositorcommand="kwin_wayland --xwayland --socket=$Waylandsocket $Kwinoptions" 
    ;;
    Kwin-Native) # experimental, hacky and not nice implemented as I cannot tell KWin which display number to use. A clean workflow requires KWin to be started at end of script.
      [ -n "$Screensize" ] && Kwinoptions="--width=$(echo $Screensize | cut -d x -f1) --height=$(echo $Screensize | cut -d x -f2)"
      Waylandsocket="wayland-$Newdisplaynumber"
      Kwinrc=$Cachefolder/kwinrc
      echo "#!/bin/bash
        echo \$DISPLAY >$Cachefolder/kwindisplay
        while [ ! -e $Sharefolder/timetosaygoodbye ] ; do sleep 1 ; done
      ">$Kwinrc
      #Compositorcommand="kwin_wayland --xwayland --socket=$Waylandsocket $Kwinoptions --exit-with-session='bash $Kwinrc'"
      kwin_wayland --xwayland --socket=$Waylandsocket $Kwinoptions --exit-with-session="bash $Kwinrc"          > $Compositorlogfile 2>&1 & storepid $! kwin && export Compositorpid=$!
      #$Compositorcommand       > $Compositorlogfile 2>&1 & storepid $! kwin && export Compositorpid=$!
      waitforlogentry   "kwin"   $Compositorlogfile "X-Server"
      bash -c "while ps -p $Compositorpid >/dev/null; do sleep 1 ; done ; touch $Sharefolder/timetosaygoodbye" &  #storepid $! bash
      Newdisplay=$(cat $Cachefolder/kwindisplay)
      Newdisplaynumber="$(echo $Newdisplay | cut -d: -f2 | cut -d. -f1)"
      Newxsocket=/tmp/.X11-unix/X$Newdisplaynumber
    ;;
    Kwin)
      [ -n "$Screensize" ] && Kwinoptions="--width=$(echo $Screensize | cut -d x -f1) --height=$(echo $Screensize | cut -d x -f2)"
      Waylandsocket="wayland-$Newdisplaynumber"
      Sharewayland="yes"
      Compositorcommand="kwin_wayland --xwayland --socket=$Waylandsocket $Kwinoptions" 
    ;;
    Nxagent)
      Xcommand="$(command -v nxagent) $Newdisplay $Xserveroptions $Nxagentoptions -options $Cachefolder/nxagentoptions"
      # create file for additional nxagent options
      Nxagentoptions="nx/nx"
      [ "$Shareclipboard" = "yes" ] && Nxagentoptions="$Nxagentoptions,clipboard=both" || Nxagentoptions="$Nxagentoptions,clipboard=none"
      [ "$Fullscreen" = "yes" ] && Nxagentoptions="$Nxagentoptions,fullscreen=1" || {
        [ -n "$Screensize" ] && Nxagentoptions="$Nxagentoptions,geometry=$Screensize" 
      }
      # set keyboard layout
      command -v setxkbmap >/dev/null && { 
        Nxagentoptions="$Nxagentoptions,keyboard=$(setxkbmap -query | grep rules | rev | cut -d' ' -f1 | rev)/$(setxkbmap -query | grep layout | rev | cut -d' ' -f1 | rev)"
      } || warning "Could not check your keyboard layout due to missing setxkbmap"
      Nxagentoptions="$Nxagentoptions$Newdisplay"
      echo $Nxagentoptions > "$Cachefolder/nxagentoptions"
      # workaround as nxagent ignores XAUTHORITY if option -auth is given
      [ "$Xauthentication" = "yes" ] && {
        cp $XAUTHORITY $Xservercookie
        :> $Xclientcookie
        xauth -f $Xclientcookie add   $Newdisplay . $(mcookie)
        xauth -f $Xclientcookie nlist $Newdisplay | xauth -f $Xservercookie nmerge -
      }
      # fake NXclient
      echo '#! /bin/bash
# helper script to terminate nxagent. 
# nxagent runs program stored in NX_CLIENT if window close button is pressed.
# (real nxclient does not exist)
echo "NXclient: $@" >> '$Xinitlogfile'
parsed=$(getopt --options="" --longoptions="parent:,display:,dialog:,caption:,message:" -- "$@")
eval set -- $parsed
while [ -n "$1" ] ; do
  case "$1" in
    --dialog) dialog=$2 && shift ;;
    --display|--caption|--message) shift ;;
    --window) shift ;;
    --parent) pid=$2 && shift ;;
    --) ;;
  esac
  shift
done
case $dialog in
  pulldown) ;;
  yesnosuspend) 
    kill $pid 
    touch '$Sharefolder/timetosaygoodbye'
  ;;
esac
' > $Cachefolder/nxkill
      chmod +x $Cachefolder/nxkill
      export NX_CLIENT=$Cachefolder/nxkill
    ;;
    Hostdisplay|Hostwayland|Nothing) # what do you expect here?
    ;;
  esac
}

{ #### part: create $Newxenv
  case $Xserver in
    Xpra|Xephyr|Xpra-Xwayland|Weston-Xwayland|Hostdisplay|Xorg|Xdummy|Xwayland|Kwin-Xwayland|Kwin-Native|Nxagent)
      Newxenv="DISPLAY=unix$Newdisplay"
      [ "$Xauthentication" = "yes" ] && Newxenv="$Newxenv XAUTHORITY=$Xclientcookie" || Newxenv="$Newxenv XAUTHORITY=''" 
      Newxenv="$Newxenv XSOCKET=$Newxsocket"
    ;;
    Weston|Kwin|Hostwayland|Nothing)
      Newxenv="DISPLAY=''"
      Newxenv="$Newxenv XAUTHORITY=''"
  esac
  [ "$Sharewayland" = "yes" ] && {
    [ -n "$Waylandsocket" ]                              &&  Newxenv="$Newxenv WAYLAND_DISPLAY=$Waylandsocket"
    [ -z "$Waylandsocket" ] && [ -n "$WAYLAND_DISPLAY" ] &&  Newxenv="$Newxenv WAYLAND_DISPLAY=$WAYLAND_DISPLAY"
    [ -z "$Waylandsocket" ] && [ -z "$WAYLAND_DISPLAY" ] &&  { warning "No wayland environment to share,
  neither from host nor from $Xserver (--sharewayland)"
      Sharewayland="no" 
    }  ||  Newxenv="$Newxenv XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR"
  }
  [ "$Setwaylandenv" = "yes" ] && for Line in $Waylandtoolkitenv ; do Newxenv="$Newxenv $Line" ; done
  Newxenv="$Newxenv X11DOCKER_CACHE=$Cachefolder"
  for Line in $Customenvironment ; do Newxenv="$Newxenv $Line" ; done

  #   option '--env': show display infos on stdout
  [ "$Showdisplayenvironment" = "yes" ] && echo $Newxenv
}

{ #### part: create command to run docker
  case $X11dockermode in
    exe)  Dockercommand="# dontrundocker"  ;;
    run) 
      Containername="x11docker_X${Newdisplaynumber}_$(mcookie | cut -c -6)_$(echo $Imagename | tr / _ | tr : _ )"
      Dockercommand='docker run'
      Dockercommand="$Dockercommand --name=$Containername"          # give container a name that can be found by --orphaned
      [ "$Preservecontainer" = "no" ] && Dockercommand="$Dockercommand --rm"
      Dockercommand="$Dockercommand -v $Sharefolder:$Cshare:rw"
    
      case $Xserver in
        Nothing|Weston|Hostwayland|Kwin) ;;
        *)
          #      share X socket from $Newdisplay
          Dockercommand="$Dockercommand -v $Newxsocket:$Newxsocket:ro"
          #      DISPLAY
          Dockercommand="$Dockercommand -e DISPLAY=unix$Newdisplay"
          #      XAUTHORITY
          [ "$Xauthentication" = "yes" ] && Dockercommand="$Dockercommand -e XAUTHORITY=$Cshare/Xclientcookie"
        ;;
      esac
      #          WAYLAND_DISPLAY
      [ "$Sharewayland" = "yes" ] && {   # option --sharewayland: Share wayland socket
        [ -n "$Waylandsocket" ] && {
          Dockercommand="$Dockercommand -e WAYLAND_DISPLAY=$Waylandsocket"
          Dockercommand="$Dockercommand -e XDG_RUNTIME_DIR=/tmp/XDG_RUNTIME_DIR"
          Dockercommand="$Dockercommand -v $XDG_RUNTIME_DIR/$Waylandsocket:/tmp/XDG_RUNTIME_DIR/$Waylandsocket:ro"
        } 
        [ -z "$Waylandsocket" ] && [ -n "$WAYLAND_DISPLAY" ] && {
          Dockercommand="$Dockercommand -e WAYLAND_DISPLAY=$WAYLAND_DISPLAY"
          Dockercommand="$Dockercommand -e XDG_RUNTIME_DIR=/tmp/XDG_RUNTIME_DIR"
          Dockercommand="$Dockercommand -v $XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:/tmp/XDG_RUNTIME_DIR/$WAYLAND_DISPLAY:ro"
        }
      }
      #          --wayland-env: set environment variables to force toolkits using wayland
      [ "$Setwaylandenv" = "yes" ] && for Line in $Waylandtoolkitenv ; do Dockercommand="$Dockercommand -e $Line" ; done

      ## option --gpu : share graphics adapter device files ### SECURITY: degrades container isolation
      [ "$Gpu" = "yes" ] && {
        while read -r FILE ; do
        Dockercommand="$Dockercommand --device=$FILE:$FILE:rw"
        done < <(find /dev/dri/* -maxdepth 0 -type c)
      }

      ## option '--home': share folder ~/.local/share/x11docker/Imagename with created container as its home directory
      [ "$Adduserhome" = "yes" ] && {
        # define path to shared folder and remove '/' and ':'from image name
        Adduserhomefolder=$HOME/.local/share/x11docker/$(echo $Imagename | tr / - | tr : - )
        [ -e "$Adduserhomefolder" ] || {
          mkdir -p $Adduserhomefolder
          # create symbolic link in $HOME
          [ -e $HOME/x11docker ] || ln -s $HOME/.local/share/x11docker $HOME/x11docker
        }
        Dockercommand="$Dockercommand -v $Adduserhomefolder:/home/$Benutzer"
      }
      
      for Line in $Customenvironment ; do Dockercommand="$Dockercommand -e $Line" ; done
     
      [ "$Addhostuser" = "yes" ] && { ## options '-u, --hostuser' '-U, --sudouser': create container user similar to host user
        Dockercommand="$Dockercommand --user=0"  # overwrite possible starting USER in image, start as root to create or use user
        # create script createuser. It will also start the image with given (or extracted) command
        { echo "#! /bin/bash"
          # create user
          echo "if [ -z \"\$(id -u $(id -u) 2>/dev/null)\" ] ; then"
          echo "  Benutzer=$(id -un)"
          echo "  addgroup --force-badname --gid $(id -g) \$Benutzer"
          echo "  useradd -l --password '' --uid $(id -u) --gid $(id -g) --create-home --home-dir /home/\$Benutzer \$Benutzer"
          echo "  chown \$Benutzer:$(id -g) /home/\$Benutzer"
          echo "else" 
          echo "  Benutzer=\$(id -un $(id -u))"
          echo "fi"
          echo "export HOME=/home/\$Benutzer"
          echo "cd \$HOME"
      
          # option '--sudouser': add sudo permissions without password
          [ "$Addsudouser" = "yes" ] && {
            echo 'touch /etc/sudoers'
            echo 'echo "%sudo ALL=(ALL) NOPASSWD:ALL"   >> /etc/sudoers'
            echo "adduser \$Benutzer sudo"
          }
          
          [ "$Gpu" = "yes" ]  && echo "adduser \$Benutzer video"
          
          echo '[ -e "$XDG_RUNTIME_DIR" ] && chown $Benutzer $XDG_RUNTIME_DIR'  # path to WAYLAND_DISPLAY
          
          # run image command as user:
          echo "su \$Benutzer -c '$Imagecommand'"
        } > $Createuserscript
        Dockercommand="$Dockercommand -v $Createuserscript:$Cshare/createuser"
        Imagecommand="/bin/bash $Cshare/createuser"
      }
  
      ## option '--pulseaudio': provide pulseaudio server
      [ "$Pulseaudio" = "yes" ] && Dockercommand="$Dockercommand -e PULSE_SERVER=tcp:$Dockerip:$Pulseaudiotcpport"
      ## options --ipc and --net
      [ "$Shareipc" = "yes" ]   && Dockercommand="$Dockercommand --ipc=host"
      [ "$Sharenet" = "yes" ]   && Dockercommand="$Dockercommand --net=host"
        
      # add custom docker arguments, imagename and imagecommand
      Dockercommand="$Dockercommand $Dockeroptions"
      case $Imagecommand in
        "") Dockercommand="$Dockercommand -- $Imagename" ;;
        *)  # store imagecommand in shared bash script to avoid issues with imagecommands containing && ; > and the like 
          { echo '#! /bin/bash'
            echo 'cd $HOME'
            [ "$Dbuslaunch" = "yes" ] && echo 'command -v dbus-launch || echo "x11docker ERROR: image does not provide dbus-launch (--dbus) >&2 "'
            echo "command -v ps >/dev/null && {"
            echo "  $Imagecommand &"
            echo '  Imagecommandpid=$!'
            echo "  while ps -p \$Imagecommandpid >/dev/null && [ ! -e $Cshare/timetosaygoodbye ] ; do sleep 1 ; done "
            echo "} || $Imagecommand"
            echo "touch $Cshare/timetosaygoodbye && chmod 666 $Cshare/timetosaygoodbye"
          } > $Imagecommandscript
          Dockercommand="$Dockercommand -v $Imagecommandscript:$Cshare/x11docker_CMD"
          Dockercommand="$Dockercommand -- $Imagename /bin/bash $Cshare/x11docker_CMD"
        ;;
      esac
    ;;
  esac

}

{ #### part: create xinitrc
  echo "#! /bin/bash"
  
  echo "Bgpidfile=$Bgpidfile"
  echo "Logfile=$Logfile"
  # declaring functions echoes them into xinitrc
  declare -f storepid
  declare -f waitforlogentry
  declare -f no_xhost 
  declare -f warning 
  declare -f error

  [ "$Pulseaudio" = "yes" ] && {
    echo "# option '--pulseaudio': enable pulseaudio sound over tcp"
    echo "# load pulseaudio tcp module, authenticated to docker ip on specified port"
    echo 'Pulseaudiomoduleid=$(pactl load-module module-native-protocol-tcp port='$Pulseaudiotcpport' auth-ip-acl='$Dockeriprange')'
  }
  
  [ "$Noxhost" = "yes" ] && [ -n "$Hostdisplay" ] && {  
    echo "## option --no-xhost: disable any access to host display granted by xhost"
    echo "export $Hostxenv"
    echo "no_xhost"
  }

  case $Xserver in
    Weston|Kwin|Hostwayland) ;;
    Nothing) echo "export WAYLAND_DISPLAY=''" ;;
    *) # here something for real X servers
      echo "# set X variables to new display"
      [ "$Xserver" = "Hostdisplay" ] && echo "export $Hostxenv" || echo "export $Newxenv"
      
      case $Xserver in
        Xpra|Xpra-Xwayland) echo "export XPRA_OPENGL_DOUBLE_BUFFERED=1 # avoids xpra bug http://xpra.org/trac/ticket/1469"  ;;
      esac
      
      
      [ "$Xserver" = "Hostdisplay" ] || {
        [ -n "$Xhost" ] && echo "$Xhost" || {
          echo "# disable any possible access to new X server possibly granted by xhost"
          echo "no_xhost"
        }
      }
      
      [ "$Xauthentication" = "yes" ] && {
        echo "# create new XAUTHORITY cookies"
        [ "$Xserver" = "Nxagent" ] && { 
          echo "cp $Xclientcookie $Xclientcookie.bak   # workaround cookie was created before starting xinit" 
          echo "export XAUTHORITY=$Xclientcookie.bak"
        }
        echo ':> '$Xclientcookie
        echo "xauth -v -f $Xclientcookie generate $Newdisplay . $Trusted"  
        echo "cp $Xclientcookie $Xservercookie"
        echo "# create prepared cookie with localhost identification disabled by ffff, needed if X socket is shared. ffff means 'familiy wild'"
        echo "Cookie=\$(xauth -f $Xclientcookie nlist $Newdisplay | sed -e 's/^..../ffff/' )"   
        echo 'echo $Cookie'"| xauth -v -f $Xclientcookie nmerge -"
        echo "export $Newxenv"
        echo "xauth list"
        [ "$Xserver" = "Nxagent" ] && echo "rm $Xclientcookie.bak"
      }
      
      [ "$Shareclipboard" = "yes" ] && [ -n "$Hostdisplay" ] && {
        case $Xserver in
          Xpra|Xpra-Xwayland|Nxagent) ;;           # have their own clipboard management
          Hostdisplay) ;;                          # already shared
          *)                                       # synchronizing between different X servers
            echo "# option '-c, --clipboard': Run clipboard script "
            echo "# (text copy only) (xpra has its own clipboard managment including images)"
            echo "bash $Shareclipboardscript & storepid \$! bash"
          ;;
        esac
      }
    ;;
  esac

  echo "export $Newxenv"
  [ "$Setwaylandenv" = "yes" ] && for Line in $Waylandtoolkitenv ; do echo "export $Line" ;  done
  [ "$Sharewayland"  = "yes" ] &&       [ -n "$Waylandsocket" ]    && echo "export WAYLAND_DISPLAY=$Waylandsocket"
  [ -n "$Customenvironment" ]  && for Line in $Customenvironment ; do echo "export $Line" ; done
  
  case $Xserver in # some server special settings
    Xpra|Xpra-Xwayland) 
      echo "## start xpra server on display $Newdisplay created by Xdummy"
      echo "$Xprashm xpra start $Newdisplay --use-display --no-daemon $Xpraoptions > $Xpraserverlogfile 2>&1 &"
      echo 'storepid $! xpra'
      #echo "waitforxpraserver $Xpraserverlogfile"
      echo  "waitforlogentry xpra $Xpraserverlogfile \"xpra is ready\""
      echo "# start xpra viewer on host display"
      echo "export $Hostxenv"
      echo "xpra attach $Newdisplay $Xpraoptions  &"
      echo "export $Newxenv"
    ;;
    Xephyr)
      echo "# set keyboard layout in Xephyr to same as on host"
      echo "echo '$(setxkbmap -display $Hostdisplay -print)' | xkbcomp - $Newdisplay"
    ;;
  esac
  
  case $Xserver in
    Weston|Weston-Xwayland|Kwin|Kwin-Xwayland|Kwin-Native)
      echo "{  # catch closing compositor window"
      echo '  while ps -p $Compositorpid >/dev/null &&  [ ! -e "'$Sharefolder'/timetosaygoodbye" ]; do sleep 1 ; done'
      echo "  touch $Sharefolder/timetosaygoodbye"
      echo '} &'
    ;;
  esac

  [ -n "$Windowmanager" ] && {
    echo "# start host window manager on new display"
    echo "$Windowmanager & storepid \$! $(basename $Windowmanager | cut -d " " -f1)"
  }
  
  case $X11dockermode in
    run)
      [ "$Xserver" = "Xdummy" ] && echo "export $Hostxenv"
      echo "# password for docker will be prompted in $Terminal"
      echo "$Terminal '/bin/bash $Xtermrc 2>&1 | tee $Xtermlogfile'"
      echo "[ -s '$Dockerpidfile' ] && {"
      echo '  Dockerpid=`cat '$Dockerpidfile'` && storepid $Dockerpid docker'
      echo '  # wait for docker until it terminates. bash builtin wait does not work in this case'
      echo "  while ps -p \$Dockerpid >/dev/null 2>&1 && [ ! -e $Sharefolder/timetosaygoodbye ] ; do sleep 1 ; done"
      echo '}'
    ;;
    exe) # includes --xonly
      echo "# run host application"
      echo "echo '$Hostexe' > $Sharefolder/x11docker_CMD"
      echo "bash $Sharefolder/x11docker_CMD & Hostexepid=\$! && storepid \$! bash"
      echo "while [ ! -e $Sharefolder/timetosaygoodbye ] && ps -p \$Hostexepid >/dev/null; do sleep 1 ; done"
    ;;
  esac

  ## option '--pulseaudio'. remove custom tcp module
  #  [ "$Pulseaudio" = "yes" ] && { 
  #    echo 'pactl unload-module $Pulseaudiomoduleid'   ### FIXME: disabled because host pulseaudio daemon stops after this for unknown reasons. Bug in pulseaudio?
  #  }
  
  case $Xserver in
    Xpra|Xpra-Xwayland) echo "[ -e "$HOME/.:$Newdisplaynumber-fakexinerama" ] && rm $HOME/.:$Newdisplaynumber-fakexinerama   # clean up behind xpra"  ;;
  esac
  
} > $Xinitrc

{ #### part: create xtermrc (used by xinitrc to get password and run docker)
  [ "$X11dockermode" = "run" ] && {
    { echo "#! /bin/bash"
      declare -f error
      echo "Logfile=$Logfile"
      echo "Cacherootfolder=$Cacherootfolder"
      [ "$Windowmanager" = "" ] && [ "$Getroot" != "bash -c" ] && case $Xserver in
        Xorg|Xephyr|Weston-Xwayland|Xwayland)
          echo "echo 'Please move mouse cursor into terminal area to get keyboard focus.'"
        ;;
      esac
      echo "
echo 'Created docker command:'
echo ''
echo $Dockercommand
echo ''"
      [ "$Getroot" = "bash -c" ] || echo "echo 'Please type in your password to run docker on display $Newdisplay:'"
      echo ":> $Dockerlogfile"
      echo ":> $Dockerpidfile"
      echo "$Getroot 'nohup $Dockercommand >> $Dockerlogfile 2>&1 & echo "'$!'" >> $Dockerpidfile'"
      echo "sleep 3"
      echo '[ -s "'$Dockerpidfile'" ] && { ps -p $(cat '$Dockerpidfile') >/dev/null 2>&1 || error "Docker failed: '
      echo '  $(tail '$Dockerlogfile')"'
      echo '} || { error "docker did not start successfully. '
      echo '  Maybe you mistyped your password?'
      echo '  Last 2 lines of xterm.log:'
      echo '  $(tail -n2 '$Xtermlogfile')"'
      echo '}' 
    } > $Xtermrc
  } 
}

{ #### part:  some verbose output
    verbose "$(date) $(lsb_release -ds) $(Xorg -version 2>&1 | grep X.Org)
$(xrandr | grep Screen)
Command: $0 $X11dockerargs"
    [ "$Xserver" != "Nothing" ] && {
      verbose "Found free display $Newdisplay"
      verbose "As X server will be used: $Xserver"
      verbose "Environment variables: 
  $Newxenv"
    }
    [ -n "$Waylandsocket" ] && {
      verbose "XDG_RUNTIME_DIR: $XDG_RUNTIME_DIR"
      verbose "Wayland socket: $Waylandsocket"
    }
    verbose "Image name: $Imagename"
    verbose "Image command: $Imagecommand"
    verbose "Current cache folder: $Cachefolder"
    verbose "IP of docker interface: $Dockeriprange"
    case $Xserver in
      Xpra|Xpra-Xwayland) verbose "As window manager serves: Xpra" ;;
      Hostdisplay|Nothing|Weston|Hostwayland|Kwin|Kwin-Native) ;;
      *) [ "$Windowmanager" ] && verbose "As window manager from host serves: $Windowmanager" ;;
    esac
    [ -n "$Hostexe" ] && verbose "Running host application: $Hostexe"
    [ "$Adduserhome" = "yes" ] && verbose "Sharing directory $Adduserhomefolder with container as its home directory /home/$Benutzer"
    [ -n "$Xcommand" ] && verbose "Created X server command:
  $Xcommand" 
    [ -n "$Compositorcommand" ] && verbose "Created compositor command:
  $Compositorcommand"
    verbose "Created docker command:
  $Dockercommand"
    [ -e "$Sharefolder/x11docker_CMD" ] && verbose "Created x11docker_CMD script:
$(cat $Sharefolder/x11docker_CMD)" 
    [ -e "$Sharefolder/Xdummy.sh" ] && verbose "Created Xdummy.sh:
$(cat $Sharefolder/Xdummy.sh)"
    [ -e "$Sharefolder/createuser" ] && verbose "Created createuser script:
$(cat $Sharefolder/createuser)"
    verbose "Created xinitrc:
$(cat $Xinitrc)"
#    verbose "Created xtermrc:
#$(cat $Xtermrc)"
    verbose "Logfiles are:
  $Xinitlogfile
  $Xpraserverlogfile
  $Xtermlogfile
  $Dockerlogfile
Summary logfile: $Logfile
Copy of logfile: $Cacherootfolder/x11docker.log"
    verbose "Running X server $Xserver on display $Newdisplay now ..."

  # create summary logfile
  tail --pid=$$ --retry -n +1 -F $Xtermlogfile $Dockerlogfile $Xpraserverlogfile $Xinitlogfile $Compositorlogfile 2>/dev/null >> $Logfile &
  tail --pid=$$ --retry -n +1 -F $Logfile >$Cacherootfolder/x11docker.log 2>/dev/null &
  # option --verbose: Show logfile on stdout
  [ "$Verbose" = "yes" ] && tail --pid=$$ --retry -n +1 -F $Logfile 2>/dev/null &
}

{ #### part: option '--starter': create desktop starter & exit
  if [ "$Createdesktopstarter" = "yes" ] ; then
    X11dockerargs=$(echo $X11dockerargs | sed 's/--starter/ /')
    Name="$(echo $Imagename | tr / -) $(echo $Imagecommand | tr -cd '[:alpha:][:digit:][:blank:]-_.') x11docker"
    read -re -p "Please choose a name for your desktop starter: " -i "$Name" Name
    { echo "#!/usr/bin/xdg-open
[Desktop Entry]
Type=Application
Name=$Name
Exec=$(basename $0) $X11dockerargs
Icon=system-run
Comment=
Categories=System
Keywords=docker x11docker $(echo $Name | tr -c '[:alpha:][:digit:][:blank:]' ' ' )"
    case $(command -v x11docker) in 
      "")echo "TryExec=$0 $X11dockerargs" ;;
      *) echo "TryExec=x11docker $X11dockerargs" ;;
    esac
    } > "$(xdg-user-dir DESKTOP)/$Name.desktop"
    verbose "Created desktop icon $(xdg-user-dir DESKTOP)/$Name.desktop"
    exit 0
  fi
}

{ #### Finally: run new X server or/and Wayland Compositor
  :> $Xinitlogfile
  case $Xserver in
    Xorg|Xpra|Xephyr|Xdummy|Xwayland|Nxagent) xinit $Xinitrc -- $Xcommand        >> $Xinitlogfile  2>&1 ;;
    Hostdisplay|Hostwayland|Kwin-Native)      bash  $Xinitrc                     >> $Xinitlogfile  2>&1 ;;
    Xpra-Xwayland)
      [ "$WAYLAND_DISPLAY" = "" ] || [ "1" = "$(awk -v a="$Scaling" 'BEGIN {print (a < 1)}')" ] && {
        WAYLAND_DISPLAY=""  $Compositorcommand                                   > $Compositorlogfile 2>&1 & storepid $! weston
        waitforlogentry "weston" $Compositorlogfile "weston-desktop-shell"       >> $Xinitlogfile  2>&1
        xdotool windowunmap "0x$(printf '%x\n' $(cat $Compositorlogfile | grep 'window id' | rev | cut -d' ' -f1 | rev))"
      }
      WAYLAND_DISPLAY=$Waylandsocket          xinit $Xinitrc -- $Xcommand        >> $Xinitlogfile  2>&1 ;;
    Weston-Xwayland)
      [ -n "$WAYLAND_DISPLAY" ] && export DISPLAY=""
      $Compositorcommand                                                         > $Compositorlogfile 2>&1 & storepid $! weston  && export Compositorpid=$!
      waitforlogentry   "weston" $Compositorlogfile "weston-desktop-shell"       >> $Xinitlogfile  2>&1 
      WAYLAND_DISPLAY=$Waylandsocket          xinit $Xinitrc -- $Xcommand        >> $Xinitlogfile  2>&1 ;;
    Weston)
      [ -n "$WAYLAND_DISPLAY" ] && export DISPLAY=""
      $Compositorcommand                                                         > $Compositorlogfile 2>&1 & storepid $! weston  && export Compositorpid=$!
      waitforlogentry   "weston" $Compositorlogfile "weston-desktop-shell"       >> $Xinitlogfile  2>&1 
                                              bash  $Xinitrc                     >> $Xinitlogfile  2>&1 ;;
    Kwin-Xwayland)
      #kwin_wayland --xwayland --socket=$Waylandsocket $Kwinoptions --exit-with-session="$Waitforgoodbye"  > $Compositorlogfile 2>&1 & storepid $! kwin    && export Compositorpid=$!
      $Compositorcommand --exit-with-session="$Waitforgoodbye"                   > $Compositorlogfile 2>&1 & storepid $! kwin    && export Compositorpid=$!
      waitforlogentry   "kwin"   $Compositorlogfile "X-Server"                   >> $Xinitlogfile  2>&1 
      WAYLAND_DISPLAY=$Waylandsocket          xinit $Xinitrc -- $Xcommand        >> $Xinitlogfile  2>&1 ;;
    Kwin)
      #kwin_wayland --xwayland --socket=$Waylandsocket $Kwinoptions --exit-with-session="$Waitforgoodbye"  > $Compositorlogfile 2>&1 & storepid $! kwin    && export Compositorpid=$!
      #[ -n "$Hostdisplay" ] && export WAYLAND_DISPLAY=""
      $Compositorcommand --exit-with-session="$Waitforgoodbye"                   > $Compositorlogfile 2>&1 & storepid $! kwin    && export Compositorpid=$!
      waitforlogentry   "kwin"   $Compositorlogfile "X-Server"                   >> $Xinitlogfile  2>&1
                                              bash  $Xinitrc                     >> $Xinitlogfile  2>&1 ;;
    Nothing)                                  bash  $Xinitrc          2>&1 | tee -a $Xinitlogfile  2>&1 ;;
  esac
}
