#! /bin/bash

# x11docker
# Run GUI applications and desktop environments in docker on a separate X server.
# Provides GPU acceleration and pulseaudio sound. Circumvents some X security leaks.
# Type 'x11docker --help' or scroll down to read usage information.
# https://github.com/mviereck/x11docker

VERSION="V 1.5.6"

# ToDo:
# - test --gpu and --virtualgl with different setups of graphic cards and drivers. Known to work with Intel and AMD onboard chips with open source drivers.
# - check pulseaudio: daemon on host seems to quit when image terminates. As a workaround, tcp module is not disabled on exit for now
# - check if VT is not in use with --X11
# - kaptain sleeps a while until command is created. no cpu usage. why?
# - try to integrate ALSA sound

# x11docker changelog
# 24.11.2016 V1.5.6   some comments
#                     improved usage information (--help)
#                     minor bugfix: on option --hostuser without a given image command, warnings were invisible without --verbose
# 12.11.2016 V1.5.5   create desktop starter with $0 if x11docker is not found within $PATH
# 10.11.2016          improved --help message
#                     if no image or host executable is given and autochoosing Xephyr and no WM is given, look for WM
#                     removed check for SHARENET to enable tcp -> now developer options only
#                     don't echo device files on --gpu
#                     option -retro for all X servers
#                     x11docker-gui now checks for executeable ./x11docker, too
# 08.11.2016          minor bugfix: typo SHAPEIPC instead SHAREIPC: set QT_GRAPHICSSYSTEM=opengl if $XSERVER=HOSTDISPLAY
#                     removed unused JOBSTOKILL
# 05.11.2016 V1.5.4   some code cleanup
#                     removed $XTERM
#                     removed config file, not neccessary
#                     renamed XEXTENSIONS to XOPTIONS
#                     explicitly enable extension XTEST for xpra/Xdummy, disable for X11 and Xephyr as not needed
#                     renamed XEPHYRARGS and XPRAARGS to XEPHYROPTIONS and XPRAOPTIONS
#                     bugfix: add container user to vglusers group. check has been for group 'pulse' instead
# 31.10.2016 V1.5.3   bugfix: use Xorg instead of X to be able to run Xdummy for xpra without root privileges
# 31.10.2016 V1.5.2   bugfix: disabled ALSA 
#                     additional warnings if window manager is missing.
# 26.10.2016 V1.5.1   enable/disable MIT-SHM environment variables on HOSTDISPLAY only.
#                     removed variable DOCKERUSER, no longer needed
#                     usage (--help) info correction: use --ipc with --hostuser only, not --hostdisplay 
#                     some code cleanup
#                     only create ADDUSERHOMEFOLDER and symbolic link ~/x11docker if ADDUSERHOMEFOLDER does not exist
# 25.10.2016 V1.5.0   solved problems with MIT-SHM, --ipc and --net. Extension MIT-SHM has to be explicitly disabled on new X servers!
#                     (Still no way to disable MIT-SHM with option --hostdisplay except for QT applications)
#                     using shared X socket instead of X over tcp as default now. '-nolisten tcp' on all X servers
#                     option --net moved to developer options
# 24.10.2016 V1.4.3   minor bugfix: show warning on --ipc or --net without --hostuser, not other way around
# 24.10.2016 V1.4.2   show warning if --ipc or --net without --hostuser/--sudouser
# 23.10.2016          some more code cleanup, especially parts "create docker command" and "create xinitrc"
#                     replacing STARTDISPLAY with HOSTDISPLAY, same with HOSTXAUTHORITY, new variable HOSTXSOCKET
#                     included comments in xinitrc
# 21.10.2016          some code cleanup
# 20.10.2016 V1.4.1   bugfix: removed creating of non-existing vgl cookie
# 20.10.2016 V1.4.0   new options --net and --ipc: Security holes, can avoid rendering glitches with --gpu and allow GPU access over tcp
# 19.10.2016          developer options --ipc --pid --net --uts
# 18.10.2017          bugfix: set NEWDISPLAY to HOSTDISPLAY with option --exe
# 17.10.2017 V1.3.0   securitytable() shows table with grade of container isolation depending on choosed options
#                     -x : autochoose xephyr instead of xpra if no image is given -> runs xephyr with windowmanager instead of empty useless xpra
#                     bugfix: only be verbose on option --verbose
# 16.10.2016          removed all left xhost +SI:whatever settings, only cookies in use now. Thanks to http://stackoverflow.com/a/25280523/5369403
#                     --hostdisplay: official option now, classic X socket sharing without container isolation
#                     -x / autochoose server as default, instead of X11 as default
#                     --X11 new option, explicitly choosing core new X server
#                     --orphaned: show only basenames of orphaned folders
#                     changed cache deletion in finish() to match --hostdisplay cache folders
#                     check environment variables set by vglrun instead of static setting
# 15.10.2016          --hostdisplay: developer option, classic sharing of host display via x socket, breaking container isolation
# 13.10.2016 V1.2.1   some improvements using VirtualGL
#                     don't unload pulseaudio tcp module on exit to avoid pulseaudio daemon stop
#                     Xdummy instead of Xvfb for xpra - dependency xvfb lost
# 12.10.2016          bugfix: set X11DOCKERMODE on default onlyX
#                     repair damaged parser
# 12.10.2016  V1.2.0  --virtualgl: Mediate hardware acceleration with VirtualGL in all X servers possible now. Drawback: Full access to :0, breaking container isolation if not using core X
#                     developer options: --xsocket, --sharegpu
#                     bugfix: +extension MITSHM disabled videos in Xephyr
# 11.10.2016          bugfix developer option --xhost: set xhost - on host display at end of xinitrc
#                     Testing with --virtualgl, share libs and environment variables
# 10.10.2016  V1.1.3  unified --verbose and --VERBOSE to --verbose
#                     fixed help message if running as root without option --root
# 08.10.2016          developer options --devel --xhost --virtualgl
#                     bugfix: tail -F for log now shows all files frm beginning. was missing --retry -n +1
#                     change --orphaned: remove all cache files 
# 06.10.2016  V1.1.2  back to X over tcp. Marked --gpu as experimental. --gpu still with shared socket
# 05.10.2016  V1.1.1  --glamor: added again
#                     using /tmp/x11docker instead of ~.cache/x11docker
# 04.10.2016          disabled X over tcp, sharing new X socket instead.
#                     authentication with xhost +SI:localuser:user and cookie.
# 04.10.2016  V1.1.0  --gpu new option for hardware acceleration. drawback= needs xhost +SI:localhost:user instead of cookie, but no tcp
#                     removed --glamor, keep it as default
#                     set tty to use for core X server with $NEWXVT
#                     enabled SelectToClipboard in xterm
# 02.10.2016          --glamor: new option enables Xephyr 2d acceleration
#                     enabled many X extensions
# 01.10.2016          bugfix: removed -glamor in Xephyr for better support of kwin, added +extension GLX +extension RENDER +extension RANDR
# 30.09.2016  V 1.0.5 improved --orphaned; create named containers to check for
#                     rename option --zombiecheck to --orphaned
# 30.09.2016  V 1.0.4 improved creating desktop starter: prompting for name
#                     check for existing $BGPIDFILE on exit to avoid error message
# 29.09.2016  V 1.0.3 new option --pulseaudio: sound with pulseaudio over tcp
# 24.09.2016  V 1.0.2 new upload on github
# 24.09.2016          New option --no-xhost: disable any access to host X server granted by xhost
#                     Fixed minor bug: set xkbmap in xephyr after XAUTHORITY&DISPLAY has been set
#                     Set HOSTXAUTHORITY as $HOME/.Xauthority if $XAUTHORITY is empty
#                     Exit on error while parsing options
#                     Avoid error message of xclip setting empty CLIP to " "
# 23.09.2016          new option: orphaned. Check for not cleanly removed containers and cache files
# 05.09.2016          bugfix: parsing $IMAGECOMMAND
#                     included MIT license text in script.
#                     waiting up to 10 instead of 5 seconds for docker to terminate
# 01.09.2016          some scripting improvements
# 30.08.2016          bugfix: cache folder was prevented from being deleted
#                     create symbolic link in $HOME to ~/.local/share/x11docker
#                     change CACHEFOLDER from ~/.cache/x11docker to /tmp/x11docker
#                     create file bgpids on init to avoid error message on option --help
#                     show warning if running pure X with window manager without logout option
# 28.10.2015          improved shared clipboard with Xephyr / minor bug fix for clips with more than 1 line
#                     removing not allowed chars in desktop starter file names
#                     finish(): make sure only cache subfolder will be deleted
# 25.10.2015  V 1.0.1 options --log and --LOG - show log in terminal on display :0 or new display
# 24.10.2015          minor bug fix: parsing: replaced sed with cut ( "/" in $IMAGECOMMAND caused sed bug)
# 20.10.2015          improved exit handling
# 16.10.2015  V 1.0

usage() {    # --help: show usage information
    echo "
x11docker: Create a new X server & run GUI applications and desktop 
         environments in docker and show them on your display.
         Useful to avoid security issues concerning X forwarding.
         Doesn't have dependencies inside of docker images.

If using xpra or Xephyr (recommended, see options '--xpra' and '--xephyr'):
 * The dockered applications will appear on your regular desktop.
   (needs no tty switching, 'x11-common' doesn't need to be changed)
If using X server from Xorg (option -X11):
 * To start x11docker from console, switch to tty1 with <CTRL><ALT><F1>.
 * To start x11docker from within already running X, first run 
   'dpkg-reconfigure x11-common' and choose option 'anybody'.
 * To switch between displays/X servers, press <CTRL><ALT><F7>...<F12>

 
Usage:
To run a docker image with new X server (auto-choosing X server option):
   x11docker [OPTIONS] IMAGE [COMMAND]
   x11docker [OPTIONS] -- [DOCKER_RUN_OPTIONS] IMAGE [COMMAND [ARG1 ARG2 ...]]
To run a host application on a new X server:
   x11docker [OPTIONS] --exe COMMAND
   x11docker [OPTIONS] --exe -- COMMAND [ARG1 ARG2 ...]
To run only a new X server with window manager:
   x11docker [OPTIONS]

 * The new X server will be terminated once [docker] application is closed.
 * On systems without a root password like Ubuntu, use option '--sudo'.
 * x11docker is designed to run images only. New containers will be discarded.

Options:
 -h, --help            display this message and exit
 --license             show license of script (MIT) and exit
 -w, --wm COMMAND      window manager to use (otherwise, x11docker tries to run
                       a new instance of the current running window manager; if
                       that's not possible, it will look for a recommended one)
                       (no effect if choosing --xpra or --hostdisplay)
 -d, --desktop         don't run any host window manager on new X server;
                       image contains its own desktop and/or window manager
 -x                    auto choose X server for docker applications (default)
 -a, --xpra            use xpra to show application windows on display :0
                       (needs package 'xpra' to be installed)
 -y, --xephyr          use Xephyr to show desktops in a window on display :0
                       (needs package 'xephyr' to be installed)
 -X, --X11             use new core X server beneath display :0
 --hostdisplay         share host display :0, BREAKS CONTAINER ISOLATION.
                       (least overhead of all X server usage variations)
 -c, --clipboard       share clipboard between X servers (works best with --xpra
                       Options --X11 and --xephyr: text clipboard only) 
 -f, --fullscreen      run Xephyr in fullscreen mode
 -z, --size XxY        set Xephyr screen size (f.e. 800x600 )
 -r, --resizeable      make Xephyr window resizeable (Note: some window
                       managers/desktops won't like this and may misbehave)
 --glamor              enable Xephyr glamor 2D acceleration
 -e, --exe             execute host application on new X server (no docker)
 -u, --hostuser        create a user in container similar to host user
                       (same UID, same GID, same name)
 -o, --sudouser        same as '--hostuser', but container user gains root
                       permissions per sudo without password
 -m, --home            share folder ~/x11docker/IMAGENAME in host home folder
                       with created container.
 --pulseaudio          enable sound with pulseaudio over tcp. Needs
                       pulseaudio to be installed on host and in image
 --virtualgl           hardware acceleration with VirtualGL. Needs virtualgl
                       to be installed on host. BREAKS CONTAINER ISOLATION
                       from display :0 if used with --xpra or --xephyr.
 --gpu                 Hardware accelerated OpenGL rendering. Needs mesa-utils
                       in image to be installed, sometimes 'x11-utils' too.
                       Works with options --X11 and --hostdisplay only.
                       Can get additional speed-up with option --ipc
 --ipc                 ISOLATION BREAKDOWN: container access to interprocess
                       communication and shared memory from host.
                       Use with option --hostuser only to minimize risks.
Advanced options:
 -s, --sudo            use 'sudo' to run 'su -c docker ...' (Ubuntu special)
 --starter             create starter on desktop and exit
 --no-xhost            disable any access to host X server granted by xhost
 --orphaned            check for non-removed containers and left cache files 
                       possibly owned by root and created by docker
 -p, --ps              preserve container on exit (as a default, x11docker sets
                       docker run option '--rm' to remove created container)
 --root                allow root to run x11docker. Default: No
                       (A new X server should not run with root privileges)
 --command             only show created docker command on stdout and exit
 --cid                 show filename that contains container ID on stdout
 --cache               don't delete cache files on exit (including logs)
 -l, --log             show log in an xterm window on display :0
 -L, --LOG             show log in an xterm window on new display
 -v, --verbose         be verbose

Dependencies: depending on choosed options, x11docker needs some packages
         to be installed. It will check for them on startup and show messages 
         if some are missing. List of possibly needed packages:
         docker.io xorg xpra xephyr xclip pulseaudio virtualgl wmctrl

Window manager: x11docker works fine with most common window managers.
         x11docker tries to detect your current running window manager to 
         start a new instance of it on the new display. Otherwise, choose
         one you like. Recommendations:
          * Lightweight and desktop independent:
$WM_RECOMMENDED_DESKTOP_LIGHT 
          * Heavy and desktop independent:
$WM_RECOMMENDED_DESKTOP_HEAVY
          * Lightweight, no desktop options: (if you run only X server and
            window manager, you would need an exit/logout option)
$WM_RECOMMENDED_NODESKTOP_LIGHT
          * Heavy, no desktop options:
$WM_RECOMMENDED_NODESKTOP_HEAVY
         _NOT_ recommended:
          * Known to have problems in some situations: 
$WM_UGLY
          * Known not to work at all:
$WM_BAD

------------------------------------------------------------------------------
Table to show grade of container isolation | software  | --virtualgl | --gpu
depending on chosen options                | rendering |             |
------------------------------------------------------------------------------
--X11          = core X                    |  +++++    |  ++++       |  ++++
--xpra         = xpra                      |  +++++    |  +:0        |  -
--xephyr       = Xephyr                    |  +++++    |  +:0        |  -
--hostdisplay  = share host display :0     |  +:0      |  +:0        |  +:0
------------------------------------------------------------------------------
--ipc = Breaks isolation. Additional speedup for option --gpu and avoiding
        rendering glitches with option --hostdisplay. Use with --hostuser only.
        Container access to host interprocess communication and shared memory.
        Allows X server MIT-SHM extension.
------------------------------------------------------------------------------
+++++ high container isolation, secure to use.
++++  high container isolation, slightly degraded by container access to GPU.
+:0   low container isolation due to X security leaks, considered insecure.
      (full access to X server on display :0 with host applications.
       For example, keylogging is possible. For use with trusted images only.)
-     does not work and slightly insecure.
------------------------------------------------------------------------------
x11docker version $VERSION
"
}
license() {  # --license: show license (MIT)
echo 'MIT License

Copyright (c) 2015, 2016 Martin Viereck

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.'
}
{ #### part: variable descriptions and default settings
CACHEFOLDER=$HOME/.cache/x11docker              # define cache folder to store temporary files. Will be changed to path of subfolder

X11DOCKERMODE="onlyX"                           # can be either "onlyX", "run" or "exe", depends on options
DOCKERARGS=""                                   # arguments to submit to docker
DOCKEROPTIONS=""                                # options for docker without image name/image args
X11DOCKERARGS="$*"                              # arguments for x11docker, later without arguments for docker
ARGUMENT=""                                     # variable to step through arguments
IMAGENAME=""                                    # name of image to run
IMAGECOMMAND=""                                 # name of image [+ command+args]
CONTAINERNAME=""                                # name of container, set by x11docker, to make --orphaned able to find orphaned containers

DOCKERIP=""                                     # IP adress of docker interface
DOCKERIPRANGE=""                                # IP adress of docker interface including suffix /16
DOCKERPID="123454321"                           # process ID (PID) of docker instance. set a dummy here
XINITRC=xinitrc                                 # file to store xinitrc commands
XINITLOGFILE=xinit.log                          # file to log output of X server
XTERMRC=xtermrc                                 # file to store xtermrc commands
XTERMLOGFILE=xterm.log                          # file to log output of xterm
DOCKERLOGFILE=docker.log                        # file to log output of docker
DOCKERPIDFILE=docker.pid                        # file to store process ID of docker
CIDFILE=containerID                             # file to store container ID number
BGPIDFILE=backgroundpids                        # file to store PIDS and names of background processes that shut be killed on exit

XSERVER=""                                      # X server to use ( one of X11 | XPRA | XEPHYR | HOSTDISPLAY)
AUTOCHOOSESERVER="yes"                          # option '-x': automated choosing server
XOPTIONS=""                                     # X extensions to enable and other X options
HOSTXAUTHORITY=$XAUTHORITY                      # store environment variable pointing to X authority cookies
if [ -z "$HOSTXAUTHORITY" ] ; then HOSTXAUTHORITY=$HOME/.Xauthority ; fi  # for unknown reasons it can be empty. Assuming  this path as default
HOSTDISPLAY=$DISPLAY                            # store Environment variable containing name of current display
HOSTXSOCKET="/tmp/.X11-unix/X$(echo $HOSTDISPLAY | cut -d: -f2 | cut -d. -f1)"  # X socket from host, needed for --hostdisplay and --virtualgl
NEWDISPLAY=""                                   # new display for new X server
XSERVERCOOKIE=Xservercookie                     # file to store new X server cookies
XCLIENTCOOKIE=Xclientcookie                     # file to store new X client cookies
#NEWXLOCK=""                                     # .Xn-lock - exists for running X server with socket n
NEWXSOCKET=""                                   # New X socket
NEWXVT=""                                       # Virtual console to use for core new X server (>7)
XCONNECTION="xsocket"                           # 'tcp' or 'xsocket'. default: xsocket. X over tcp is still possible, but no longer needed in any case
SHARENEWXSOCKET=""                              # if "yes", share new X socket (now default if not using developer option --tcp)

# options for different X servers
XPRAOPTIONS=""
XEPHYROPTIONS=""
XPRASERVERLOGFILE=xpraserver.log                # logfile for xpra server
# special for Xephyr
WINDOWTITLE=""                                  # window title for Xephyr
# Get screen size for use with Xephyr
XAXIS=$(xrandr --current | grep '*' | tail -1 | awk '{print $1}' | cut -d 'x' -f1)
YAXIS=$(xrandr --current | grep '*' | tail -1 | awk '{print $1}' | cut -d 'x' -f2)
XEPHYRSIZE="-screen $(($XAXIS-100))x$(($YAXIS-100))"   # option '-z, --size' can change this value. otherwise, a roughly maximized window size is set here
XEPHYRFULLSCREEN="no"                           # option '-f, --fullscreen': use fullscreen mode (Xephyr only)
XEPHYRGLAMOR="no"                               # option '--glamor': enable Xephyr glamor 2D acceleration

# variables depending on options
WINDOWMANAGER=""                                # option '-w, --wm': window manager to use. if not given but needed, autodetection is used
DESKTOPIMAGE="no"                               # option '-d, --desktop': if "yes", run desktop environment instead of single application
SHARECLIPBOARD="no"                             # option '-c, --clipboard' enable clipboard sharing
SHARECLIPBOARDSCRIPT="clipboard.bash"           #    "              "      script used for text clipboard sharing to Xephyr/X11 
#
ADDHOSTUSER="no"                                # option '-u, --hostuser': try to add user to container with same UID and GID as host user
ADDSUDOUSER="no"                                # option '-o, --sudouser': same as '-u, --hostuser', but created user gains root access via sudo without password
CREATEUSERSCRIPT=createuser                     #   "          "         : file to store commands to create container user
ADDUSERHOME="no"                                # option '-m, --home': share a folder ~/.local/share/x11docker/IMAGENAME with created container
ADDUSERHOMEFOLDER="no"                          #   "        "   : path to shared folder
BENUTZER=$USER                                  # name of user to simulate in container
#
PULSE_PORT=""                                   # option '--pulseaudio': pulseaudio tcp  to use
PULSE_MODULE_ID=""                              #   "                    number of customized pulseaudio tcp module, output of pactl
#
ORPHANEDCHECK="no"                              # option '--orphaned': check for non-removed containers and maybe root-owned files in cache
CREATEDESKTOPSTARTER="no"                       # option '--starter': create desktop starter and exit yes/no
ALLOWROOT="no"                                  # option '--root': allow root to run x11docker
ONLYSHOWCOMMAND="no"                            # option '-c, --command': if not empty, only show docker command and exit
GETROOT="su -c"                                 # option '-s, --sudo' will add 'sudo' to command to get root privileges.
SHOWCIDFILENAME="no"                            # option '--cid': if 'yes', show filename of file containing container ID 
VERBOSE="no"                                    # options '-v, --verbose': if "yes", be verbose
SHOWLOG="no"                                    # option '-l, --log': show log in an xterm window on display :0
SHOWLOGNEWDISPLAY="no"                          # similar to '--log', but on new display
PRESERVECACHEFILES="no"                         # option '--cache': preserve cache files instead of removing them on exit
PRESERVECONTAINER="no"                          # option '-p, --ps': if yes, preserve container instead of removing it with 'docker run --rm'
GPU=""                                          # options '--gpu' and '--virtualgl': Use hardware accelerated OpenGL. Can be empty, "virtualgl" or "xsocket"
SHAREIPC="no"                                   # option '--ipc': run docker with option --ipc=host
#
NO_XHOST="no"                                   # option '--no-xhost': if yes, disable all X server access granted by xhost
# strings collecting pids of background jobs to be killed before exiting
XINITJOBSTOKILL=""                              # collection of job pids to kill at end of xinitrc

# some temporary or loop variables
PID=""
NAME=""
ZEIT=""
LINE=""
COUNT=""

# developer options

SHARENET="no"                                   # option "--net": run docker with option --net=host
SHAREPID="no"                                   # option "--pid": run docker with option --pid=host
SHAREUTS="no"                                   # option "--uts": run docker with option --uts=host
ALSA="no"                                       # option '--alsa': support ALSA audio

# Window manager variables
WM_NAME=""                                      # base name of window manager
WMCTRL_IS_INSTALLED=""                          # wmctrl is installed yes/no
#
# these window managers are known to work well with x11docker (alphabetical order)(excluding $WM_NOT_RECOMMENDED and $WM_UGLY):
WM_GOOD="amiwm blackbox cinnamon compiz ctwm enlightenment fluxbox flwm fvwm"
WM_GOOD="$WM_GOOD jwm kwin lxsession mate-session mate-wm marco metacity muffin mutter notion olwm olvwm openbox ororobus pekwm"
WM_GOOD="$WM_GOOD sawfish twm wmaker w9wm xfwm4"
# these wm's are recommended, lightweight AND desktop independent. best first:
WM_RECOMMENDED_DESKTOP_LIGHT="flwm blackbox fluxbox jwm mwm wmaker afterstep amiwm fvwm ctwm pekwm olwm olvwm openbox" 
# these wm's are recommended, heavy AND desktop independent. best first:
WM_RECOMMENDED_DESKTOP_HEAVY="mate-session lxsession enlightenment"
# these wm's are recommended and lightweight, but cannot show desktop options. best first:
WM_RECOMMENDED_NODESKTOP_LIGHT="sawfish xfwm4 metacity mutter"
# these wm's are recommended and heavy, but cannot show desktop options (especially exiting themselves). best first:
WM_RECOMMENDED_NODESKTOP_HEAVY="kwin compiz cinnamon gnome-shell"
# these wm's are not really useful (please don't hit me) (best first):
WM_NOT_RECOMMENDED="awesome evilwm herbstluftwm i3 lwm matchbox miwm spectrwm subtle windowlab wmii wm2"
# these wm's cannot be autodetected by wmctrl if they are already running
WM_NODETECT="aewm aewm++ afterstep awesome ctwm mwm miwm olwm olvwm sapphire windowlab wm2 w9wm"
# these wm's can cause problems (they can be beautiful, though):
WM_UGLY="icewm sapphire aewm aewm++"
# these wm's doesn't work:
WM_BAD="clfswm tinywm tritium"
# List of all working window managers, recommended first: (excluding $WM_BAD)
WM_ALL="$WM_RECOMMENDED_DESKTOP_LIGHT $WM_RECOMMENDED_NODESKTOP_LIGHT $WM_RECOMMENDED_DESKTOP_HEAVY $WM_RECOMMENDED_NODESKTOP_HEAVY $WM_GOOD $WM_UGLY"
}
error() {    # show error messages on stderr and exit
  echo "x11docker ERROR: $*" >&2
  echo "Type 'x11docker --help' for usage information" >&2
  echo "For debugging, enable option '-v, --verbose' and run x11docker in terminal" >&2
  echo "and / or enable option '--cache' and see logfiles in" >&2 
  echo "$CACHEFOLDER" >&2
  echo "" >&2
  exit 1
}
warning() {  # show warning message
  echo "x11docker WARNING: $*" >&2
  echo "" >&2
}
verbose() {  # show verbose messages
  if [ "$VERBOSE" = "yes" ] ; then
    echo "x11docker: $*"
    echo ""
  fi
}
storepid () { # store pids and names in file $BGPIDFILE
  # store PID and process name of background processes in file
  # $1 should be PID, $2 should be name of process
  # for use on exit / with trap to clean up with background processes
  # normally, they should be terminated via $PIDSTOKILL/$XINITPIDSTOKILL
  # this subroutine has a twin in xinitrc
  echo $1 $2 >> $BGPIDFILE
}
killbgpids () { # kill background processes listet in $BGPIDFILE
  # check for possible remaining background processes stored in $BGPIDFILE
  # double check with PID and name; kill if process is still running
  # jobs in $XINITPIDSTOKILL should already be killed, but will be checked here, too
  LINE=""  # line of $BGPIDFILE
  PID=""   # PID to look for
  NAME=""  # name matching to PID
  DOCKERPID=""
  ZEIT=""
  COUNT=""
  #
  while read LINE ; do 
    PID=$(echo $LINE | awk '{print $1}')
    NAME=$(echo $LINE | awk '{print $2}')
    if [ -n "$(pgrep $NAME | grep $PID)" ] ; then
      warning "Found remaining background process.
  Will send signal TERM to process $LINE"
      kill $PID
      if [ "$NAME" = "docker" ] ; then DOCKERPID=$PID ; fi
    fi
  done < $BGPIDFILE
  #
  # if x11docker was interrupted, maybe docker is still running the
  # container. This can cause some issues; especially, if the cache
  # is deleted, but not the container, docker will recreate mounted
  # files 'Xcookie' and 'createuser' as folders belonging to root.
  #
  if [ -n "$DOCKERPID" ] ; then
    warning "Found remaining docker process. Most probably the
  X session was not closed in a clean way. Could not send TERM signal because 
  docker runs as root. Will wait up to 10 seconds for docker to finish."
    ZEIT=`date +%s`
    while [ -n "$(pgrep docker | grep $DOCKERPID)" ] ; do
      echo "waiting for docker to terminate ..."
      sleep 0.5
      COUNT=$(echo "`date +%s` - $ZEIT" | bc)
      if [ 10 -lt $COUNT ] ; then break ; fi
    done
    if [ -n "$(pgrep docker | grep $DOCKERPID)" ] ; then
      warning "docker didn't terminate as it should. Will not clean
  cache to avoid file permission problems. You should stop docker and remove
  the new container with command:
docker stop `cat $CIDFILE` && docker rm `cat $CIDFILE`
  or let x11docker do the work for you: 
x11docker --orphaned"
      PRESERVECACHEFILES="yes"
    else
      echo "docker container terminated successfully"
    fi
  fi
}
finish() { # trap routine, clean up background processes and cache
  #
  # kill registered background processes
  for ARGUMENT in $PIDSTOKILL ; do kill $ARGUMENT ; done  # clean up
  #
  # kill possible remaining background processes (f.e. on interrupt)
  if [ -f "$BGPIDFILE" ] ; then killbgpids ; fi
  #
  # option '--cache': [don't] remove cache files
  if [ "$PRESERVECACHEFILES" = "no" ] ; then 
    if [ "x11docker" != "$(basename $CACHEFOLDER)" ]  && [ -n "$(echo $CACHEFOLDER | grep .cache)" ]; then
      rm -f -R $CACHEFOLDER
    fi
  fi
}
no_xhost() { # remove any access to X server granted by xhost
  xhost | tail -n +2  /dev/stdin | while read LINE ; do  # read all but the first line (header)
    xhost -$LINE                                         # disable every entry
  done
  xhost -                                                # enable access control
}
orphaned() { # option --orphaned : check for non-removed containers and left cache files possibly owned by root and created by docker
  echo "x11docker will check for orphaned containers from earlier sessions. 
    This can happen if docker was not closed successfully. If this is the case,
    and option --home was chosen, docker creates missing shared files as 
    folders owned by root in your home cache folder. This is annoying. x11docker 
    will try to find such containers and delete all x11docker cache files.
    Caution: any currently running x11docker sessions will be terminated, too.
    Please type in your password to get a current list of existing containers:"
  MATCHCONTAINERS=""
  MATCHFOLDERS=""
  cd $CACHEFOLDER
  while read -r LINE ; do
    MATCHCONTAINERS="$MATCHCONTAINERS $(echo $LINE | cut -d ' ' -f1)"
  done < <($GETROOT 'docker ps -a' | grep "x11docker_")
  MATCHFOLDERS=$(echo $(find $CACHEFOLDER -mindepth 1 -maxdepth 1))
  if [ -z "$MATCHCONTAINERS" ] && [ -z "$MATCHFOLDERS" ] ; then echo "No orphaned containers or cache files found. good luck!"
  else
    echo "Found orphaned containers: $MATCHCONTAINERS"
    echo -n "Found orphaned folders in $CACHEFOLDER: " 
    for LINE in $MATCHFOLDERS ; do echo -n "$(basename $LINE) " ; done ; echo ""
    echo "Type in your password to remove orphaned containers and folders:"
    if [ -n "$MATCHCONTAINERS" ] && [ -n "$MATCHFOLDERS" ] ; then
      echo $GETROOT "'docker rm -f $MATCHCONTAINERS ; rm -R -v $MATCHFOLDERS'"
      eval $GETROOT "'docker rm -f $MATCHCONTAINERS ; rm -R -v $MATCHFOLDERS'"
    fi
    if [ -n "$MATCHCONTAINERS" ] && [ -z "$MATCHFOLDERS" ] ; then
      echo $GETROOT "'docker rm -f $MATCHCONTAINERS'"
      eval $GETROOT "'docker rm -f $MATCHCONTAINERS'"
    fi
    if [ -z "$MATCHCONTAINERS" ] && [ -n "$MATCHFOLDERS" ] ; then
      echo $GETROOT "'rm -R -v $MATCHFOLDERS'"
      eval $GETROOT "'rm -R -v $MATCHFOLDERS'"
    fi
  fi
}
xdparser() { # parse args for x11docker
  SHORT="hw:dxXayrz:scuomfvVeplL"
  LONG="wm:,desktop,x,X,xpra,Xpra,xephyr,Xephyr,X11,x11,hostdisplay,exe"             # X server and WM, exe instead of docker
  LONG="$LONG,fullscreen,resizeable,size:,glamor"                                    # Xephyr options
  LONG="$LONG,clipboard,hostuser,sudouser,home,pulseaudio,gpu,virtualgl"             # comfort options
  LONG="$LONG,sudo,root,ipc,ps,verbose,cid,cache,log,LOG,no-xhost"                   # advanced options
  LONG="$LONG,starter,orphaned,license,licence,command,help"                         # special options without starting X server
  LONG="$LONG,xhost,privileged,xsocket,tcp,sharegpu,tcpxsocket,pid,uts,net,alsa"     # developer options, not for regular use
  PARSED=`getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"`
  if [ "$?" != "0" ] ; then error "Error while parsing options. See 'x11docker --help' for vaild options." ; fi
  eval set -- "$PARSED"
  if [[ $? != 0 ]]; then error $? ; fi    
  while [ -n "$1" ] ; do
    case $1 in
      -h|--help) usage && exit 0  ;;                    # show help/usage and exit
      --license|--licence) license && exit 0   ;;       # show MIT license and exit
      -w|--wm) WINDOWMANAGER=$2 && shift   ;;           # custom window manager
      -d|--desktop) DESKTOPIMAGE="yes"  ;;              # desktop environment or window manager in image; don't run own window manager
      --command) ONLYSHOWCOMMAND="yes"  ;;              # only show created docker command and exit
      -s|--sudo) GETROOT="sudo $GETROOT"  ;;            # use sudo to run 'su -c docker ...'
      -x|--x) AUTOCHOOSESERVER="yes"    ;;              # use xpra or Xephyr, X11 or hostdisplay
      -a|--xpra|--Xpra) XSERVER="XPRA" ; AUTOCHOOSESERVER="no"  ;;             # use xpra
      -y|--xephyr|--Xephyr) XSERVER="XEPHYR" ; AUTOCHOOSESERVER="no"  ;;       # use Xephyr
      -X|--X|--X11|--x11) XSERVER="X11" ; AUTOCHOOSESERVER="no"     ;;         # use X
      --hostdisplay) XSERVER="HOSTDISPLAY" ; AUTOCHOOSESERVER="no"  ;;         # use host display :0 with shared X socket
      -c|--clipboard) SHARECLIPBOARD="yes"  ;;          # share host clipboard with dockered applications (xpra only)
      -f|--fullscreen) XEPHYRFULLSCREEN="yes"  ;;       # fullscreen mode for Xephyr
      -z|--size) XEPHYRSIZE="-screen $2" && shift ;;    # set screen size for Xephyr
      -r|--resizeable) XEPHYRRESIZE="yes"  ;;           # make Xephyr window resizeable
      --glamor) XEPHYRGLAMOR="yes"  ;;                  # enable glamor 2D acceleration in Xephyr
      --pulseaudio) PULSEAUDIO="yes"  ;;                # enable pulseaudio connection / sound support over tcp
      --gpu) GPU="immediate" ;;                         # use immediate hardware acceleration, works only with -X11 or --hostdisplay
      --virtualgl) GPU="virtualgl" ;;                   # use hardware acceleration with VirtualGL
      -e|--exe) X11DOCKERMODE="exe" ;;                  # execute application from host instead of running docker image
      --root) ALLOWROOT="yes" ;;                        # allow x11docker to be run as root
      -u|--hostuser) ADDHOSTUSER="yes" ;;               # create user similar to host user in created container
      -o|--sudouser) ADDHOSTUSER="yes"                  # same as '--hostuser', but with root rights via sudo without password
                     ADDSUDOUSER="yes" ;;
      -m|--home) ADDUSERHOME="yes"  ;;                  # share folder ~/x11docker/IMAGENAME with container
      --starter) CREATEDESKTOPSTARTER="yes" ;;          # create desktop starter and exit
      -p|--ps) PRESERVECONTAINER="yes"  ;;              # presreve container instead of removing it with 'docker run --rm'
      --cid) SHOWCIDFILENAME="yes" ;;                   # show filename of file containing container ID
      --cache) PRESERVECACHEFILES="yes"  ;;             # don't remove cache files on exit
      -v|--verbose) VERBOSE="yes"  ;;                   # be verbose
      -l|--log) SHOWLOG="yes"  ;;                       # Show logs in an xterm window on display :0
      -L|--LOG) SHOWLOGNEWDISPLAY="yes"  ;;             # Show logs in an xterm window on new display
      --orphaned) ORPHANEDCHECK="yes"  ;;               # check for orphaned containers and files owned by root, created by docker)
      --no-xhost) NO_XHOST="yes"  ;;                    # disable any access granted by xhost
      --ipc) SHAREIPC="yes";;                           # set docker option --ipc=host
      #####some developer options, not for regular use, can change any time
      --xhost) XHOST="+"  ;;                            # set 'xhost +' on both X servers
      --xsocket) XCONNECTION="xsocket" ;;               # Use shared X socket
      --tcp) XCONNECTION="tcp";;                        # Use X over tcp
      --sharegpu) if [ -z "$GPU" ] ; then GPU="sharegpu" ; fi  ;; # share devices in /dev/dri
      --tcpxsocket) SHARENEWXSOCKET="yes" ; XCONNECTION="tcp" ;; # Use X over tcp, share X socket, too
      --privileged) PRIVILEGED="yes"  ;;                # run docker in privileged mode
      --pid) SHAREPID="yes";;                           # set docker option --pid=host
      --uts) SHAREUTS="yes";;                           # set docker option --net=host
      --net) SHARENET="yes";;                           # set docker option --net=host
      --alsa) ALSA="yes" ;;
      ##### docker options / image
      --) shift                                         # arguments to submit to docker (or host executable)
        if [ "$X11DOCKERMODE" != "exe" ] ; then X11DOCKERMODE="run" ; fi        # will run image, if not already changed to '--exe'
        while [ -n "$1" ] ; do                                                  # get all options for docker after '--'
          DOCKERARGS="$DOCKERARGS $1"
          if [ "-" != "$(echo $1 | cut -c 1)" ] ; then                          # (ignore -options)
            WINDOWTITLE="$WINDOWTITLE""_$1"                                     # create window title for Xephyr
            if [ -z "$IMAGENAME" ] ; then IMAGENAME="$1" ; fi                   # get name of image
          fi
          if [ -n "$WINDOWTITLE" ] ; then IMAGECOMMAND="$IMAGECOMMAND $1" ;fi   # get image command without 'docker run' options
          if [ -z "$IMAGENAME" ] ; then DOCKEROPTIONS="$DOCKEROPTIONS $1" ; fi  # options for 'docker run' without imagename/image args
          shift
        done
        if [ -n "$IMAGECOMMAND" ] ; then
          IMAGECOMMAND=`echo $IMAGECOMMAND | cut -s -d " " -f 2- `              # remove image name from image command
        fi
        if [ -z "$(eval echo $DOCKERARGS)" ] ; then X11DOCKERMODE="onlyX" ; fi  # if arguments are empty, then only run X server with window manager
      ;;
      *) error "error while parsing $1"                                         # should never happen(tm)
      ;;
    esac  
    shift
  done
}
configwindowmanager() { # set some window manager configs, if needed
  #
  # needs $WM_NAME to be set, will change $WINDOWMANAGER
  #
  case $WM_NAME in
    cinnamon|cinnamon-session) WINDOWMANAGER="cinnamon-session -f"
                               WM_NAME="cinnamon"
      ;;
    compiz) # set minmal config to have useable window decoration and can move windows
      if [ ! -e "$HOME/.config/compiz-1/compizconfig/Default.ini" ] ; then
        mkdir -p "$HOME/.config/compiz-1/compizconfig"
        echo "[core]
s0_active_plugins = core;composite;opengl;decor;resize;move;
" > "$HOME/.config/compiz-1/compizconfig/Default.ini"
      fi
      ;;
    enlightenment|e17|e16|e19) WINDOWMANAGER="enlightenment_start"
                               WM_NAME="enlightenment"
      ;;
    gnome|gnome-shell|gnome-session) # crashes without option '--sm-disable' on ubuntu 14.04
      WINDOWMANAGER="gnome-shell --sm-disable"
      WM_NAME="gnome-shell"
      ;;
    matchbox) WINDOWMANAGER="matchbox-window-manager"
      ;;
    mate|mate-session) WINDOWMANAGER="mate-session -f"
                       WM_NAME="mate"
      ;;
    marco) WINDOWMANAGER="marco --sm-disable"
      if [ -z "`command -v mate-session`" ] ; then
        warning "Found window manager marco. It seems that not all 
  dependencies are installed. Will try to search for another window manager"
        WINDOWMANAGER="lookfornewwindowmanager"
      fi  
      ;;
    mate-wm) WINDOWMANAGER="marco --sm-disable"
      ;;
    muffin) WINDOWMANAGER="muffin --sm-disable"
      if [ -z "`command -v cinnamon`" ] ; then
        warning "Found window manager muffin. It seems that not all 
  dependencies are installed. Will try to search for another window manager"
        WINDOWMANAGER="lookfornewwindowmanager"
      fi
      ;;
    tinywm)
      error "Window manager $WINDOWMANAGER is not working well, sorry.
  Please choose another window manager with option '-w, --wm'.
  x11docker will try to find another one on your system."
      WINDOWMANAGER="lookfornewwindowmanager"
      ;;
    openbox) # disable session management of openbox, otherwise it could shut down your main session, too
      WINDOWMANAGER="openbox --sm-disable"
      ;;
  esac
  #
  # special check: normally Xephyr runs without window manager
  if [ "$XSERVER" = "XEPHYR" ] && [ "$XEPHYRFULLSCREEN" = "no" ] ; then
    case $WM_NAME in
      gnome-shell|cinnamon)
      warning "$WM_NAME can have problems in Xephyr, except running in
  fullscreen mode (option '-f, --fullscreen'). Will try to to find another
  window manager"
      WINDOWMANAGER="lookfornewwindowmanager"
    esac
  fi
}

{ #### part: some init (parsing, checking permissions)
  trap finish EXIT

  ## parse command line options for x11docker
  #
  xdparser $X11DOCKERARGS

  ## check if docker is installed
  #
  if [ "$X11DOCKERMODE" = "run" ] ; then
    command -v "docker" >/dev/null 2>&1 || { error "could not find docker.
  You need it to run docker images. Please install docker with command:
  apt-get install docker.io" ; }
  fi

  ## check if script runs as root, if yes, show error & exit
  #
  if [ "$ALLOWROOT" = "no" ] ; then   # option '--root': if "yes", allow root to run x11docker
    if [ "0" = "$(id -u)" ] ; then
        error "x11docker should not run as root. Every child process of 
  the new X server would get root privileges, too. To run docker, you will be
  prompted for your root password only for this one command.
  On systems without a root password, like Ubuntu, choose option '-s, --sudo'
  If you want to allow root to run x11docker, use option '--root'"
    fi
  else
    if [ "0" = "$(id -u)" ] ; then GETROOT="" ; fi   # if running as root and it is allowed, then disable password prompt
  fi

  ## if user is member of group docker, then avoid password prompt
  #
  if [ -n "`id | grep docker`" ] ; then GETROOT="" ; fi

  ## if desktop starter should be created, check if xdg-user-dir is installed
  #
  if [ "$CREATEDESKTOPSTARTER" = "yes" ] ; then
    command -v "xdg-user-dir" >/dev/null 2>&1 || { error "could not find xdg-user-dir.
  x11docker needs it to create a desktop starter. Please install xdg-utils with
  command:
  apt-get install xdg-utils" ; }
  fi
  
  ## option --orphaned : check for non-removed containers and left cache files possibly owned by root and created by docker
  if [ "$ORPHANEDCHECK" = "yes" ] ; then 
    orphaned
    exit
  fi
  
  ## option '--virtualgl': check if VirtualGL is installed
  command -v "vglrun" >/dev/null 2>&1 || { warning "could not find VirtualGL.
  It has to be installed on host to use option --virtualgl. 
  You can get in here: http://www.virtualgl.org/
  Fallback: disabling option --virtualgl" 
    GPU="" ; }
  
  ## option '--pulseaudio': find a free tcp port
  if [ "$PULSEAUDIO" = "yes" ] ; then
    read LOWERPORT UPPERPORT < /proc/sys/net/ipv4/ip_local_port_range
    while : ; do
      PULSE_PORT="`shuf -i $LOWERPORT-$UPPERPORT -n 1`"
      ss -lpn | grep -q ":$PULSE_PORT " || break
    done
  fi
  
  if [ "$ADDHOSTUSER" != "yes" ] ; then
    if [ "$SHAREIPC" = "yes" ] ; then
      warning "You have choosed option --ipc without choosing
  option --hostuser. This is quite a breakdown to host security.
  To minimize risks with option --ipc, please choose option 
  --hostuser, too!"
    fi
  fi
}

{ #### check X server

  ## option '-x': Try to auto choose best matching and available X server
  #
  if [ "$AUTOCHOOSESERVER" = "yes" ] ; then
    if [ "$DESKTOPIMAGE" = "no" ] ; then
        XSERVER="XPRA"      # use xpra for single applications
    else
        XSERVER="XEPHYR"    # use Xephyr for desktop environments
    fi
    if [ -z "$DOCKERARGS" ] ; then # if no image or host executable is given, run Xephyr with window manager instead of empty xpra
      XSERVER="XEPHYR"
      if [ "$WINDOWMANAGER" = "" ] ; then WINDOWMANAGER="lookfornewwindowmanager" ; fi
    fi  
  fi

  ## check if choosed X server is installed
  #
  if [ "$XSERVER" = "XPRA" ] ; then                                 # check xpra
    command -v "xpra" >/dev/null 2>&1 || { warning "could not find executable 'xpra'. 
  Try 'apt-get install xpra' to install xpra.
  Fallback: x11docker will try to use Xephyr (option --xephyr)"
    XSERVER="XEPHYR"
    }
  fi
  if [ "$XSERVER" = "XEPHYR" ] ; then                               # check Xephyr
    command -v "Xephyr" >/dev/null 2>&1 || { warning "could not find executable 'Xephyr'. 
  Try 'apt-get install xephyr' to install Xephyr.
  Fallback: x11docker will try to use core X (option --X11)"
    XSERVER="X11"
    }
  fi
  if [ "$XSERVER" = "X11" ] ; then                                 # check X
    command -v "X" >/dev/null 2>&1 || { error "Could not find executable 'X'. 
  Try 'apt-get install xorg' to install X server."
    }
    # if x11docker is running from within an X server, check if user is allowed to run a new X server
    if [ -z "`grep "allowed_users=anybody" </etc/X11/Xwrapper.config`" ] && [ -n "$HOSTDISPLAY" ] ; then
            warning "You are not allowed to start a new X server.
  To start a new X server from within an already running X session, you need
  to run 'dpkg-reconfigure x11-common' and choose option 'anybody' once.
  Otherwise, you can switch to tty1 with <STRG><ALT><F1> and start x11docker
  there. 
  (As a default configuration of X, only root or console users can start a 
  new X server)
  Otherwise, you can use xpra or Xephyr (see options '--xpra' and '--xephyr').
  Fallback: Using host display without container isolation"
      XSERVER="HOSTDISPLAY"
    fi
  fi
  
  if [ "$XSERVER" = "HOSTDISPLAY" ] && [ "$DOCKERARGS" = "" ] ; then
    warning "No image and no host executable are given 
  while using option --hostdisplay. This will achieve nothing."
  fi

  ## check for already running X server, if $XSERVER is not "X11"
  # xpra and Xephyr need an already running X server for their output window(s)
  # (check could be better, not only for standard :0)
  #
  if [ "$XSERVER" != "X11" ] && [ -z "$HOSTDISPLAY" ] ; then
    if [ -S "/tmp/.X11-unix/X0" ] ; then
        HOSTDISPLAY=":0"
        echo "NOTE: $XSERVER will show its content on display $HOSTDISPLAY"
    else
        error "No X server found on display :0. You cannot run $XSERVER 
  without an already running X server. Exiting."
    fi
  fi
}

{ #### part: choose and check window manager
  if [ "$DESKTOPIMAGE" = "no" ] && [ "$XSERVER" != "XPRA" ] && [ "$XSERVER" != "HOSTDISPLAY" ] ; then  # check only whether a window manager is needed
    #
    ## try to find out current window manager to use it for x11docker (i.e., run a new instance of it)
    #
    if [ -n "$(command -v 'wmctrl')" ] ; then WMCTRL_IS_INSTALLED="yes" ; else WMCTRL_IS_INSTALLED="no" ; fi
    #
    if [ -z "$WINDOWMANAGER" ] && [ "$WMCTRL_IS_INSTALLED" = "yes" ] ; then      # option '-w, --wm': maybe a window manager is already set
      WINDOWMANAGER=`wmctrl -m | grep "PID" | awk '{print $2}' `                 # at first get pid
      if [ -e "/proc/$WINDOWMANAGER" ] ; then                                    # check if pid is valid
        WINDOWMANAGER=`ls -l "/proc/$WINDOWMANAGER/exe" | awk '{print $11}'`     # if yes, then get /path/executable
      else                                                                       # otherwise, try unsecure way over name
        WINDOWMANAGER=`wmctrl -m | grep "Name" | awk '{print $2}' | tr '[:upper:]' '[:lower:]'`              #| awk '{print $1}'`
      fi
    fi
    #
    if [ -n "$WINDOWMANAGER" ] ; then
      # get base name without options of window manager
      WM_NAME=$(basename $WINDOWMANAGER | awk '{print $1}')
      # check window manager, set configs, if needed
      configwindowmanager
    fi
    #
    ## if no executable window manager is found, then search for another one
    #
    if [ -z "$(command -v $WINDOWMANAGER)" ] ; then
      warning "Need a window manager, but $WINDOWMANAGER not found. 
  Will look for another one. Look at 'x11docker --help' to see a list
  of recommended window managers."
      for ARGUMENT in $WM_ALL ; do
        WINDOWMANAGER=`command -v $ARGUMENT`
        if [ -n "$WINDOWMANAGER" ] ; then break ; fi
      done
      warning "Will use window manager '$WINDOWMANAGER'"
    fi
    #
    ## again, get base name without options of window manager
    WM_NAME=$(basename $WINDOWMANAGER | awk '{print $1}')
    # again, check window manager, set configs, if needed
    configwindowmanager
    #
    ## check if window manager is executable now; if not, show error & exit
    #
    if [ -z "$(command -v $WINDOWMANAGER)" ] ; then 
      error "could not find any executable window manager. 
  Please choose a window manager with option '-w, --wm'
  Type 'x11docker --help' to get a list of recommended window managers."
    fi
    #
  else
    WINDOWMANAGER=""     # if XPRA works as window manager, or image contains its own wm/DE, or HOsRDISPLAY is used, then x11docker doesn't need one
  fi
}

{ #### part: check free display, create cache folders and rename cache files
  ## create main cache folder, if not already present
  #
  mkdir -p $CACHEFOLDER

  ## Look for next free display and change some display specific variables
  #
  case $XSERVER in                   # set initial value for searching
    X11) NEWDISPLAY="0" ;;           # low number for X displays
    XPRA) NEWDISPLAY="100" ;;        # high numbers fpr xpra displays
    XEPHYR) NEWDISPLAY="200" ;;      # higher number for Xephyr displays
    HOSTDISPLAY) NEWDISPLAY="300" ;; # dummy number to look for free cache folder, display will be :0
  esac
  #
  while [ -e "/tmp/.X11-unix/X$NEWDISPLAY" ]  || [ -e "$CACHEFOLDER/X$NEWDISPLAY" ] ; do   # search unused X socket, passing already used cache numbers
    NEWDISPLAY=$(($NEWDISPLAY + 1))
  done
  #
  CACHEFOLDER="$CACHEFOLDER/X$NEWDISPLAY"                    # set name of cache subfolder
  #
  XINITRC="$CACHEFOLDER/$XINITRC"
  XINITLOGFILE="$CACHEFOLDER/$XINITLOGFILE"
  XTERMRC="$CACHEFOLDER/$XTERMRC"
  XTERMLOGFILE="$CACHEFOLDER/$XTERMLOGFILE"
  DOCKERLOGFILE="$CACHEFOLDER/$DOCKERLOGFILE"
  DOCKERPIDFILE="$CACHEFOLDER/$DOCKERPIDFILE"
  XSERVERCOOKIE="$CACHEFOLDER/$XSERVERCOOKIE"
  XCLIENTCOOKIE="$CACHEFOLDER/$XCLIENTCOOKIE"
  XPRASERVERLOGFILE="$CACHEFOLDER/$XPRASERVERLOGFILE"
  XCOMMANDFILE="$CACHEFOLDER/$XCOMMANDFILE"
  CIDFILE="$CACHEFOLDER/$CIDFILE"
  BGPIDFILE="$CACHEFOLDER/$BGPIDFILE"
  CREATEUSERSCRIPT="$CACHEFOLDER/$CREATEUSERSCRIPT"
  SHARECLIPBOARDSCRIPT="$CACHEFOLDER/$SHARECLIPBOARDSCRIPT"
  NEWXSOCKET="/tmp/.X11-unix/X$NEWDISPLAY"
  #NEWXLOCK="/tmp/.X$NEWDISPLAY-lock"
  NEWXVT="vt$[7+$NEWDISPLAY]"                                # FIXME: assuming instead of knowing whether VT is free

  ## Get inet Adress of docker0 interface and
  #  set $TCPDISPLAY (display number for dockered applications connected to X over tcp)
  #  (not used anymore, but still possible with developer option --tcp)
  DOCKERIPRANGE=`ip -4 -o a | grep docker0 | awk '{print $4}'`
  DOCKERIP=`echo $DOCKERIPRANGE | cut -d/ -f1`
  TCPDISPLAY="$DOCKERIP:$NEWDISPLAY"
  
  NEWDISPLAY=":$NEWDISPLAY"                                  # finally: add ':' to $NEWDISPLAY
  
  case $XSERVER in
    HOSTDISPLAY)
      NEWDISPLAY=$HOSTDISPLAY
      NEWXSOCKET=$HOSTXSOCKET ;;
  esac
  
  ## create display specific cache subfolder
  #
  mkdir -p $CACHEFOLDER
}

{ #### part: create command to run docker

  case $X11DOCKERMODE in
    exe|onlyX)  COMMAND="# dontrundocker"  ;;
    run)
      CONTAINERNAME="x11docker_X$(echo $NEWDISPLAY | cut -d: -f2)_$(mcookie | cut -c -6)"
      COMMAND='docker run'
      COMMAND="$COMMAND --cidfile=$CIDFILE"                                        # write container id in file $CIDFILE
      COMMAND="$COMMAND --name=$CONTAINERNAME"                                     # give container a name that can be found by --orphaned
      COMMAND="$COMMAND -v $XCLIENTCOOKIE:/Xcookie:ro -e XAUTHORITY=/Xcookie"      # share new X authentication cookie file

      #COMMAND="$COMMAND -e LIBGL_ALWAYS_INDIRECT=1"  ### test: force indirect rendering

      ## hardware acceleration options --gpu and --virtualgl
      case $GPU in
        "immediate") ;; ## option '--gpu': immediate hardware acceleration for options --X11 and --hostdisplay
        "virtualgl")    ## option '--virtualgl': mediate hardware OpenGL acceleration with VirtualGL
            case $XSERVER in
              XPRA|XEPHYR) # share X socket from :0 so virtualgl can use it. ### SECURITY issue, breaks container isolation from display :0
                COMMAND="$COMMAND -v $HOSTXSOCKET:$HOSTXSOCKET:ro"
                COMMAND="$COMMAND -e VGL_DISPLAY=$HOSTDISPLAY"
                ;;
              X11|HOSTDISPLAY)
                SHARENEWXSOCKET="yes"
                COMMAND="$COMMAND -e VGL_DISPLAY=$NEWDISPLAY"
                ;;
            esac
            while read -r LINE ; do
              COMMAND="$COMMAND -e $LINE"                                                # share environment variables created by vglrun
            done < <(comm -1 -3 <(env | sort) <(vglrun -c 0 env | grep -v '^\[' | sort))
            COMMAND="$COMMAND -v /usr/lib/libdlfaker.so:/usr/lib/libdlfaker.so:ro -v /usr/lib/libvglfaker.so:/usr/lib/libvglfaker.so:ro" # share VirtualGL libs
            #COMMAND="$COMMAND -e VGL_VERBOSE=1"                                         # Makes VirtualGL verbose
            #COMMAND="$COMMAND -e VGL_LOGO=1"                                            # shows VGL logo in rendered images
         ;;
      esac
      ## options '--gpu', '--virtualgl': share graphic adapter device files ### SECURITY slightly degrades container isolation
      if [ -n "$GPU" ] ; then
        while read -r FILE ; do
          COMMAND="$COMMAND --device=$FILE:$FILE:rw"
        done < <(find /dev/dri/* -maxdepth 0 -type c)
      fi  
      #
      case $XCONNECTION in
        tcp)      # with developer option --tcp only
          COMMAND="$COMMAND -e DISPLAY=$TCPDISPLAY"  ;;
        xsocket)  # default
          COMMAND="$COMMAND -e DISPLAY=$NEWDISPLAY"
          SHARENEWXSOCKET="yes"  ;;
      esac
      case $SHARENEWXSOCKET in
        # share X socket from $NEWDISPLAY ### does not break isolation from display :0 if NOT /tmp/.X11-unix/X0
        "yes") COMMAND="$COMMAND -v $NEWXSOCKET:$NEWXSOCKET:ro"  ;;
      esac
      #
      case $XSERVER in
        HOSTDISPLAY)  # Enable or disable MIT-SHM and Opengl in clients as good as possible to avoid rendering glitches
          case $SHAREIPC in
            "yes") COMMAND="$COMMAND -e QT_GRAPHICSSYSTEM=opengl"  ;;  # raster, native or opengl. Setting it to opengl because plasma automatically shrinks down to "render" if gpu is missing, but does not "upgrade" to "opengl" if it is available.
            *)
              COMMAND="$COMMAND -e QT_X11_NO_MITSHM=1"          # disables usage of MIT-SHM in QT
              COMMAND="$COMMAND -e GDK_RENDERING=image"         # disables GTK OpenGL&MIT-SHM (yes, it's written GDK instead of GTK)
              # disable MIT-SHM or OpenGL usage (seems not to work)
              #COMMAND="$COMMAND -e _X11_NO_MITSHM=1"
              #COMMAND="$COMMAND -e _MITSHM=0"
            ;;
          esac
      esac
     

      ## option '-p, --ps': preserve container yes/no
      if [ "$PRESERVECONTAINER" = "no" ] ; then COMMAND="$COMMAND --rm" ; fi

      ## option '--home': share folder ~/.local/share/x11docker/IMAGENAME with created container as its home directory
      if [ "$ADDUSERHOME" = "yes" ] ; then
        # define path to shared folder and remove '/' from image name
        ADDUSERHOMEFOLDER=$HOME/.local/share/x11docker/`echo $IMAGENAME | tr / -`
        if [ ! -e "$ADDUSERHOMEFOLDER" ] ; then
          mkdir -p $ADDUSERHOMEFOLDER
          # create symbolic link in $HOME
          if [ ! -e $HOME/x11docker ] ; then ln -s $HOME/.local/share/x11docker $HOME/x11docker ; fi
        fi
        COMMAND="$COMMAND -v $ADDUSERHOMEFOLDER:/home/$BENUTZER"
      fi

      ## option '-u, --hostuser' : create container user similar to host user
      #
      if [ "$ADDHOSTUSER" = "yes" ] ; then
        #
        # CMD in image will be overwritten by createuser script. If none is defined on CLI, get CMD from image
        # ('docker inspect' needs root permissions. That's not nice. Have to ask for password)
        #
        if [ -z "$IMAGECOMMAND" ] ; then
          warning "No command for image specified. Need to look for
  CMD command of docker image. Please type in your password to run 
  $GETROOT 'docker inspect --format='{{.Config.Cmd}}' $IMAGENAME'"
          IMAGECOMMAND=`$GETROOT "docker inspect --format='{{.Config.Cmd}}' $IMAGENAME"`
          IMAGECOMMAND=$(echo $IMAGECOMMAND | tr -d [])
          IMAGECOMMAND=$(echo $IMAGECOMMAND | sed 's/\/bin\/sh -c//')
          warning "To avoid this password prompt, you can start x11docker
  next time with command:
    x11docker $X11DOCKERARGS $IMAGECOMMAND"
          X11DOCKERARGS="$X11DOCKERARGS $IMAGECOMMAND"
        fi
        #
        # create script createuser. It will also start the image with given (or extracted) command
        #
        { echo "#! /bin/bash"
          # create user
          echo "addgroup --gid `id -g $BENUTZER` $BENUTZER"
          echo "adduser --disabled-password  --uid `id -u` --gid `id -g` --gecos " '""' " --home /home/$BENUTZER $BENUTZER"
          echo "chown $BENUTZER:$BENUTZER /home/$BENUTZER"
          echo "HOME=/home/$BENUTZER"
      
          # option '--sudouser': add sudo permissions without password
          if [ "$ADDSUDOUSER" = "yes" ] ; then
            echo 'echo "%sudo ALL=(ALL) NOPASSWD:ALL"   >> /etc/sudoers'
            echo "adduser $BENUTZER sudo"
          fi
      
          # option '--virtualgl': if VirtualGL server is configured for authorisized access, one has to be member of vglusers. Maybe not needed?
          if [ "$GPU" = "virtualgl" ] ; then      
            if [ -n "$(cat /etc/group | grep vglusers:)" ] ; then
              echo "addgroup --gid $(cat /etc/group | grep vglusers: | cut -d: -f3) vglusers"
              echo "adduser $BENUTZER vglusers"
            fi
          fi
           # option '--gpu': add user to group video
          echo "adduser $BENUTZER video" # add user to group video, needed for option --gpu
          if [ "$ALSA" = "yes" ] ; then echo "adduser $BENUTZER audio" ; fi # add user to group audio, experimental
          # run image command as user:
          echo "su $BENUTZER -c '$IMAGECOMMAND'"
        } > $CREATEUSERSCRIPT
        #
        # include created script in container
        COMMAND="$COMMAND -v $CREATEUSERSCRIPT:/createuser"
        # use created script as command (CMD) to run image
        DOCKERARGS="$DOCKEROPTIONS $IMAGENAME /bin/bash /createuser"
      fi
  
      ## option '--pulseaudio': provide pulseaudio server
      if [ "$PULSEAUDIO" = "yes" ] ; then COMMAND="$COMMAND -e PULSE_SERVER=tcp:$DOCKERIP:$PULSE_PORT" ; fi
      
      ### SECURITY leak: option --ipc speeds up --gpu and avoids rendering glitches with --hostdisplay
      if [ "$SHAREIPC" = "yes" ] ; then COMMAND="$COMMAND --ipc=host" ; fi

      ### developer options ### SECURITY leaks: breaks container isolation, testing purpuoses only
      if [ "$PRIVILEGED" = "yes" ] ; then COMMAND="$COMMAND --privileged" ; fi
      if [ "$SHAREPID" = "yes" ] ; then COMMAND="$COMMAND --pid=host" ; fi
      if [ "$SHAREUTS" = "yes" ] ; then COMMAND="$COMMAND --uts=host" ; fi
      if [ "$SHARENET" = "yes" ] ; then COMMAND="$COMMAND --net=host" ; fi
  
      ### test for alsa support, not working yet
      if [ "$ALSA" = "yes" ] ; then
        while read -r FILE ; do
          COMMAND="$COMMAND --device=$FILE:$FILE:rw"
        done < <(find /dev/snd/* -maxdepth 0 -type c)
        #COMMAND="$COMMAND --lxc-conf=\"lxc.cgroup.devices.allow = c 116:* rwm\""
        COMMAND="$COMMAND -v /usr/share/alsa:/usr/share/alsa:ro"
      fi
    ;;
  esac

  # add custom docker arguments, imagename and imagecommand 
  COMMAND="$COMMAND $DOCKERARGS"

  ## option '-c, --command': only show created docker command and exit
  if [ "$ONLYSHOWCOMMAND" = "yes" ] ; then echo $COMMAND && exit 0 ; fi

  ## option '--cid': show filename of file that will contain container id
  if [ "$SHOWCIDFILENAME" = "yes" ] ; then echo $CIDFILE ; fi
}

{ #### part: create command to start X server
  XOPTIONS=""
  XOPTIONS="$XOPTIONS +extension Composite +extension RANDR +extension RENDER +extension GLX +extension XVideo +extension DOUBLE-BUFFER +iglx"
  XOPTIONS="$XOPTIONS +extension X-Resource +extension SECURITY +extension DAMAGE"
  XOPTIONS="$XOPTIONS -auth $XSERVERCOOKIE"         # cookie authentication
  XOPTIONS="$XOPTIONS -retro"                       # retro look with grey background and X mouse cursor
  case $SHAREIPC in
    "yes") XOPTIONS="$XOPTIONS +extension MIT-SHM"  ;;    # only usefull if sharing host IPC
    "no")  XOPTIONS="$XOPTIONS -extension MIT-SHM"  ;;    # explicitly disable MIT-SHM to avoid rendering glitches, often enabled in X by default
  esac
  case $XCONNECTION in
    tcp) ;;                                         # developer option --tcp
    xsocket) XOPTIONS="$XOPTIONS -nolisten tcp" ;;  # disable tcp if connection with shared X socket is used (default)
  esac
  
  case $XSERVER in
    X11) 
      XOPTIONS="$XOPTIONS +extension XFree86-DRI +extension XFree86-DGA +extension XFree86-VidModeExtension"
      XOPTIONS="$XOPTIONS -verbose"                  # make X verbose
      XOPTIONS="$XOPTIONS -extension XTEST"          # explicitly disable XTEST for security reasons
      #XOPTIONS="$XOPTIONS +extension DRI +extension DRI2 +extension DRI3 +extension SGI-GLX +extension SHAPE" # seems not to be enablebly at runtime
      XCOMMAND="$(command -v X) $NEWDISPLAY $NEWXVT $XOPTIONS"
    ;;
    XPRA) # To use xpra, Xdummy will run first.
      XOPTIONS="$XOPTIONS +extension XTEST"          # Without XTEST keyboard and mouse are not recognized
      XOPTIONS="$XOPTIONS +extension XFree86-DRI +extension XFree86-DGA +extension XFree86-VidModeExtension"
      XOPTIONS="$XOPTIONS -verbose"                  # make X verbose
      case $SHARECLIPBOARD in                        # option '-c, --clipboard'
        yes) XPRAOPTIONS="--clipboard"   ;;
        no)  XPRAOPTIONS="--no-clipboard" ;; 
      esac
      #XCOMMAND="$(command -v Xvfb) $NEWDISPLAY $XOPTIONS -screen 0 ${XAXIS}x${YAXIS}x24+32"       # command to run Xvfb for xpra (needs package xvfb)
      XCOMMAND="$(command -v Xorg) $NEWDISPLAY -config /etc/xpra/xorg.conf $XOPTIONS"             # command to run Xdummy for xpra
    ;;
    XEPHYR)
      XOPTIONS="$XOPTIONS -extension XTEST"           # explicitly disable XTEST for security reasons
      case $XEPHYRFULLSCREEN in    # option '--fullscreen'
        yes) XEPHYROPTIONS="$XEPHYROPTIONS -fullscreen" ;;
        no)  XEPHYROPTIONS="$XEPHYROPTIONS $XEPHYRSIZE" ;;
      esac
      case $XEPHYRRESIZE in        # option '--resizeable'
        yes) XEPHYROPTIONS="$XEPHYROPTIONS -resizeable" ;;
      esac
      case $XEPHYRGLAMOR in        # option '--resizeable'
        yes) XEPHYROPTIONS="$XEPHYROPTIONS -glamor" ;;
      esac
      XEPHYROPTIONS="$XEPHYROPTIONS -title ${NEWDISPLAY}${WINDOWTITLE}"  # set window title 
      XCOMMAND="$(command -v Xephyr) $NEWDISPLAY $XOPTIONS $XEPHYROPTIONS"
    ;;
    HOSTDISPLAY)
    ;;
  esac
}

{ #### part: option '-c, --clipboard' create shareclipboard.bash
  #
  # use xclip to share text clipboard content between X servers.
  # xpra has its own clipboard management including image transfer
  #
  if [ "$SHARECLIPBOARD" = "yes" ] && [ "$XSERVER" != "XPRA" ] && [ "$XSERVER" != "HOSTDISPLAY" ]; then
    if [ -z "$(command -v 'xclip')" ] ; then
      warning "Cannot share clipboard. Need package 'xclip' to be
  installed. Try installing xclip with command: 'apt-get install xclip'"
      SHARECLIPBOARD="no"
    else 
      echo '#! /bin/bash
# share clipboard between two X servers
echo "x11docker: starting clipboard service. text clips only."
while true ; do
    # read content of clipboard of first X server
    XAUTHORITY='$HOSTXAUTHORITY'
    D1CLIP=$(xclip -selection clipboard -o -display '$HOSTDISPLAY')
    # check if clipboard of first X server has changed; if yes, send new content to second X server
    if [ ! "$CLIP" = "$D1CLIP" ] ; then
        CLIP=$D1CLIP
        xclip -selection clipboard -o -display '$HOSTDISPLAY' | XAUTHORITY='$XCLIENTCOOKIE' xclip -selection clipboard -i -display '$NEWDISPLAY'
    fi
    
    # read content of clipboard of second X server
    XAUTHORITY='$XCLIENTCOOKIE'
    D2CLIP=$(xclip -selection clipboard -o -display '$NEWDISPLAY')
    # check if clipboard of second X server has changed; if yes, send new content to first X server
    if [ ! "$CLIP" = "$D2CLIP" ] ; then
        CLIP=$D2CLIP
        xclip -selection clipboard -o -display '$NEWDISPLAY' | XAUTHORITY='$HOSTXAUTHORITY' xclip -selection clipboard -i -display '$HOSTDISPLAY'
    fi
    
    # avoid empty string error
    if [ -z "$CLIP" ] ; then
      CLIP=" ";
    fi
    # sleep a bit to avoid high cpu usage
    sleep 0.3
done
' > $SHARECLIPBOARDSCRIPT
    fi
  fi
}

{ #### part: create xinitrc
  echo "#! /bin/bash"
  echo "set -x  # make bash verbose"
  #
  # subroutine to store PIDs and process names in file $BGPIDFILE 
  echo "BGPIDFILE=$BGPIDFILE"
  declare -f storepid
  #
  echo "# set X variables to host display"
  echo "export DISPLAY=$HOSTDISPLAY"
  echo "export XAUTHORITY=$HOSTXAUTHORITY"
  #
  # xhost settings on display :0
  declare -f no_xhost # echoes no_xhost(), including it this way in xinitrc
  if [ "$NO_XHOST" = "yes" ] ; then  
    echo "## option --no-xhost: disable any access to host display granted by xhost"
    echo "no_xhost"
  fi  
  if [ -n "$XHOST" ] ; then 
    echo "### developer option --xhost ### SECURITY issue, testing purpuoses only. Any client can access $HOSTDISPLAY"
    echo "xhost $XHOST"
  fi  
  #
  ## Needed for VirtualGL image compression. xpra crashes with compression, disabled
  #if [ "$GPU" = "virtualgl" ] && [ "$XSERVER" != "X11" ] ; then
  #  echo "vglclient &"
  #  echo 'storepid $! vglclient'
  #  echo 'XINITJOBSTOKILL="$XINITJOBSTOKILL $!"'
  #fi
  #
  if [ "$PULSEAUDIO" = "yes" ] ; then
    echo "# option '--pulseaudio': enable pulseaudio sound over tcp"
    echo "# load pulseaudio tcp module, authenticated to docker ip on specified port"
    echo 'PULSE_MODULE_ID=$(pactl load-module module-native-protocol-tcp port='$PULSE_PORT' auth-ip-acl='$DOCKERIPRANGE')'
  fi
  #
  echo "# create empty Xcookie file"
  echo ':> '$XCLIENTCOOKIE
  #
  # cases to give docker access to display :0
  if [ "$XSERVER" = "HOSTDISPLAY" ] || [ -n "$GPU" ] && [ "$XSERVER" != "X11" ] ; then :      ## option '--virtualgl' or --hostdisplay
    echo "# extracting access to X on display :0, degrading container isolation"
    echo "xauth nlist $HOSTDISPLAY | sed -e 's/^..../ffff/' | xauth -f $XCLIENTCOOKIE nmerge -"        # extract access to display:0 from ~/.Xauthority ### SECURITY risk
  fi 
  # 
  echo "# set X variables to new display"
  echo "export DISPLAY=$NEWDISPLAY"
  echo "export XAUTHORITY=$XCLIENTCOOKIE"
  #
  case $XSERVER in
    X11|XPRA|XEPHYR)
      echo "# set background color of root window. #7F7F7F is color of xfwm4 background"
      echo 'xsetroot -solid "#7F7F7F"'
      #
      echo "# create new XAUTHORITY cookies"
      echo "xauth generate $NEWDISPLAY . untrusted"
      if [ "$XCONNECTION" = "tcp" ] ; then 
        echo "xauth generate $TCPDISPLAY . untrusted"
      fi
      #echo "xauth generate $NEWDISPLAY . trusted"    # trusted: Gives X clients more access to X resources, considered to be less secure
      #echo "xauth generate $TCPDISPLAY . trusted"
      #echo 'COOKIE=$(mcookie)'
      #echo "xauth add $NEWDISPLAY . "'$COOKIE'       # not sure about trusted/untrusted using this way
      #echo "xauth add $TCPDISPLAY . "'$COOKIE'
      echo "cp $XCLIENTCOOKIE $XSERVERCOOKIE"
      if [ "$SHARENEWXSOCKET" = "yes" ] ; then
        echo "# create prepared cookie with localhost identification disabled by ffff, needed if X socket is shared. ffff means 'familiy wild'"
        echo 'COOKIE=$(xauth nlist '$NEWDISPLAY" | sed -e 's/^..../ffff/' )"   
        echo 'echo $COOKIE'"| xauth -f $XCLIENTCOOKIE nmerge -"
      fi
      echo "xauth list"
      ;;
    HOSTDISPLAY)
      ;;
  esac
  #
  if [ "$SHOWLOGNEWDISPLAY" = "yes" ] ; then
    echo "# option '--LOG': show logfiles in a window on new display"
    echo 'xterm -title "x11docker xinit log '$IMAGENAME $IMAGECOMMAND'" -e "tail --retry -n +1 -F '$XINITLOGFILE $XTERMLOGFILE $DOCKERLOGFILE $XPRALOGFILE' 2> /dev/null" & '
    echo 'storepid $! xterm'
  fi
  #
  if [ "$SHARECLIPBOARD" = "yes" ] && [ ! "$XSERVER" = "XPRA" ] && [ ! "$XSERVER" = "HOSTDISPLAY" ] ; then
    echo "# option '-c, --clipboard': Run clipboard script for X11/Xephyr "
    echo "# (text copy only) (xpra has its own clipboard managment including images)"
    echo "bash $SHARECLIPBOARDSCRIPT &"
    echo 'storepid $! bash'
  fi
  #
  if [ "$GPU" = "virtualgl" ] ; then 
    echo "# Make VirtualGL working in new Display for host applications. rarely needed, but possible. disabled for xpra because of connection problems"
    case $XSERVER in
      XEPHYR|HOSTDISPLAY)
        echo "export VGL_DISPLAY=$HOSTDISPLAY"  ;;
      X11)
        echo "export VGL_DISPLAY=$NEWDISPLAY"  ;;
    esac
    case $XSERVER in
      XEPHYR|X11|HOSTDISPLAY)
        echo "# share environment variables created by vglrun"
        while read -r LINE ; do
          echo "export $LINE"                                                      
        done < <(comm -1 -3 <(env | sort) <(vglrun -c 0 env | grep -v '^\[' | sort))
        #echo "export VGL_VERBOSE=1                                         # Makes VirtualGL verbose"
        #echo "export VGL_LOGO=1                                            # shows VGL logo in rendered images"
      ;;
      XPRA);; # not enabled for host applications in xpra, problems for unknown reasons. Use 'vglrun yourapp' instead.
    esac
    # 
    ## Needed for VirtualGL image compression. xpra crashes with compression, disabled
    #if [ "$GPU" = "virtualgl" ] && [ "$XSERVER" = "X11" ] ; then
    #  echo "vglclient -detach"
    #  echo 'storepid $! vglclient'
    #  echo 'XINITJOBSTOKILL="$XINITJOBSTOKILL $!"'
    #fi
  fi
  #
  if [ -n "$WINDOWMANAGER" ] ; then
    echo "# start window manager, if defined"
    echo "$WINDOWMANAGER &"
    echo 'WINDOWMANAGERPID=$!'
    echo 'storepid $! '$WM_NAME
    # (adding pid to $XINITJOBSTOKILL later)
  fi
  #
  case $XSERVER in
    XPRA) 
      echo "## start xpra server on display $NEWDISPLAY created by Xdummy"
      echo "xpra start $NEWDISPLAY --use-display --no-pulseaudio --no-daemon $XPRAOPTIONS > $XPRASERVERLOGFILE 2>&1 &"
      echo 'XINITJOBSTOKILL="$XINITJOBSTOKILL $!"'
      echo 'storepid $! xpra'
      echo 'XPRAPID=$!'
      echo "# wait for xpra server to be ready"
      echo 'ZEIT=`date +%s`'
      echo 'while [ -z "$(cat '$XPRASERVERLOGFILE' | grep '"'xpra is ready'"')" ] ; do'
      echo '    echo "waiting for xpra server to be ready..." && sleep 0.3 '
      echo '    COUNT=$(echo "`date +%s` - $ZEIT" | bc)'
      echo '    if [ 10 -lt $COUNT ] ; then'
      echo '        echo "x11docker: Timeout error: xpra server not ready after 10 seconds. Exiting."'
      echo '        exit 1'
      echo '    fi'
      echo 'done'
      echo "# check for X error"
      echo 'if [ -n "$(cat '$XPRASERVERLOGFILE" | grep 'X Window System error')"'" ] ; then'
      echo '    echo "x11docker: Error: received an X Window System error. See '$XPRASERVERLOGFILE' for details. Exiting"'
      echo '    exit 1'
      echo 'fi'
      echo "## run xpra viewer"
      echo "# set X variables to host display"
      echo "export DISPLAY=$HOSTDISPLAY"
      echo "export XAUTHORITY=$HOSTXAUTHORITY"
      echo "# start xpra viewer on host display"
      echo "xpra attach $NEWDISPLAY &"
      echo 'XINITJOBSTOKILL="$XINITJOBSTOKILL $!"'
      echo 'storepid $! xpra'
      echo "# set X variables back to new display"
      echo "export DISPLAY=$NEWDISPLAY"
      echo "export XAUTHORITY=$XCLIENTCOOKIE"
    ;;
    XEPHYR)
      echo "# set keyboard layout in Xephyr to same as on host"
      echo "echo '$(setxkbmap -display $HOSTDISPLAY -print)' | xkbcomp - $NEWDISPLAY"  
    ;;
  esac
  #
  case $XSERVER in
    X11|XPRA|XEPHYR)
      echo "# disable any possible access to new X server granted by xhost"
      echo "no_xhost"
      if [ -n "$XHOST" ] ; then 
        echo "### developer option --xhost: any client can access $NEWDISPLAY, security leak"
        echo "xhost $XHOST"
      fi
    ;;
    HOSTDISPLAY) ;;
  esac
  #
  # choose apps to run and wait for them to exit
  case $X11DOCKERMODE in
    run) 
      echo "# password for docker will be prompted in xterm"
      echo "xterm -l -lf $XTERMLOGFILE -title x11docker -e '/bin/bash $XTERMRC'"
      echo "if [ -e $DOCKERPIDFILE ] ; then"
      echo '    DOCKERPID=`cat '$DOCKERPIDFILE'`'
      echo '    storepid $DOCKERPID docker'
      echo '    # wait for docker until it terminates. bash builtin wait does not work in this case'
      echo '    set +x # disable bash verbosity in loop'
      echo '    while [ -n "$(pgrep docker | grep $DOCKERPID)" ] ; do'
      echo '        sleep 1'
      #case $XSERVER in
      #  XPRA) # xpra client can disconnect for unknown reasons, especially with google earth in wine.
      #        # This may be catched here in future. Since I want to fix this, it doesn't happen to me anymore ...
      #  ;;
      #esac
      echo '    done'
      echo '    set -x # enable bash verbosity'
      echo 'fi'
    ;;
    exe) 
      echo "# run host application (window manager is already running)"
      echo "$DOCKERARGS &"
      echo 'storepid $! '`echo $DOCKERARGS | awk '{print $1}'`
      echo 'wait $!'
    ;;
    onlyX) 
      echo "# wait for window manager to exit"
      if [ "$(echo $WM_RECOMMENDED_NODESKTOP_LIGHT $WM_RECOMMENDED_NODESKTOP_HEAVY | grep $WM_NAME)" != "" ] && [ "$SERVER" = "X11" ] ; then 
        echo "# Show warning, if window manager has no logout opion"
        echo 'xterm -title "x11docker note" -e "echo'   " 'You can switch between your X Servers using <STRG><ALT><F7>...<F12>. 
As your chosen window manager $WM_NAME seems to have no logout option, 
you have no other way to leave this session. Maybe you want to choose
another window manager with option --wm next time. 
Recommended window managers with logout option are:
$WM_RECOMMENDED_DESKTOP_LIGHT $WM_RECOMMENDED_DESKTOP_HEAVY' ; read" '"'
      fi
      echo 'wait $WINDOWMANAGERPID'
      echo '$WINDOWMANAGERPID=""'
    ;;
  esac
  #
  echo "# clean up background jobs"
  echo "# ($WINDOWMANAGERPID can already be empty, see case onlyX above. maybe window manager wasn't running at all)"
  echo 'XINITJOBSTOKILL="$XINITJOBSTOKILL $WINDOWMANAGERPID"'
  echo 'for ARGUMENT in $XINITJOBSTOKILL ; do kill $ARGUMENT ; done'

  # option '--pulseaudio'. remove custom tcp module
  #if [ "$PULSEAUDIO" = "yes" ] ; then 
  #  echo 'pactl unload-module $PULSE_MODULE_ID'                  ### disabled because host pulseaudio daemon stops after this for unknown reasons
  #fi 
  
  echo "# set X variables back to host display"
  echo "export DISPLAY=$HOSTDISPLAY"
  echo "export XAUTHORITY=$HOSTXAUTHORITY"
  if [ -n "$XHOST" ] ; then 
    echo "# developer option --xhost: reenabling xhost control on exit"
    echo "xhost -"
  fi 
} > $XINITRC

{ #### part: create xtermrc (used by xinitrc to get password and run docker)
  if [ "$X11DOCKERMODE" = "run" ] ; then
    { echo "#! /bin/bash"
    if [ "$WINDOWMANAGER" = "" ] && [ "$XSERVER" != "XPRA" ] ; then
      echo "echo 'Please move mouse cursor into terminal area to get keyboard focus.'"
    fi
    echo "echo 'x11docker will start docker on display $NEWDISPLAY with command:'"
    echo "echo $GETROOT '$COMMAND'"
    echo "echo 'Please type in your password:'"
    echo "$GETROOT 'nohup $COMMAND > $DOCKERLOGFILE 2>&1 & echo "'$!'" > $DOCKERPIDFILE'"
    echo "sleep 2" # time to read possible error message
    } > $XTERMRC
  fi   
}

{ #### part:  options '-v, --verbose', '-V, --VERBOSE': be [very] verbose
  if [ "$VERBOSE" = "yes" ] ; then
    verbose "Found free display $NEWDISPLAY"
    verbose "As X server will be used: $XSERVER"
    verbose "IP of docker interface is $DOCKERIPRANGE"
    case $XCONNECTION in
      tcp) verbose "As display for the container $TCPDISPLAY will be used." ;;
      xsocket) verbose "As display for the container $NEWDISPLAY will be used" ;; 
    esac
    if [ "$ADDUSERHOME" = "yes" ] ; then verbose "Sharing folder $ADDUSERHOMEFOLDER with container as its home directory /home/$BENUTZER" ; fi
    verbose "Created docker command:
$COMMAND"
    verbose "Created X server command:
$XCOMMAND" 
    #
    # some infos about window manager
    #
    if [ "$WMCTRLINSTALLED" = "no" ] ; then
      warning "To autodetect your current window manager, x11docker
  needs package 'wmctrl' to be installed. Please consider to install 'wmctrl'
  with command: 'apt-get install wmctrl'"
    fi
    #
    case $XSERVER in
      XPRA) verbose "Using xpra as window manager" ;;
      HOSTDISPLAY) verbose "Using host window manager" ;;
      *) verbose "Found window manager: '$WINDOWMANAGER'" ;;
    esac
    case $WM_NAME in
      cinnamon) warning "Found cinnamon as window manager. Please don't use shutdown
  option of cinnamon, because it would shut down your main session, too." ;;
      compiz) verbose "compiz is a good choice for using as windowmanager in x11docker.
  If not already present, x11docker creates a minimal basic configuration for
  compiz. Run x11docker with command 'x11docker --wm compiz --exe ccsm' to be
  able to enable more features of compiz. If not already done, install ccsm
  with 'apt-get install compizconfig-settings-manager'
  Consider to use a more lightweight window manager with option '-w, --wm'" ;;
      kwin|enlightenment) verbose "As window manager $WINDOWMANAGER was found.
  This window manager works fine in x11docker, but is a bit heavy in memory
  and cpu usage. You could choose a smaller one with option '-w, --wm". ;;
      gnome-shell) warning "gnome-shell is possible, but not recommended for use in x11docker.
  Especially, it can crash if used within Xephyr.
  Consider to use another window manager with option '-w, --wm'.
  In your case, 'mutter' would be a good choice. You can install 'mutter'
  with 'apt-get install mutter'." ;;
      icewm) warning "IceWM is a good window manager. For use in x11docker, it has one
  drawback: You should not use the logout option of IceWM, because it will try to
  shut down your main session, too.
  Consider to use another window manager with option '-w, --wm'" ;;
      lxsession) verbose "lxsession is a good choice to have a comfortable window management
  and a usefull desktop environment in x11docker. Please don't use shutdown
  option of lxsession, because it would shut down your main session, too." ;;
    esac
    #
    verbose "Created xinitrc: $(cat $XINITRC)"
    verbose "Created xtermrc: $(cat $XTERMRC)"
    #
    # Logfiles
    #
    verbose "Logfiles are:
$XINITLOGFILE
$XPRASERVERLOGFILE
$XTERMLOGFILE
$DOCKERLOGFILE"
    verbose "Running X server $XSERVER on display $NEWDISPLAY now ..."
    # Show logfiles, tail -F follows them
    tail --retry -n +1 -F $XTERMLOGFILE $DOCKERLOGFILE $XPRALOGFILE $XINITLOGFILE   2> /dev/null &
    PIDSTOKILL="$PIDSTOKILL $!"
    storepid $! tail
  fi
}

{ #### part: option '--starter': create desktop starter & exit
  if [ "$CREATEDESKTOPSTARTER" = "yes" ] ; then
    X11DOCKERARGS=$(echo $X11DOCKERARGS | sed 's/--starter/ /')
    NAME="$(echo $IMAGENAME | tr / -) $(echo $IMAGECOMMAND | tr -cd '[:alpha:][:digit:][:blank:]-_.') x11docker"
    read -re -p "Please choose a name for your desktop starter: " -i "$NAME" NAME
    { echo "#!/usr/bin/xdg-open
[Desktop Entry]
Type=Application
Name=$NAME
Exec=$0 $X11DOCKERARGS
Icon=system-run
Comment=
Categories=System
Keywords=docker x11docker $(echo $NAME | tr -c '[:alpha:][:digit:][:blank:]' ' ' )"
    case $(command -v x11docker) in 
      "")echo "TryExec=$0 $X11DOCKERARGS" ;;
      *) echo "TryExec=x11docker $X11DOCKERARGS" ;;
    esac
    } > "`xdg-user-dir DESKTOP`/$NAME.desktop"
    verbose "Created desktop icon `xdg-user-dir DESKTOP`/$NAME.desktop"
    exit 0
  fi
}

{ #### Finally: run new X server
  # option '-l, --log': show logs in an xterm window on display :0
  if [ "$SHOWLOG" = "yes" ] ; then xterm -title "x11docker xinit log $IMAGENAME $IMAGECOMMAND" -e "tail --retry -n +1 -F $XTERMLOGFILE $DOCKERLOGFILE $XPRALOGFILE $XINITLOGFILE 2> /dev/null" ; fi &
  
  case $XSERVER in
    X11|XPRA|XEPHYR) xinit $XINITRC -- $XCOMMAND  > $XINITLOGFILE 2>&1  ;;
    HOSTDISPLAY)     bash  $XINITRC               > $XINITLOGFILE 2>&1  ;;
  esac
  exit 0         # trap EXIT will start finish()
}
