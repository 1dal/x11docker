#!/bin/bash

# x11docker0.7
# Run X applications and desktop environments in docker on a separate X11 server
#
# 28.09.2015: V0.7  fixed problems with X graphix buffers - now using tcp instead of sharing X socket
# 26.09.2015: V0.6  published on github

set -e           # stop script on occuring errors

usage() {
    cat << EOF

x11docker: Create a new X server and run GUI applications
         and / or desktop environments in docker.
         Useful to avoid security issues concerning X forwarding.

To start x11docker from console, switch to tty1 with <CTRL><ALT><F1>.
To start x11docker from within X11, first run 'dpkg-reconfigure x11-common'
and choose option 'anybody'.

Usage:
To run a docker image:
   x11docker [OPTIONS] run [DOCKER_RUN_OPTIONS] IMAGE [COMMAND [ARG1 ARG2 ...]]
To start a docker container:
   x11docker [OPTIONS] start [DOCKER_START_OPTIONS] CONTAINER [CONTAINER2 ...]
x11docker without any option will only create a new X server and run twm.

Change between displays/X servers pressing <CTRL><ALT><F7>, <CTRL><ALT><F8>, ...
To shut down new X server, choose 'exit' in the window manager.

Options:
 -h, --help            display this message and exit
 -w, --wm COMMAND      window manager to use (default: 'twm'. recommended: 'flwm')
 -d, --desktop         don't run twm or another wm on new X server;
                       image contains its own desktop and/or window manager
 -s, --sudo            use 'sudo' to run 'su -c docker ...'
 run                   run image in docker. All arguments after 'run' are 
                       submitted to docker. See 'docker run --help' for options.
 start                 start container in docker. all arguments after 'start' 
                       are submitted to docker. See 'docker start --help' for 
                       options. (Hint: use '-ai' as DOCKER_START_OPTIONS).
                       Issue: you have to set option '-x, --xsocket' to the 
                       X socket the image was running the first time.
Advanced options:
 -c, --command         show created docker command on stdout and exit
 -l, --show-log        shows output of docker on stdout after exit of docker
                       (stored in a logfile in ~/.cache/x11docker/x11docker.log.Xn)
 -i, --init COMMAND    set custom command for xinitrc of new X server
                       default: 'xsetroot -solid darkgrey' (to set bg color)
 -x, --x-socket NUMBER Use X socket NUMBER instead of searching for a free one
                       (checks if there is already a running X server; 
                        trys to create a new one if not)
 -r, --root            allow root to run x11docker. Default: No
                       (A new X server should not be run as root)

Window manager: Default is twm as it is normally shipped with every X installation.
         twm is not comfortable, so you can choose another window manager with 
         option '-w, --wm'. It should be a desktop indepentent window manager to 
         be able to terminate the new X session with exit or logout option.
         For example: flwm, fluxbox, blackbox, amiwm, jwm, pekwm, sapphire, wmaker.
         Recommended: flwm, fluxbox, blackbox 
         

EOF
}


DOCKERMODE=""                                   # can be either "", "run" or "start", depends on options
DOCKERARGS=""                                   # arguments to submit to docker
X11DOCKERARGS=""                                # arguments for x11docker without arguments for docker

CACHEFOLDER=$HOME/.cache/x11docker              # define cache to store temporary files
XSERVERAUTHFILE=`mktemp --tmpdir serverauth.XXXXXXXXXX`        # file to store authentication cookie for new X server
XCLIENTAUTHFILE=`mktemp --tmpdir clientauth.XXXXXXXXXX`        # file to store authentication cookie for docker image
XINITRC=$CACHEFOLDER/xinitrc                    # file to store xinitrc                    (will get an appendix later)
XTERMINIT=$CACHEFOLDER/xterminit                # file to store commands to run docker in xterm (will get an appendix later)
DOCKERLOG=$CACHEFOLDER/docker.log               # file to log output of docker in xterm    (will get an appendix later)

NEWDISPLAY=""                                   # new display for new X server (if not changed with option '-x, --x-socket')
NEWXSOCKET=""                                   # new x socket for new X server (if not changed with option '-x, --x-socket')
NEWXLOCK=""                                     # .Xn-lock - exists for running X server with socket n

#TWMRC=$CACHEFOLDER/twmrc                        # x11docker will create a small twmrc to make twm more comfortable
WINDOWMANAGER="twm"                             # option '-w, --wm': window manager to use. set default here
CUSTOMXSOCKET=""                                # option '-x, --x-socket': use custom X socket instead of searching for a free one
CUSTOMXINITCOMMAND="xsetroot -solid darkgrey"   # option '-i, --init': custom command for Xinitrc
ONLYSHOWCOMMAND=""                              # option '-c, --command': if not empty, only show docker command and exit
GETROOT=""                                      # option '-s, --sudo': command to get root privileges for 'su -c ...'
SHOWLOG=""                                      # option '-l, --log': if 'yes', output of docker will be shown after exit of X server 
ALLOWROOT=""                                    # option '-r,--root': allow root to run x11docker                            
X11DOCKERRC=$HOME/.config/x11docker/x11dockerrc # config file to preset options
XDRCARGS=""                                     # variable to store content of X11DOCKERRC


error() {
    # show error messages on stderr and exit
    #
    echo "x11docker ERROR: $*" >&2
    echo "Type 'x11docker --help' for usage information" >&2
    exit 1
}


xdparser() {
    # parse args for x11docker (not those for docker)
    #
    SHORT="hw:dcx:asli:m:r"
    LONG="help,wm:,desktop,x-socket:,xsocket:,command,auth,sudo,show-log,init:,monitor:,showlog,root"
    PARSED=`getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"`
    eval set -- "$PARSED"
    if [[ $? != 0 ]]; then error $? ; fi
   
    while true; do
        case $1 in
            -h|--help) usage && exit 0                # help
            ;;
            -w|--wm) WINDOWMANAGER=$2 && shift        # custom window manager
            ;;
            -d|--desktop) WINDOWMANAGER=""            # desktop environment or window manager in image; don't run own window manager
            ;;
            -c|--command) ONLYSHOWCOMMAND="yes"       # only show created docker command and exit
            ;;
            -x|--x-socket|--xsocket) CUSTOMXSOCKET=$2 && shift   # custom display number to use
            ;;
            -s|--sudo) GETROOT="sudo"                 # use sudo to run 'su -c docker ...'
            ;;
            -l|--show-log|--showlog) SHOWLOG="yes"    # show output of docker after at exit
            ;;
            -i|--init) CUSTOMXINITCOMMAND=$2 && shift # custom command to execute in xinitrc
            ;;
            -m|--monitor) CUSTOMSCREEN=$2 && shift    # custom screen to use
            ;;
            -r|--root) ALLOWROOT="yes"                # allow x11docker to be run as root
            ;;
            --) break
            ;;
            *) error "error while parsing $1 : $@"
            ;;
        esac  
        shift
    done
}


# create cache folder, if not present
#
mkdir -p $CACHEFOLDER


# split arguments at 'run' or 'start' in those for x11docker and those for docker
#
for argument in $*
    do
        if [ -z "$DOCKERMODE" ] ; then
            if [ "$argument" = "run" ] ; then DOCKERMODE="run" ; fi
            if [ "$argument" = "start" ] ; then DOCKERMODE="start" ; fi
            if [ -z "$DOCKERMODE" ] ; then X11DOCKERARGS="$X11DOCKERARGS $argument" ; fi
        else
            DOCKERARGS="$DOCKERARGS $argument"
        fi
    done


# parse x11dockerrc, if exists
#
if [ -e "$X11DOCKERRC" ] ; then xdparser $(head -1 $X11DOCKERRC) ;fi


# parse command line options
#
xdparser $X11DOCKERARGS


# check if script is run as root, if yes, show error & exit
#
if [ -z "$ALLOWROOT" ] ; then                                              # option '-r,--root': allow x11docker to be run as root
    if [ "0" = "$(id -u)" ] ; then
        error "x11docker should not be run as root. Every child process of 
  the new X server would get root privileges, too. To run docker, you will be
  prompted for your root password only for this one command.
  On systems without a root password, like Ubuntu, choose option '--sudo'
  If you want to allow root to run x11docker, use option '-r, --root'"
    fi
fi


# check if window manager is executable; if not, show error & exit
#
if [ -n "$WINDOWMANAGER" ] ;then
    command -v $WINDOWMANAGER >/dev/null 2>&1 || { error "could not find executable window manager '$WINDOWMANAGER'. 
  You can either install package 'twm' with 'apt-get install twm'
  or you can choose another window manager with option '-w, --wm'
  Type 'x11docker --help' to get a list of recommended window managers."; }
fi


# create twmrc to get a "close Window" button
#echo 'RightTitleButton "/usr/share/icons/hicolor/16x16/actions/kruler-east.png" = f.delete' > $TWMRC
#echo 'Button1 = m : window|icon : f.function "f.delete"' > $TWMRC    # doesn't work


# Get inet Adress of docker0 interface
#
INTERFACE=$(ip -4 addr show docker0 | grep inet | cut -d/ -f1 | cut -d" " -f6)


# Look for next free display and set X variables
#
NEWDISPLAY="0"
while [ -e "/tmp/.X11-unix/X$NEWDISPLAY" ]; do                       # search unused X socket
    NEWDISPLAY=$(($NEWDISPLAY + 1))
done
if [ -n "$CUSTOMXSOCKET" ] ; then NEWDISPLAY=$CUSTOMXSOCKET ; fi     # option '-x, --x-socket': set custom X socket to use
NEWXSOCKET="/tmp/.X11-unix/X$NEWDISPLAY"
NEWXLOCK="/tmp/.X$NEWDISPLAY-lock"
XSERVERAUTHFILE="$XSERVERAUTHFILE.X$NEWDISPLAY"
XINITRC="$XINITRC.X$NEWDISPLAY"
DOCKERLOG="$DOCKERLOG.X$NEWDISPLAY"
XTERMINIT="$XTERMINIT.X$NEWDISPLAY"


##########################
## not ready yet - forking from startx
##
# set up Xauth info for new X server 
#
# check for GNU hostname
    if hostname --version > /dev/null 2>&1; then
        if [ -z "`hostname --version 2>&1 | grep GNU`" ]; then
            HOSTNAME=`hostname -f`
        fi
    fi
if [ -z "$hostname" ]; then
   HOSTNAME=`hostname`
fi

MCOOKIE=`/usr/bin/mcookie`
#if test x"$COOOKIE" = x; then error "Could not run authentication cookie. Is package 'util-linux' installed?"

    dummy=0

    # create a file with auth information for the server. ':0' is a dummy.
#    xserverauthfile=`mktemp --tmpdir serverauth.XXXXXXXXXX`
    trap "rm -f '$XSERVERAUTHFILE'" HUP INT QUIT ILL TRAP KILL BUS TERM
    xauth -f "$XSERVERAUTHFILE" add :$dummy . $MCOOKIE


echo created $XSERVERAUTHFILE dsadsds

    # now add the same credentials to the client authority file
    # if '$displayname' already exists do not overwrite it as another
    # server may need it. Add them to the '$xserverauthfile' instead.
    for DISPLAYNAME in ":$NEWDISPLAY" $HOSTNAME":$NEWDISPLAY"; do
        AUTHCOOKIE=`xauth list "$DISPLAYNAME"    |    sed -n "s/.*$DISPLAYNAME[[:space:]*].*[[:space:]*]//p"` 2>/dev/null;
        if [ "z${AUTHCOOKIE}" = "z" ] ; then
            xauth -f $XCLIENTAUTHFILE add $DISPLAYNAME . $MCOOKIE
        removelist="$DISPLAYNAME $removelist"
        else
            dummy=$(($dummy+1));
            xauth -q -f "$XSERVERAUTHFILE" << EOF
add :$dummy . $AUTHCOOKIE
EOF
        fi
    done
## /not ready
############






# Create command to run docker
#
if [ "$DOCKERMODE" = "run" ] ; then
        COMMAND="docker run"
        COMMAND="$COMMAND -e DISPLAY=$INTERFACE:$NEWDISPLAY "           # define display
 #       COMMAND="$COMMAND -v $XCLIENTAUTHFILE:/.Xauthority -e XAUTHORITY=/.Xauthority"
elif [ "$DOCKERMODE" = "start" ] ; then
    COMMAND="docker start"
else
    COMMAND="# dontrundocker"
fi
COMMAND="$COMMAND $DOCKERARGS"                                            # add custom docker commands
COMMAND="$GETROOT su -c '$COMMAND'"                                       # add commands to get root privileges
COMMAND="$COMMAND |& tee $DOCKERLOG"                                      # log xterm output of docker in $DOCKERLOG


# option '-c, --command': show created command and exit
#
if [ -n "$ONLYSHOWCOMMAND" ] ; then
    echo $COMMAND
    exit 0
fi


# create x11dockerrc
#
echo "#! /bin/bash"                                                         > $XTERMINIT
if [ -z "$WINDOWMANAGER" ] ; then
    echo "echo 'x11docker: Please move mouse cursor in terminal area to get keyboard focus'"  >> $XTERMINIT
fi
echo "echo x11docker: Output of docker and its childs in this terminal will be logged in $DOCKERLOG" >> $XTERMINIT
echo "echo x11docker: Running docker on display $NEWDISPLAY with command"   >> $XTERMINIT
echo "echo $COMMAND"                                                        >> $XTERMINIT
echo $COMMAND                                                               >> $XTERMINIT


# Create new xinitrc
#
echo "#! /bin/bash"                                                    > $XINITRC
echo "$CUSTOMXINITCOMMAND"                                             >> $XINITRC
echo "xhost +"  >> $XINITRC
if [ -n "$DOCKERMODE" ] ; then                                         # if docker should be started, then ...
    if [ -n  "$WINDOWMANAGER" ] ; then                                 #  ... either start it inside of xterm in window manager 
        echo 'xterm -title x11docker -hold -e '/bin/bash $XTERMINIT' &'  >> $XINITRC
        echo "exec $WINDOWMANAGER"                                     >> $XINITRC
    else                                                               #  ... or it has to run its own window manager/desktop environment
        echo 'exec xterm -title x11docker -e '/bin/bash $XTERMINIT' '  >> $XINITRC
   fi
else                                                                   # otherwise, only run window manager on new X server
    echo "exec $WINDOWMANAGER"                                         >> $XINITRC
fi


# Finally: run docker
#
echo "x11docker: starting docker on display $NEWDISPLAY with command:"
echo "$COMMAND"
#if [ -e "$NEWXSOCKET" ] ; then          # if X socket already exists, then don't create new X server (due to option '-x, --x-socket')
if [ -e "$NEWXLOCK" ] ; then            # if X socket is already locked, then don't create new X server (due to option '-x, --x-socket')
    /bin/bash $XINITRC
else                                    # create new X server on $NEWDISPLAY with xinit and run docker within $XINITRC
    xinit $XINITRC -- /usr/bin/X :$NEWDISPLAY -listen tcp # -auth $XSERVERAUTHFILE
fi


# option -l, --show-log
#
if [ -n "$SHOWLOG" ] ; then 
    echo "x11docker: logged output of docker:"
    cat $DOCKERLOG
fi


exit 0
