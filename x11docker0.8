#!/bin/bash

# x11docker0.7
# Run X applications and desktop environments in docker on a separate X11 server
#
# 28.09.2015: V0.7  fixed problems with X graphix buffers - now using tcp instead of sharing X socket
# 26.09.2015: V0.6  published on github

#set -e           # stop script on occuring errors

usage() {
    cat << EOF

x11docker: Create a new X server and run GUI applications
         and / or desktop environments in docker.
         Useful to avoid security issues concerning X forwarding.

To start x11docker from console, switch to tty1 with <CTRL><ALT><F1>.
To start x11docker from within X11, first run 'dpkg-reconfigure x11-common'
and choose option 'anybody'.

Usage:
To run a docker image:
   x11docker [OPTIONS] run [DOCKER_RUN_OPTIONS] IMAGE [COMMAND [ARG1 ARG2 ...]]
To start a docker container:
   x11docker [OPTIONS] start [DOCKER_START_OPTIONS] CONTAINER [CONTAINER2 ...]
x11docker without any option will only create a new X server and run twm.

Change between displays/X servers pressing <CTRL><ALT><F7>, <CTRL><ALT><F8>, ...
To shut down new X server, choose 'exit' in the window manager.

Options:
 -h, --help            display this message and exit
 -w, --wm COMMAND      window manager to use (default: 'twm')
 -d, --desktop         don't run twm or another wm on new X server;
                       image contains its own desktop and/or window manager
 -s, --sudo            use 'sudo' to run 'su -c docker ...'
 run                   run image in docker. All arguments after 'run' are 
                       submitted to docker. See 'docker run --help' for options.
 start                 start container in docker. all arguments after 'start' 
                       are submitted to docker. See 'docker start --help' for 
                       options. (Hint: use '-ai' as DOCKER_START_OPTIONS).
#                       Issue: you have to set option '-x, --xsocket' to the 
#                       X socket the image was running the first time.
Advanced options:
 -c, --command         show created docker command on stdout and exit
 -l, --show-log        show output of x11docker terminal window
 -r, --root            allow root to run x11docker. Default: No
                       (A new X server should not be run as root)

Window manager: Default is twm as it is normally shipped with X installations.
         twm is not comfortable, so you can choose another window manager with 
         option '-w, --wm'. It should be a desktop indepentent window manager
         to be able to terminate the new X session with exit or logout option.
         Recommended: flwm, fluxbox, blackbox
         Also working well: amiwm, jwm, pekwm, sapphire, wmaker.

EOF
}

## description of variables and default settings
#
DOCKERMODE=""                                   # can be either "", "run" or "start", depends on options
DOCKERARGS=""                                   # arguments to submit to docker
X11DOCKERARGS=""                                # arguments for x11docker without arguments for docker
ARGUMENT=""                                     # variable to step through arguments

CACHEFOLDER=$HOME/.cache/x11docker              # define cache to store temporary files
XINITRC=$CACHEFOLDER/xinitrc                    # file to store xinitrc                         (will get an appendix later)
XTERMINIT=$CACHEFOLDER/xterminit                # file to store commands to run docker in xterm (will get an appendix later)
XTERMLOG=$CACHEFOLDER/xterm.log                 # file to log output of xterm                   (will get an appendix later)
XINITLOG=$CACHEFOLDER/xinit.log                 # file to store output of X server              (will get an appendix later)
#CIDFILE=$CACHEFOLDER/containerID                # file to store container ID number             (will get an appendix later)


XSERVERAUTHFILE=`mktemp XserverauthXXXXXXXX`    # file to store server cookies
XCLIENTAUTHFILE=$CACHEFOLDER/Xauthority         # file to store client cookies

NEWDISPLAY=""                                   # new display for new X server (if not changed with option '-x, --x-socket')
#NEWXLOCK=""                                     # .Xn-lock - exists for running X server with socket n
#NEWXSOCKET=""                                   # New X socket

DOCKERIP=""                                     # IP adress of docker interface
#XSERVER=/usr/bin/X                              # X server to use

WINDOWMANAGER="twm"                             # option '-w, --wm': window manager to use. set default here
ONLYSHOWCOMMAND=""                              # option '-c, --command': if not empty, only show docker command and exit
GETROOT="su -c"                                 # option '-s, --sudo' will add 'sudo' to command to get root privileges.
SHOWLOG=""                                      # option '-l, --log': if 'yes', output of docker will be shown after exit of X server 
ALLOWROOT=""                                    # option '-r,--root': allow root to run x11docker
X11DOCKERRC=$HOME/.config/x11docker/x11dockerrc # config file to preset options
XDRCARGS=""                                     # variable to store content of X11DOCKERRC


error() {
    ## show error messages on stderr and exit
    #
    echo "x11docker ERROR: $*" >&2
    echo "Type 'x11docker --help' for usage information" >&2
    exit 1
}


xdparser() {
    ## parse args for x11docker (not those for docker) (not the cleanest script, but it works)
    #
    SHORT="hw:dcx:aslr"
    LONG="help,wm:,desktop,x-socket:,xsocket:,command,auth,sudo,show-log,showlog,root"
    PARSED=`getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"`
    eval set -- "$PARSED"
    if [[ $? != 0 ]]; then error $? ; fi
   
    while true; do
        case $1 in
            -h|--help) usage && exit 0                # show help/usage and exit
            ;;
            -w|--wm) WINDOWMANAGER=$2 && shift        # custom window manager
            ;;
            -d|--desktop) WINDOWMANAGER=""            # desktop environment or window manager in image; don't run own window manager
            ;;
            -c|--command) ONLYSHOWCOMMAND="yes"       # only show created docker command and exit
            ;;
            -s|--sudo) GETROOT="sudo $GETROOT"        # use sudo to run 'su -c docker ...'
            ;;
            -l|--show-log|--showlog) SHOWLOG="yes"    # show output of docker after at exit
            ;;
            -r|--root) ALLOWROOT="yes"                # allow x11docker to be run as root
            ;;
            --) break
            ;;
            *) error "error while parsing $1 : $@"
            ;;
        esac  
        shift
    done
}


## split arguments at 'run' or 'start' in those for x11docker and those for docker
#
for ARGUMENT in $*
    do
        if [ -z "$DOCKERMODE" ] ; then
            if [ "$ARGUMENT" = "run" ] ; then DOCKERMODE="run" ; fi
            if [ "$ARGUMENT" = "start" ] ; then DOCKERMODE="start" ; fi
            if [ -z "$DOCKERMODE" ] ; then X11DOCKERARGS="$X11DOCKERARGS $ARGUMENT" ; fi
        else
            DOCKERARGS="$DOCKERARGS $ARGUMENT"
        fi
    done


## parse x11dockerrc, if exists
#
if [ -e "$X11DOCKERRC" ] ; then xdparser $(tail -1 $X11DOCKERRC) ;fi


## parse command line options
#
xdparser $X11DOCKERARGS


## check if script is run as root, if yes, show error & exit
#
if [ -z "$ALLOWROOT" ] ; then   # option '-r,--root': allow x11docker to be run as root
    if [ "0" = "$(id -u)" ] ; then
        error "x11docker should not be run as root. Every child process of 
  the new X server would get root privileges, too. To run docker, you will be
  prompted for your root password only for this one command.
  On systems without a root password, like Ubuntu, choose option '-s, --sudo'
  If you want to allow root to run x11docker, use option '-r, --root'"
    fi
fi


## check if window manager is executable; if not, show error & exit
# if option '-d, --desktop is chosen, then $WINDOWMANAGER is empty
#
if [ -n "$WINDOWMANAGER" ] ;then
    command -v $WINDOWMANAGER >/dev/null 2>&1 || { error "could not find executable window manager '$WINDOWMANAGER'. 
  You can either install package 'twm' with 'apt-get install twm'
  or you can choose another window manager with option '-w, --wm'
  Type 'x11docker --help' to get a list of recommended window managers."; }
fi


## Look for next free display and change some display specific variables
#
NEWDISPLAY="0"
while [ -e "/tmp/.X11-unix/X$NEWDISPLAY" ]; do                       # search unused X socket
    NEWDISPLAY=$(($NEWDISPLAY + 1))
done
XINITRC="$XINITRC.X$NEWDISPLAY"
XTERMLOG="$XTERMLOG.X$NEWDISPLAY"
XTERMINIT="$XTERMINIT.X$NEWDISPLAY"
XINITLOG="$XINITLOG.X$NEWDISPLAY"
XSERVERAUTHFILE="$XSERVERAUTHFILE.X$NEWDISPLAY"
XCLIENTAUTHFILE="$XCLIENTAUTHFILE.X$NEWDISPLAY"
#NEWXSOCKET="/tmp/.X11-unix/X$NEWDISPLAY"
#NEWXLOCK="/tmp/.X$NEWDISPLAY-lock"
#CIDFILE="$CIDFILE.X$NEWDISPLAY"
NEWDISPLAY=":$NEWDISPLAY"   # finally: add ':' to $NEWDISPLAY


## clean up cache
#
rm -f $XINITRC
rm -f $XTERMINIT
rm -f $XTERMLOG
rm -f $XINITLOG
rm -f $XSERVERAUTHFILE
rm -f $XCLIENTAUTHFILE
#rm -f $CIDFILE


## create cache folder, if not already present
#
mkdir -p $CACHEFOLDER


## Get inet Adress of docker0 interface (see 'ifconfig', too) (works, but could be scripted better)
#
DOCKERIP=$(ip -4 addr show docker0 | grep inet | cut -d/ -f1 | cut -d" " -f6)


## Overwrite ENV XAUTHORITY and ENV DISPLAY in this script and its children
#
export XAUTHORITY=$XCLIENTAUTHFILE
export DISPLAY=$DOCKERIP$NEWDISPLAY


## Create command to run docker ##################
#
if [ "$DOCKERMODE" = "run" ] ; then
    COMMAND='docker run'
    COMMAND="$COMMAND -e DISPLAY=$DOCKERIP$NEWDISPLAY "                                  # display over tcp 
    COMMAND="$COMMAND -v $XCLIENTAUTHFILE:/.Xauthority:ro -e XAUTHORITY=/.Xauthority"    # share new X authentication cookie file
#    COMMAND="$COMMAND --cidfile=$CIDFILE"                                                # write container id in file $CIDFILE
elif [ "$DOCKERMODE" = "start" ] ; then
    COMMAND="docker start"
else
    COMMAND="# dontrundocker"
fi
COMMAND="$COMMAND $DOCKERARGS"                                            # add custom docker commands


## option '-c, --command': show created command and exit
#
if [ -n "$ONLYSHOWCOMMAND" ] ; then
    echo $COMMAND
    exit 0
fi


## Create new xinitrc ############################
#
echo "#! /bin/bash"                                                                                > $XINITRC
# create grey background
echo "xsetroot -solid darkgrey"                                                                    >> $XINITRC
# generate Xauthority (ENV XAUTHORITY was changed to $XCLIENTAUTHFILE before) 
echo 'echo "" > '$XCLIENTAUTHFILE                                                                  >> $XINITRC
echo "xauth generate $NEWDISPLAY . trusted"                                                        >> $XINITRC
echo "xauth add $DOCKERIP$NEWDISPLAY . `mcookie`"                                                  >> $XINITRC
echo "cp $XCLIENTAUTHFILE $XSERVERAUTHFILE"                                                        >> $XINITRC
#
if [ -n "$DOCKERMODE" ] ; then
    if [ -n  "$WINDOWMANAGER" ] ; then
        # start inside of a window manager (for single applications) 
        echo "xterm -l -lf $XTERMLOG -title x11docker -hold -e $GETROOT '/bin/bash $XTERMINIT' &"  >> $XINITRC
        echo "$WINDOWMANAGER"                                                                      >> $XINITRC
    else
        # start without window manager (images contains desktop environment)
        echo "xterm -l -lf $XTERMLOG -title x11docker -e $GETROOT '/bin/bash $XTERMINIT' "         >> $XINITRC
    fi
else
    # If docker is not started, only run window manager on new X server
    echo "$WINDOWMANAGER"                                                                          >> $XINITRC
fi


## create xterminit ##############################
#
echo "#! /bin/bash"                                                            > $XTERMINIT
echo "echo x11docker: Output of this terminal will be logged in"               >> $XTERMINIT
echo "echo $XTERMLOG"                                                          >> $XTERMINIT
echo "echo x11docker: Running docker on display $NEWDISPLAY with command"      >> $XTERMINIT
echo "echo $COMMAND"                                                           >> $XTERMINIT
echo "$COMMAND"                                                                >> $XTERMINIT


## Finally: run docker ##########################
#
xinit $XINITRC -- $NEWDISPLAY -quiet -listen tcp -auth $XSERVERAUTHFILE |& tee $XINITLOG #| grep garnichts


## option -l, --show-log   # isn't executed with 'set -e', script stops after xinit - check for xinit errors
#
if [ -n "$SHOWLOG" ] ; then 
    echo "x11docker: logged output of xterm:"
    cat $XTERMLOG
fi


exit 0

